{"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/dynamicconditionstrategy"]}],"abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"seeAlsoSections":[{"generated":true,"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article","title":"DynamicConditionStrategy"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"DynamicConditionStrategy is a strategy that dynamically controls locks based on runtime state and conditions. Through condition evaluation with custom logic, it enables flexible exclusive control according to business rules."}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where complex business conditions that cannot be expressed with standard strategies or dynamic control based on application state is required.","type":"text"}]},{"type":"heading","text":"Condition Evaluation System","anchor":"Condition-Evaluation-System","level":2},{"type":"heading","text":"Basic Condition Specification","anchor":"Basic-Condition-Specification","level":3},{"type":"codeListing","syntax":"swift","code":["LockmanDynamicConditionInfo(","    actionId: \"payment\",","    condition: {","        \/\/ Custom condition logic","        guard userIsAuthenticated else {","            return .cancel(AuthenticationError.notLoggedIn)","        }","        guard accountBalance >= requiredAmount else {","            return .cancel(PaymentError.insufficientFunds)","        }","        return .success","    }",")"]},{"type":"heading","text":"Advanced Control with Reducer.lock","anchor":"Advanced-Control-with-Reducerlock","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the method chain API enables more advanced condition evaluation based on current state and action:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .makePayment(let amount):","            \/\/ Create a temporary reducer with dynamic conditions","            let tempReducer = Reduce<State, Action> { _, _ in .none }","                .lock { state, _ in","                    \/\/ Reducer-level condition","                    guard state.isAuthenticated else {","                        return .cancel(AuthenticationError.notLoggedIn)","                    }","                    return .success","                }","            ","            return tempReducer.lock(","                state: state,","                action: action,","                operation: { send in","                    try await processPayment(amount)","                    await send(.paymentCompleted)","                },","                lockAction: PaymentAction(),","                boundaryId: CancelID.payment,","                lockCondition: { state, _ in","                    \/\/ Action-level condition","                    guard state.balance >= amount else {","                        return .cancel(PaymentError.insufficientFunds(","                            required: amount,","                            available: state.balance","                        ))","                    }","                    return .success","                }","            )","        }","    }","}"]},{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example","level":3},{"type":"codeListing","syntax":"swift","code":["@LockmanDynamicCondition","enum ViewAction {","    case transfer(amount: Double)","    case withdraw(amount: Double)","    ","    var lockmanInfo: LockmanDynamicConditionInfo {","        switch self {","        case .transfer(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ Business hours check","                    guard BusinessHours.isOpen else {","                        return .cancel(BankError.outsideBusinessHours)","                    }","                    \/\/ Amount limit check","                    guard amount <= transferLimit else {","                        return .cancel(BankError.transferLimitExceeded)","                    }","                    return .success","                }","            )","        case .withdraw(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ ATM availability check","                    guard ATMService.isAvailable else {","                        return .cancel(BankError.atmUnavailable)","                    }","                    return .success","                }","            )","        }","    }","}"]},{"type":"heading","text":"Multi-Stage Condition Evaluation","anchor":"Multi-Stage-Condition-Evaluation","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The method chain API provides three stages of condition evaluation:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Action-level conditions"}]},{"text":": Conditions for specific operations","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Reducer-level conditions","type":"text"}]},{"text":": Overall prerequisite conditions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Traditional lock strategies"}]},{"text":": Standard exclusive control","type":"text"}]}]}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .criticalOperation:","            let tempReducer = Reduce<State, Action> { _, _ in .none }","                .lock { state, _ in","                    \/\/ 2. Reducer-level condition","                    guard state.maintenanceMode == false else {","                        return .cancel(SystemError.maintenanceMode)","                    }","                    return .success","                }","            ","            return tempReducer.lock(","                state: state,","                action: action,","                operation: { send in","                    try await performCriticalOperation()","                    await send(.operationCompleted)","                },","                lockAction: CriticalAction(), \/\/ 3. Traditional strategy (SingleExecution, etc.)","                boundaryId: CancelID.critical,","                lockCondition: { state, _ in","                    \/\/ 1. Action-level condition","                    guard state.systemStatus == .ready else {","                        return .cancel(SystemError.notReady)","                    }","                    return .success","                }","            )","        }","    }","}"]},{"type":"heading","text":"Operation Examples","anchor":"Operation-Examples","level":2},{"type":"heading","text":"Basic Condition Evaluation","anchor":"Basic-Condition-Evaluation","level":3},{"type":"codeListing","syntax":null,"code":["Time: 9:00  - transfer($1000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ✅ Within limit","  Result: ✅ Execute","","Time: 18:00 - transfer($1000) request  ","  Condition 1: Business hours check → ❌ Outside hours","  Result: ❌ Reject (BankError.outsideBusinessHours)","","Time: 10:00 - transfer($50000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ❌ Exceeds limit","  Result: ❌ Reject (BankError.transferLimitExceeded)"]},{"type":"heading","text":"Multi-Stage Evaluation Operation","anchor":"Multi-Stage-Evaluation-Operation","level":3},{"type":"codeListing","syntax":null,"code":["criticalOperation request:","","Step 1: Reducer-level condition","  maintenanceMode == false → ✅ Pass","","Step 2: Action-level condition  ","  systemStatus == .ready → ✅ Pass","","Step 3: Traditional strategy (e.g., SingleExecution)","  Duplicate execution check → ✅ Pass","","Result: ✅ All stages passed, start execution"]},{"type":"heading","text":"Error Handling","anchor":"Error-Handling","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with DynamicConditionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","isActive":true,"overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}]},{"type":"text","text":" page."}]},{"type":"heading","text":"Utilizing Custom Errors","anchor":"Utilizing-Custom-Errors","level":3},{"type":"codeListing","syntax":"swift","code":["enum BusinessError: Error {","    case insufficientFunds(required: Double, available: Double)","    case dailyLimitExceeded(limit: Double)","    case accountSuspended(reason: String)","    case outsideBusinessHours","}","","lockFailure: { error, send in","    switch error as? BusinessError {","    case .insufficientFunds(let required, let available):","        await send(.showError(\"Insufficient funds: Required ¥\\(required), Available ¥\\(available)\"))","        ","    case .dailyLimitExceeded(let limit):","        await send(.showError(\"Daily limit of ¥\\(limit) exceeded\"))","        ","    case .accountSuspended(let reason):","        await send(.showError(\"Account suspended: \\(reason)\"))","        ","    case .outsideBusinessHours:","        await send(.showError(\"Outside business hours (Weekdays 9:00-17:00)\"))","        ","    default:","        await send(.showError(\"Cannot perform operation\"))","    }","}"]}]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"references":{"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"type":"topic","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","title":"CompositeStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"title":"GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"role":"article","title":"SingleExecutionStrategy","url":"\/documentation\/lockman\/singleexecutionstrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","title":"PriorityBasedStrategy","role":"article","type":"topic"}}}