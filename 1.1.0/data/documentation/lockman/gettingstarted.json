{"variants":[{"paths":["\/documentation\/lockman\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"kind":"article","seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"anchor":"Essentials","generated":true}],"metadata":{"modules":[{"name":"Lockman"}],"role":"article","roleHeading":"Article","title":"Getting Started"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Adding Lockman as a dependency","type":"heading","anchor":"Adding-Lockman-as-a-dependency"},{"inlineContent":[{"type":"text","text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}],"type":"paragraph"},{"code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"x.x.x\")","]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"And add ","type":"text"},{"code":"Lockman","type":"codeVoice"},{"text":" as a dependency of your package’s target:","type":"text"}],"type":"paragraph"},{"code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Writing your first feature","type":"heading","anchor":"Writing-your-first-feature"},{"inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitle":"@LockmanSingleExecution","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}]},{"type":"text","text":" macro."}],"type":"paragraph"},{"level":3,"text":"Step 1: Define the Reducer","type":"heading","anchor":"Step-1-Define-the-Reducer"},{"inlineContent":[{"text":"First, define the basic Reducer structure:","type":"text"}],"type":"paragraph"},{"code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Step 2: Define State and Action","type":"heading","anchor":"Step-2-Define-State-and-Action"},{"inlineContent":[{"type":"text","text":"Define the State to manage the processing status and the available actions:"}],"type":"paragraph"},{"code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    enum Action: ViewAction {","        case view(View)","        case internal(Internal)","        ","        @LockmanSingleExecution","        enum View {","            case startProcessButtonTapped","            ","            var lockmanInfo: LockmanSingleExecutionInfo {","                return .init(actionId: actionName, mode: .boundary)","            }","        }","        ","        enum Internal {","            case processStart","            case processCompleted","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Key points:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses TCA’s ViewAction pattern, where view-related actions are nested under the "},{"code":"view","type":"codeVoice"},{"type":"text","text":" case"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applying the "},{"isActive":true,"overridingTitleInlineContent":[{"code":"@LockmanSingleExecution","type":"codeVoice"}],"overridingTitle":"@LockmanSingleExecution","type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},{"type":"text","text":" macro to the nested View enum makes it conform to the "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"},{"type":"text","text":" protocol"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property defines how each action is controlled for locking:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Action identification: Provides the action identifier within the lock management system","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies"}]}]}],"type":"unorderedList"}]}]},{"level":3,"text":"Step 3: Define CancelID","type":"heading","anchor":"Step-3-Define-CancelID"},{"inlineContent":[{"type":"text","text":"Define a "},{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" to use as the cancellation identifier for Effects:"}],"type":"paragraph"},{"code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"CancelID"},{"text":" is used for Effect cancellation and lock boundary identification.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Step 4: Implement the Reducer body","type":"heading","anchor":"Step-4-Implement-the-Reducer-body"},{"inlineContent":[{"type":"text","text":"Implement processing with exclusive control using the "},{"overridingTitleInlineContent":[{"code":"Reducer.lock","type":"codeVoice"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitle":"Reducer.lock","isActive":true},{"type":"text","text":" modifier:"}],"type":"paragraph"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .run { send in","                await send(.processStart)","                \/\/ Simulate heavy processing","                try await Task.sleep(nanoseconds: 3_000_000_000)","                await send(.processCompleted)","            }","            .cancellable(id: CancelID.userAction)","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            if error is LockmanSingleExecutionCancellationError {","                await send(.internal(.updateMessage(\"Processing is already in progress\")))","            }","        },","        for: \\.view","    )","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Key points about the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitleInlineContent":[{"type":"codeVoice","code":"Reducer.lock"}],"overridingTitle":"Reducer.lock"},{"type":"text","text":" modifier:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Automatically applies lock management to all actions that implement "},{"type":"codeVoice","code":"LockmanAction"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Specifies the identifier for Effect cancellation and lock boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"lockFailure","type":"codeVoice"},{"text":": Common handler for lock acquisition failures across all actions","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"for"},{"type":"text","text":": Case paths to check for nested LockmanAction conformance (in this example, "},{"type":"codeVoice","code":"\\.view"},{"type":"text","text":" checks actions nested in the view case)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Effects from non-LockmanAction actions pass through unchanged","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"With this implementation, the "},{"type":"codeVoice","code":"startProcessButtonTapped"},{"type":"text","text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times."}],"type":"paragraph"},{"level":2,"text":"Alternative APIs","type":"heading","anchor":"Alternative-APIs"},{"level":3,"text":"Using Effect.lock() Method Chain","type":"heading","anchor":"Using-Effectlock-Method-Chain"},{"inlineContent":[{"type":"text","text":"For individual effects that need locking, you can use the method chain API:"}],"type":"paragraph"},{"code":["case .startProcessButtonTapped:","    return .run { send in","        await send(.processStart)","        try await Task.sleep(nanoseconds: 3_000_000_000)","        await send(.processCompleted)","    }","    .cancellable(id: CancelID.userAction)","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ Handler for lock acquisition failure","            await send(.lockFailed)","        }","    )"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Using withLock for Fine-Grained Control","type":"heading","anchor":"Using-withLock-for-Fine-Grained-Control"},{"inlineContent":[{"type":"text","text":"When you need more control over lock lifecycle or want to handle errors differently:"}],"type":"paragraph"},{"code":["case .startProcessButtonTapped:","    return .withLock(","        operation: { send in","            await send(.processStart)","            \/\/ Simulate heavy processing","            try await Task.sleep(nanoseconds: 3_000_000_000)","            await send(.processCompleted)","        },","        catch handler: { error, send in","            \/\/ Handle errors during operation","            await send(.processError(error.localizedDescription))","        },","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            state.message = \"Processing is already in progress\"","        },","        action: action,","        boundaryId: CancelID.userAction","    )"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This approach provides:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Separate error handlers for operation errors and lock failures","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manual unlock control option","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"More detailed configuration options","type":"text"}]}]}]}]}],"references":{"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman/Unlock":{"title":"Unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","url":"\/documentation\/lockman\/unlock","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/Lock":{"kind":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","url":"\/documentation\/lockman\/lock","type":"topic","title":"Lock"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"type":"topic","url":"\/documentation\/lockman\/boundaryoverview","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","title":"Boundary"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"role":"article","url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"role":"article","title":"SingleExecutionStrategy","url":"\/documentation\/lockman\/singleexecutionstrategy"},"doc://Lockman/documentation/Lockman/Configuration":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"type":"topic","url":"\/documentation\/lockman\/configuration","kind":"article","role":"article","title":"Configuration"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"}}}