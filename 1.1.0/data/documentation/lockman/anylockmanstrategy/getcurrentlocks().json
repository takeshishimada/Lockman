{"metadata":{"role":"symbol","modules":[{"name":"Lockman"}],"symbolKind":"method","externalID":"s:7Lockman03AnyA8StrategyV15getCurrentLocksSDyAA0bA10BoundaryIdVSayAA0A4Info_pGGyF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","text":"AnyLockmanBoundaryId","kind":"typeIdentifier"},{"text":" : [any ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A4InfoP","text":"LockmanInfo","kind":"typeIdentifier"},{"text":"]]","kind":"text"}],"roleHeading":"Instance Method","title":"getCurrentLocks()"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"kind":"symbol","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":" : [any ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"},{"text":"]]","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"type":"text","text":"Dictionary mapping boundary IDs to their active lock information"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method provides a snapshot of all currently held locks managed by the"},{"type":"text","text":" "},{"type":"text","text":"underlying concrete strategy. The implementation delegates to the concrete"},{"type":"text","text":" "},{"type":"text","text":"strategy’s getCurrentLocks method through the type-erased closure."}],"type":"paragraph"},{"anchor":"Type-Safety","level":2,"type":"heading","text":"Type Safety"},{"inlineContent":[{"type":"text","text":"While the strategy type is erased, the lock information types are preserved"},{"type":"text","text":" "},{"type":"text","text":"through the protocol’s associated type requirement."}],"type":"paragraph"},{"anchor":"Thread-Safety","level":2,"type":"heading","text":"Thread Safety"},{"inlineContent":[{"type":"text","text":"The operation provides a consistent snapshot at the time of the call,"},{"type":"text","text":" "},{"type":"text","text":"but the actual lock state may change immediately after."}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns current locks information for debugging."}],"references":{"doc://Lockman/documentation/Lockman/LockmanInfo":{"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanInfo"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","abstract":[{"type":"text","text":"Represents information required by Lockman locking strategies."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanInfo"}],"title":"LockmanInfo","url":"\/documentation\/lockman\/lockmaninfo"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","kind":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"title":"AnyLockmanStrategy","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","title":"getCurrentLocks()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","text":"AnyLockmanBoundaryId","kind":"typeIdentifier"},{"text":" : [any ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A4InfoP","text":"LockmanInfo","kind":"typeIdentifier"},{"text":"]]","kind":"text"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","abstract":[{"text":"Returns current locks information for debugging.","type":"text"}],"kind":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"url":"\/documentation\/lockman\/anylockmanboundaryid","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"type":"topic","title":"AnyLockmanBoundaryId","kind":"symbol"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"}}}