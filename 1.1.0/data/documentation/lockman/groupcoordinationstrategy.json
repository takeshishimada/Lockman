{"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"GroupCoordinationStrategy"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"anchor":"Strategies","title":"Strategies"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}]},{"type":"heading","text":"Group System","anchor":"Group-System","level":2},{"type":"heading","text":"Coordination Roles","anchor":"Coordination-Roles","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"none","type":"text"}]},{"type":"text","text":" - Non-exclusive Participant"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate regardless of group state","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Auxiliary processing such as UI updates or logging","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"leader","type":"text"}],"type":"strong"},{"type":"text","text":" - Group Leader"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Role to start group activities","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}]}]},{"content":[{"inlineContent":[{"text":"Enables member participation","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"member","type":"text"}],"type":"strong"},{"text":" - Group Member","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can only participate in active groups"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes when leader or other participants are present"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responsible for coordinated processing"}]}]}]},{"type":"heading","anchor":"Leader-Entry-Policy","level":3,"text":"Leader Entry Policy"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"emptyGroup","type":"text"}]},{"type":"text","text":" - Start only in empty group"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.emptyGroup)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Starts new activity cycle","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Most strict control"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"withoutMembers","type":"text"}],"type":"strong"},{"text":" - Start without members","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.withoutMembers)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate when no members are present"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Other leaders are allowed"}]}]},{"content":[{"inlineContent":[{"text":"Enables coordination between leaders","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"withoutLeader","type":"text"}]},{"type":"text","text":" - Start without leader"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.withoutLeader)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no other leaders are present"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Members are allowed","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Exclusive control of leader authority","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"text":"Usage","anchor":"Usage"},{"type":"heading","level":3,"text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"]},{"type":"heading","level":3,"text":"Coordination with Multiple Groups","anchor":"Coordination-with-Multiple-Groups"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"text":"Operation Examples","anchor":"Operation-Examples"},{"type":"heading","level":3,"text":"Leader-Member Coordination","anchor":"Leader-Member-Coordination"},{"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing","syntax":null},{"type":"heading","level":3,"text":"Entry Policy Differences","anchor":"Entry-Policy-Differences"},{"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing","syntax":null},{"type":"heading","level":2,"text":"Error Handling","anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true},{"text":" page.","type":"text"}]},{"type":"heading","level":3,"text":"LockmanGroupCoordinationCancellationError","anchor":"LockmanGroupCoordinationCancellationError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This error conforms to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol and provides:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"type":"text","text":": Information about the cancelled action"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"text":": Where the cancellation occurred","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reason"},{"type":"text","text":": Specific reason for cancellation"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}]},{"type":"text","text":" - Action already in group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}],"type":"strong"},{"type":"text","text":" - Leader cannot join non-empty group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}]},{"type":"text","text":" - Member cannot join empty group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"blockedByExclusiveLeader","type":"text"}]},{"type":"text","text":" - Blocked by exclusive leader"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader: \\(leaderInfo.actionId)\"))","    }","}"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/lockman\/groupcoordinationstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","type":"topic","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"role":"article","title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"role":"article","title":"SingleExecutionStrategy","url":"\/documentation\/lockman\/singleexecutionstrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"type":"topic","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","title":"CompositeStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","title":"PriorityBasedStrategy","role":"article","type":"topic"}}}