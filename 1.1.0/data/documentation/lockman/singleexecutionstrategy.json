{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"title":"Strategies"}],"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article","title":"SingleExecutionStrategy"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}]},{"type":"paragraph","inlineContent":[{"text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing.","type":"text"}]},{"text":"Execution Modes","anchor":"Execution-Modes","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy supports three execution modes:"}]},{"text":"none - No Control","anchor":"none-No-Control","type":"heading","level":3},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Executes all processing without exclusive control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"boundary - Boundary-level Exclusive Control","anchor":"boundary-Boundary-level-Exclusive-Control","type":"heading","level":3},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Exclusive control at screen or component level","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied when wanting to control entire UI operations","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"action-Action-level-Exclusive-Control","type":"heading","level":3,"text":"action - Action-level Exclusive Control"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Different actions can execute concurrently"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Usage","type":"heading","level":2,"text":"Usage"},{"anchor":"Basic-Usage-Example","type":"heading","level":3,"text":"Basic Usage Example"},{"syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"type":"codeListing"},{"anchor":"Usage-with-Reducerlock","type":"heading","level":3,"text":"Usage with Reducer.lock()"},{"syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            }","            .catch { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionCancellationError,","               case .actionAlreadyRunning(let info) = singleError.reason {","                await send(.showBusyMessage(\"\\(info.actionId) is currently running\"))","            }","        }","    )","}"],"type":"codeListing"},{"anchor":"Advanced-Usage-with-withLock","type":"heading","level":3,"text":"Advanced Usage with withLock"},{"inlineContent":[{"text":"For cases requiring fine-grained control:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            await send(.saveCompleted)","        },","        catch handler: { error, send in","            await send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        },","        action: action,","        boundaryId: CancelID.userAction","    )"]},{"type":"heading","text":"Operation Examples","level":2,"anchor":"Operation-Examples"},{"type":"heading","text":"action mode","level":3,"anchor":"action-mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"]},{"type":"heading","text":"boundary mode","level":3,"anchor":"boundary-mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"]},{"type":"heading","text":"Error Handling","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"overridingTitle":"Error Handling"},{"type":"text","text":" page."}]},{"type":"heading","text":"LockmanSingleExecutionCancellationError","level":3,"anchor":"LockmanSingleExecutionCancellationError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This error conforms to "},{"code":"LockmanCancellationError","type":"codeVoice"},{"type":"text","text":" protocol and provides:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"type":"text","text":": Where the cancellation occurred"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reason","type":"codeVoice"},{"text":": Specific reason for cancellation","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CancellationReason cases:"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"boundaryAlreadyLocked","type":"text"}]},{"type":"text","text":" - Boundary is already locked"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"type":"text","text":": Existing lock information"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyRunning"}]},{"type":"text","text":" - Same action is already running"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Running action information"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionCancellationError {","        switch singleError.reason {","        case .boundaryAlreadyLocked(let existingInfo):","            send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","        case .actionAlreadyRunning(let existingInfo):","            send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","        }","    } else {","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"]}]}],"references":{"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","title":"PriorityBasedStrategy","role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"type":"topic","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","title":"CompositeStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"title":"GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","type":"topic","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"role":"article","title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy"}}}