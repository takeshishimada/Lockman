{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"role":"symbol","externalID":"s:7Lockman0A15SingleExecutionyycfm","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"title":"LockmanSingleExecution()","symbolKind":"macro","modules":[{"name":"Lockman"}],"roleHeading":"Macro"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","preciseIdentifier":"s:7Lockman0A21SingleExecutionActionP","text":"LockmanSingleExecutionAction","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Default ","type":"text"},{"code":"strategyId","type":"codeVoice"},{"text":" implementation is provided by the protocol","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"Important","type":"text"}],"type":"strong"},{"text":": You must implement the ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property to specify the execution mode:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".none"},{"text":": No exclusive execution (always allows locks)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".boundary"},{"type":"text","text":": Only one action per boundary at a time (default behavior)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".action"},{"text":": Only one instance of the same actionId at a time","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example usage with TCA:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct MyFeature {","  @LockmanSingleExecution","  enum Action {","    case login","    case logout","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .login:","        return .init(actionId: actionName, mode: .boundary)","      case .logout:","        return .init(actionId: actionName, mode: .action)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .login:","        return .withLock(","          operation: { send in","            \/\/ async work","          },","          action: .login,","          boundaryId: \"login-operation\"","        )","      \/\/ ...","      }","    }","  }","}"]}]}],"abstract":[{"text":"A macro that generates protocol conformance and required members for single execution locking behavior.","type":"text"}],"sections":[],"variants":[{"paths":["\/documentation\/lockman\/lockmansingleexecution()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"},"doc://Lockman/documentation/Lockman/LockmanSingleExecutionAction":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecutionAction","kind":"identifier"}],"title":"LockmanSingleExecutionAction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","navigatorTitle":[{"text":"LockmanSingleExecutionAction","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/lockman\/lockmansingleexecutionaction","abstract":[{"text":"A specialized ","type":"text"},{"code":"LockmanAction","type":"codeVoice"},{"text":" for single-execution locking semantics.","type":"text"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanSingleExecution()":{"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"title":"LockmanSingleExecution()","kind":"symbol","url":"\/documentation\/lockman\/lockmansingleexecution()","type":"topic","abstract":[{"text":"A macro that generates protocol conformance and required members for single execution locking behavior.","type":"text"}]}}}