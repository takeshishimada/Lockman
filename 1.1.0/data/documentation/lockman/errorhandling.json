{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}]},{"text":"Common Error Handling Patterns","type":"heading","anchor":"Common-Error-Handling-Patterns","level":2},{"text":"lockFailure Handler with Reducer.lock()","type":"heading","anchor":"lockFailure-Handler-with-Reducerlock","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Benefits of centralized error handling:"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Consistent error handling across all actions"}]}]},{"content":[{"inlineContent":[{"text":"Single place to update error messages","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Easier to maintain and test"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Parameters:","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"error"},{"type":"text","text":": The error that occurred (strategy-specific error type)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"send"},{"type":"text","text":": Function for sending feedback to the user"}]}]}]},{"text":"catch handler Pattern","type":"heading","anchor":"catch-handler-Pattern","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Handling general errors that occur during processing:"}]},{"type":"codeListing","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}]},{"type":"heading","level":2,"anchor":"Types-of-Errors-and-Solutions","text":"Types of Errors and Solutions"},{"type":"heading","level":3,"anchor":"1-Lock-Acquisition-Failure-Already-Locked","text":"1. Lock Acquisition Failure (Already Locked)"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"text":": Occurs when the same processing or boundary is already running","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"type":"text","text":":"}]},{"type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    await send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"2-PermissionPriority-Conflicts","text":"2. Permission\/Priority Conflicts"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"text":": Occurs due to higher priority processing or group rule constraints","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"type":"codeListing"},{"level":3,"text":"3. Cancellation Notification","anchor":"3-Cancellation-Notification","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"],"type":"codeListing"},{"level":2,"text":"Best Practices","anchor":"Best-Practices","type":"heading"},{"level":3,"text":"1. Proper Error Type Casting","anchor":"1-Proper-Error-Type-Casting","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"type":"codeListing"},{"level":3,"text":"2. User-Friendly Messages","anchor":"2-User-Friendly-Messages","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"],"type":"codeListing"},{"level":3,"text":"3. Utilizing Additional Information","anchor":"3-Utilizing-Additional-Information","type":"heading"},{"inlineContent":[{"type":"text","text":"Many errors contain additional information:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start processing\"))","        }","    }",")"],"type":"codeListing"},{"level":2,"text":"Strategy-Specific Errors","anchor":"Strategy-Specific-Errors","type":"heading"},{"inlineContent":[{"type":"text","text":"All strategy errors now conform to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol, providing consistent access to:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"errorDescription","type":"codeVoice"},{"type":"text","text":" and "},{"code":"failureReason","type":"codeVoice"},{"type":"text","text":": Localized error descriptions"}]}]}],"type":"unorderedList"},{"level":3,"text":"Error Types by Strategy:","anchor":"Error-Types-by-Strategy","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"SingleExecutionStrategy","type":"text"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"PriorityBasedStrategy"}],"type":"strong"},{"text":":","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedBlockedError","type":"codeVoice"},{"text":" - New action blocked by priority","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedCancellationError","type":"codeVoice"},{"type":"text","text":" - Existing action cancelled by preemption"}]}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"},{"type":"text","text":" - Group rule violations"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"ConcurrencyLimitedStrategy","type":"text"}],"type":"strong"},{"text":": ","type":"text"},{"code":"LockmanConcurrencyLimitedCancellationError","type":"codeVoice"},{"text":" - Concurrent execution limit exceeded","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","overridingTitle":"DynamicConditionStrategy","overridingTitleInlineContent":[{"text":"DynamicConditionStrategy","type":"text"}]},{"type":"text","text":" - Condition mismatch errors"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}],"type":"reference","overridingTitle":"CompositeStrategy","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},{"text":" - Composite strategy errors","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"sections":[],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article","title":"Error Handling"},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"anchor":"Essentials","generated":true,"title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"type":"topic","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","title":"CompositeStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/Lock":{"kind":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","url":"\/documentation\/lockman\/lock","type":"topic","title":"Lock"},"doc://Lockman/documentation/Lockman/Configuration":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"type":"topic","url":"\/documentation\/lockman\/configuration","kind":"article","role":"article","title":"Configuration"},"doc://Lockman/documentation/Lockman/GettingStarted":{"url":"\/documentation\/lockman\/gettingstarted","type":"topic","title":"Getting Started","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","role":"article","kind":"article","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","type":"topic","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"role":"article","title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"type":"topic","url":"\/documentation\/lockman\/boundaryoverview","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","title":"Boundary"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"role":"article","url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","title":"Lockman","role":"collection"},"doc://Lockman/documentation/Lockman/Unlock":{"title":"Unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","url":"\/documentation\/lockman\/unlock","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide"}}}