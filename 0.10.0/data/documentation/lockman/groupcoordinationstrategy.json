{"variants":[{"paths":["\/documentation\/lockman\/groupcoordinationstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Strategies","anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}]},{"level":2,"type":"heading","text":"Group System","anchor":"Group-System"},{"level":3,"type":"heading","text":"Coordination Roles","anchor":"Coordination-Roles"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"type":"text","text":" - Non-exclusive Participant"}]},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate regardless of group state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Auxiliary processing such as UI updates or logging"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leader"}]},{"text":" - Group Leader","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Role to start group activities","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Controls participation conditions according to entry policy","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables member participation"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"member"}]},{"type":"text","text":" - Group Member"}]},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can only participate in active groups","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Executes when leader or other participants are present","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responsible for coordinated processing"}]}]}]},{"level":3,"type":"heading","text":"Leader Entry Policy","anchor":"Leader-Entry-Policy"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"emptyGroup","type":"text"}],"type":"strong"},{"text":" - Start only in empty group","type":"text"}]},{"syntax":"swift","type":"codeListing","code":[".leader(.emptyGroup)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}]}]},{"content":[{"inlineContent":[{"text":"Starts new activity cycle","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Most strict control","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"withoutMembers","type":"text"}],"type":"strong"},{"text":" - Start without members","type":"text"}]},{"syntax":"swift","type":"codeListing","code":[".leader(.withoutMembers)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate when no members are present"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Other leaders are allowed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Enables coordination between leaders","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"withoutLeader"}],"type":"strong"},{"text":" - Start without leader","type":"text"}]},{"syntax":"swift","type":"codeListing","code":[".leader(.withoutLeader)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can participate when no other leaders are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Members are allowed"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}]}]}]},{"level":2,"type":"heading","text":"Usage","anchor":"Usage"},{"level":3,"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"syntax":"swift","type":"codeListing","code":["@LockmanGroupCoordination","enum Action {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"]},{"level":3,"type":"heading","text":"Coordination with Multiple Groups","anchor":"Coordination-with-Multiple-Groups"},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"level":2,"type":"heading","text":"Operation Examples","anchor":"Operation-Examples"},{"level":3,"type":"heading","text":"Leader-Member Coordination","anchor":"Leader-Member-Coordination"},{"syntax":null,"type":"codeListing","code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"]},{"level":3,"type":"heading","text":"Entry Policy Differences","anchor":"Entry-Policy-Differences"},{"syntax":null,"type":"codeListing","code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"]},{"level":2,"type":"heading","text":"Error Handling","anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","isActive":true},{"type":"text","text":" page."}]},{"level":3,"type":"heading","text":"LockmanGroupCoordinationError","anchor":"LockmanGroupCoordinationError"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyInGroup","type":"text"}]},{"type":"text","text":" - Action already in group"}]},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    if case .actionAlreadyInGroup(let existingInfo, let groupIds) = error as? LockmanGroupCoordinationError {","        send(.alreadyActive(\"Process is already running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}],"type":"strong"},{"text":" - Leader cannot join non-empty group","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    if case .leaderCannotJoinNonEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}]},{"type":"text","text":" - Member cannot join empty group"}]},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    if case .memberCannotJoinEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.noActiveGroup(\"No active group\"))","    }","}"]}],"kind":"content"}],"kind":"article","metadata":{"role":"article","modules":[{"name":"Lockman"}],"title":"GroupCoordinationStrategy","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","title":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article"}}}