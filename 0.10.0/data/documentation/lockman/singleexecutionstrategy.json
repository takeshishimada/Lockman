{"metadata":{"role":"article","title":"SingleExecutionStrategy","modules":[{"name":"Lockman"}],"roleHeading":"Article"},"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"variants":[{"paths":["\/documentation\/lockman\/singleexecutionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"seeAlsoSections":[{"generated":true,"title":"Strategies","anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}]},{"type":"heading","text":"Execution Modes","anchor":"Execution-Modes","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy supports three execution modes:"}]},{"type":"heading","text":"none - No Control","anchor":"none-No-Control","level":3},{"type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes all processing concurrently without exclusive control"}]}]},{"content":[{"inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}]},{"type":"heading","text":"boundary - Boundary-level Exclusive Control","anchor":"boundary-Boundary-level-Exclusive-Control","level":3},{"type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}]}]},{"content":[{"inlineContent":[{"text":"Applied when wanting to control entire UI operations","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"action - Action-level Exclusive Control","anchor":"action-Action-level-Exclusive-Control","level":3},{"type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}]},{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example","level":3},{"type":"codeListing","code":["@LockmanSingleExecution","enum Action {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Usage within Effects","anchor":"Usage-within-Effects","level":3},{"type":"codeListing","code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            send(.saveCompleted)","        },","        catch handler: { error, send in","            send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            send(.saveBusy(\"Save process is currently running\"))","        },","        action: .save,","        cancelID: CancelID.userAction","    )"],"syntax":"swift"},{"type":"heading","text":"Operation Examples","anchor":"Operation-Examples","level":2},{"type":"heading","text":"action mode","anchor":"action-mode","level":3},{"type":"codeListing","code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"syntax":null},{"type":"heading","text":"boundary mode","anchor":"boundary-mode","level":3},{"type":"codeListing","code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"syntax":null},{"type":"heading","text":"Error Handling","anchor":"Error-Handling","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"overridingTitle":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"type":"text","text":" page."}]},{"type":"heading","text":"LockmanSingleExecutionError","anchor":"LockmanSingleExecutionError","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"boundaryAlreadyLocked","type":"text"}]},{"type":"text","text":" - Boundary is already locked"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": ID of the locked boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Existing lock information","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyRunning","type":"text"}]},{"type":"text","text":" - Same action is already running"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Running action information","type":"text"}]}]}]},{"type":"codeListing","code":["lockFailure: { error, send in","    switch error as? LockmanSingleExecutionError {","    case .boundaryAlreadyLocked(_, let existingInfo):","        send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","    case .actionAlreadyRunning(let existingInfo):","        send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","    default:","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"],"syntax":"swift"}],"kind":"content"}],"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","title":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic"}}}