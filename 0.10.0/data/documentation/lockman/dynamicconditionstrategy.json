{"kind":"article","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"DynamicConditionStrategy","modules":[{"name":"Lockman"}]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"paths":["\/documentation\/lockman\/dynamicconditionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"DynamicConditionStrategy is a strategy that dynamically controls locks based on runtime state and conditions. Through condition evaluation with custom logic, it enables flexible exclusive control according to business rules.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where complex business conditions that cannot be expressed with standard strategies or dynamic control based on application state is required."}]},{"text":"Condition Evaluation System","type":"heading","level":2,"anchor":"Condition-Evaluation-System"},{"text":"Basic Condition Specification","type":"heading","level":3,"anchor":"Basic-Condition-Specification"},{"type":"codeListing","syntax":"swift","code":["LockmanDynamicConditionInfo(","    actionId: \"payment\",","    condition: {","        \/\/ Custom condition logic","        guard userIsAuthenticated else {","            return .failure(AuthenticationError.notLoggedIn)","        }","        guard accountBalance >= requiredAmount else {","            return .failure(PaymentError.insufficientFunds)","        }","        return .success","    }",")"]},{"text":"Advanced Control with ReduceWithLock","type":"heading","level":3,"anchor":"Advanced-Control-with-ReduceWithLock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using ReduceWithLock enables more advanced condition evaluation based on current state and action:"}]},{"type":"codeListing","syntax":"swift","code":["ReduceWithLock { state, action in","    switch action {","    case .makePayment(let amount):","        return self.withLock(","            state: state,","            action: action,","            operation: { send in","                try await processPayment(amount)","                send(.paymentCompleted)","            },","            lockAction: PaymentAction.makePayment,","            cancelID: CancelID.payment,","            lockCondition: { state, action in","                \/\/ Action-level condition","                guard state.balance >= amount else {","                    return .failure(PaymentError.insufficientFunds(","                        required: amount, ","                        available: state.balance","                    ))","                }","                return .success","            }","        )","    }","} lockCondition: { state, _ in","    \/\/ Reducer-level condition","    guard state.isAuthenticated else {","        return .failure(AuthenticationError.notLoggedIn)","    }","    return .success","}"]},{"text":"Usage","type":"heading","level":2,"anchor":"Usage"},{"text":"Basic Usage Example","type":"heading","level":3,"anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanDynamicCondition","enum Action {","    case transfer(amount: Double)","    case withdraw(amount: Double)","    ","    var lockmanInfo: LockmanDynamicConditionInfo {","        switch self {","        case .transfer(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ Business hours check","                    guard BusinessHours.isOpen else {","                        return .failure(BankError.outsideBusinessHours)","                    }","                    \/\/ Amount limit check","                    guard amount <= transferLimit else {","                        return .failure(BankError.transferLimitExceeded)","                    }","                    return .success","                }","            )","        case .withdraw(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ ATM availability check","                    guard ATMService.isAvailable else {","                        return .failure(BankError.atmUnavailable)","                    }","                    return .success","                }","            )","        }","    }","}"]},{"text":"Multi-Stage Condition Evaluation","type":"heading","level":3,"anchor":"Multi-Stage-Condition-Evaluation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ReduceWithLock provides three stages of condition evaluation:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Action-level conditions","type":"text"}]},{"type":"text","text":": Conditions for specific operations"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Reducer-level conditions"}],"type":"strong"},{"text":": Overall prerequisite conditions","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Traditional lock strategies"}]},{"type":"text","text":": Standard exclusive control"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["ReduceWithLock { state, action in","    switch action {","    case .criticalOperation:","        return self.withLock(","            state: state,","            action: action,","            operation: { send in","                try await performCriticalOperation()","                send(.operationCompleted)","            },","            lockAction: CriticalAction.execute, \/\/ 3. Traditional strategy (SingleExecution, etc.)","            cancelID: CancelID.critical,","            lockCondition: { state, _ in","                \/\/ 1. Action-level condition","                guard state.systemStatus == .ready else {","                    return .failure(SystemError.notReady)","                }","                return .success","            }","        )","    }","} lockCondition: { state, _ in","    \/\/ 2. Reducer-level condition","    guard state.maintenanceMode == false else {","        return .failure(SystemError.maintenanceMode)","    }","    return .success","}"]},{"text":"Operation Examples","type":"heading","level":2,"anchor":"Operation-Examples"},{"text":"Basic Condition Evaluation","type":"heading","level":3,"anchor":"Basic-Condition-Evaluation"},{"type":"codeListing","syntax":null,"code":["Time: 9:00  - transfer($1000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ✅ Within limit","  Result: ✅ Execute","","Time: 18:00 - transfer($1000) request  ","  Condition 1: Business hours check → ❌ Outside hours","  Result: ❌ Reject (BankError.outsideBusinessHours)","","Time: 10:00 - transfer($50000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ❌ Exceeds limit","  Result: ❌ Reject (BankError.transferLimitExceeded)"]},{"text":"Multi-Stage Evaluation Operation","type":"heading","level":3,"anchor":"Multi-Stage-Evaluation-Operation"},{"type":"codeListing","syntax":null,"code":["criticalOperation request:","","Step 1: Reducer-level condition","  maintenanceMode == false → ✅ Pass","","Step 2: Action-level condition  ","  systemStatus == .ready → ✅ Pass","","Step 3: Traditional strategy (e.g., SingleExecution)","  Duplicate execution check → ✅ Pass","","Result: ✅ All stages passed, start execution"]},{"text":"Error Handling","type":"heading","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with DynamicConditionStrategy and their solutions, please also refer to the common patterns on the "},{"overridingTitle":"Error Handling","type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}]},{"type":"text","text":" page."}]},{"text":"Utilizing Custom Errors","type":"heading","level":3,"anchor":"Utilizing-Custom-Errors"},{"type":"codeListing","syntax":"swift","code":["enum BusinessError: Error {","    case insufficientFunds(required: Double, available: Double)","    case dailyLimitExceeded(limit: Double)","    case accountSuspended(reason: String)","    case outsideBusinessHours","}","","lockFailure: { error, send in","    switch error as? BusinessError {","    case .insufficientFunds(let required, let available):","        send(.showError(\"Insufficient funds: Required ¥\\(required), Available ¥\\(available)\"))","        ","    case .dailyLimitExceeded(let limit):","        send(.showError(\"Daily limit of ¥\\(limit) exceeded\"))","        ","    case .accountSuspended(let reason):","        send(.showError(\"Account suspended: \\(reason)\"))","        ","    case .outsideBusinessHours:","        send(.showError(\"Outside business hours (Weekdays 9:00-17:00)\"))","        ","    default:","        send(.showError(\"Cannot perform operation\"))","    }","}"]}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"title":"Strategies","anchor":"Strategies"}],"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","title":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article"}}}