{"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature.","type":"text"}]},{"level":2,"type":"heading","text":"Adding Lockman as a dependency","anchor":"Adding-Lockman-as-a-dependency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" file:"}]},{"syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"0.10.0\")","]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And add "},{"type":"codeVoice","code":"Lockman"},{"type":"text","text":" as a dependency of your package’s target:"}]},{"syntax":"swift","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"type":"codeListing"},{"level":2,"type":"heading","text":"Writing your first feature","anchor":"Writing-your-first-feature"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitle":"@LockmanSingleExecution","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}]},{"type":"text","text":" macro."}]},{"level":3,"type":"heading","text":"Step 1: Define the Reducer","anchor":"Step-1-Define-the-Reducer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, define the basic Reducer structure:"}]},{"syntax":"swift","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"type":"codeListing"},{"level":3,"type":"heading","text":"Step 2: Define State and Action","anchor":"Step-2-Define-State-and-Action"},{"type":"paragraph","inlineContent":[{"text":"Define the State to manage the processing status and the available actions:","type":"text"}]},{"syntax":"swift","code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    @LockmanSingleExecution","    enum Action {","        case startProcessButtonTapped","        case processStart","        case processCompleted","        ","        var lockmanInfo: LockmanSingleExecutionInfo {","            switch self {","            case .startProcessButtonTapped:","                return .init(actionId: actionName, mode: .boundary)","            case .processStart, .processCompleted:","                return .init(actionId: actionName, mode: .none)","            }","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Key points:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitleInlineContent":[{"code":"@LockmanSingleExecution","type":"codeVoice"}],"type":"reference","isActive":true,"overridingTitle":"@LockmanSingleExecution"},{"type":"text","text":" macro to the Action enum makes it conform to the "},{"code":"LockmanSingleExecutionAction","type":"codeVoice"},{"type":"text","text":" protocol"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property defines how each action is controlled for locking:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Action identification: Provides the action identifier within the lock management system","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies"}],"type":"paragraph"}]}]}]}]},{"level":3,"type":"heading","text":"Step 3: Define CancelID","anchor":"Step-3-Define-CancelID"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a "},{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" to use as the cancellation identifier for Effects:"}]},{"syntax":"swift","code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" is used for Effect cancellation and lock boundary identification."}]},{"level":3,"type":"heading","text":"Step 4: Implement the Reducer body","anchor":"Step-4-Implement-the-Reducer-body"},{"type":"paragraph","inlineContent":[{"text":"Implement processing with exclusive control using the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true,"overridingTitle":"withLock","overridingTitleInlineContent":[{"code":"withLock","type":"codeVoice"}],"type":"reference"},{"text":" method:","type":"text"}]},{"syntax":"swift","code":["var body: some Reducer<State, Action> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .withLock(","                operation: { send in","                    await send(.processStart)","                    \/\/ Simulate heavy processing","                    try await Task.sleep(nanoseconds: 3_000_000_000)","                    await send(.processCompleted)","                },","                lockFailure: { error, send in","                    \/\/ When processing is already in progress","                    state.message = \"Processing is already in progress\"","                },","                action: action,","                cancelID: CancelID.userAction","            )","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Key points about the "},{"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"withLock"}],"overridingTitle":"withLock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true},{"type":"text","text":" method:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"operation"},{"type":"text","text":": Defines the processing to be executed under exclusive control"}]}]},{"content":[{"inlineContent":[{"code":"lockFailure","type":"codeVoice"},{"text":": Handler called when the same processing is already in progress","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"action","type":"codeVoice"},{"type":"text","text":": Passes the currently processing action"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"cancelID"},{"type":"text","text":": Specifies the identifier for Effect cancellation and lock boundary"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this implementation, the "},{"type":"codeVoice","code":"startProcessButtonTapped"},{"type":"text","text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times."}]}]}],"seeAlsoSections":[{"title":"Essentials","generated":true,"anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"roleHeading":"Article","title":"Getting Started","role":"article","modules":[{"name":"Lockman"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/gettingstarted"]}],"references":{"doc://Lockman/documentation/Lockman/Unlock":{"kind":"article","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","title":"Unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","type":"topic","url":"\/documentation\/lockman\/unlock"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"title":"Boundary","url":"\/documentation\/lockman\/boundaryoverview","type":"topic"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","title":"Debugging Guide","type":"topic","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","title":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","role":"article","kind":"article","url":"\/documentation\/lockman\/choosingstrategy"},"doc://Lockman/documentation/Lockman/Lock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","role":"article","type":"topic","title":"Lock","url":"\/documentation\/lockman\/lock","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"kind":"article"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/Configuration":{"role":"article","title":"Configuration","url":"\/documentation\/lockman\/configuration","type":"topic","kind":"article","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration"}}}