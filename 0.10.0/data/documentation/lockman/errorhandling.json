{"metadata":{"modules":[{"name":"Lockman"}],"title":"Error Handling","roleHeading":"Article","role":"article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling.","type":"text"}]},{"text":"Common Error Handling Patterns","type":"heading","level":2,"anchor":"Common-Error-Handling-Patterns"},{"text":"lockFailure Handler","type":"heading","level":3,"anchor":"lockFailure-Handler"},{"inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}],"type":"paragraph"},{"code":[".withLock(","    operation: { send in","        \/\/ Execute processing","    },","    lockFailure: { error, send in","        \/\/ Error handling","        if case .specificError(let info) = error as? StrategySpecificError {","            send(.userFriendlyMessage(\"Error message\"))","        }","    },","    action: action,","    cancelID: cancelID",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Parameters:","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"error","type":"codeVoice"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"send","type":"codeVoice"},{"type":"text","text":": Function for sending feedback to the user"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"catch handler Pattern","anchor":"catch-handler-Pattern"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Handling general errors that occur during processing:"}]},{"code":["catch handler: { error, send in","    send(.operationError(error.localizedDescription))","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}]},{"level":2,"type":"heading","text":"Types of Errors and Solutions","anchor":"Types-of-Errors-and-Solutions"},{"level":3,"type":"heading","text":"1. Lock Acquisition Failure (Already Locked)","anchor":"1-Lock-Acquisition-Failure-Already-Locked"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Concept","type":"text"}]},{"type":"text","text":": Occurs when the same processing or boundary is already running"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"text":":","type":"text"}]},{"code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    send(.setButtonState(.loading))","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"2. Permission\/Priority Conflicts","anchor":"2-PermissionPriority-Conflicts"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"text":": Occurs due to higher priority processing or group rule constraints","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"type":"text","text":":"}]},{"code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"3. Cancellation Notification","anchor":"3-Cancellation-Notification"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Concept","type":"text"}]},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"type":"text","text":":"}]},{"code":["catch handler: { error, send in","    if error is CancellationError {","        send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        send(.processError(error.localizedDescription))","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Best Practices","anchor":"Best-Practices"},{"level":3,"type":"heading","text":"1. Proper Error Type Casting","anchor":"1-Proper-Error-Type-Casting"},{"code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if case .actionAlreadyRunning(let existingInfo) = error as? LockmanSingleExecutionError {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"2. User-Friendly Messages","anchor":"2-User-Friendly-Messages"},{"code":["\/\/ ✅ Good example: Specific and easy to understand message","send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","send(.showMessage(\"LockmanError: boundary locked\"))"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"3. Utilizing Additional Information","anchor":"3-Utilizing-Additional-Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many errors contain additional information:"}]},{"code":["lockFailure: { error, send in","    switch error as? LockmanConcurrencyLimitedError {","    case .concurrencyLimitReached(let current, let limit, _):","        send(.showMessage(\"Concurrent execution limit (\\(limit)) reached (current: \\(current))\"))","    default:","        send(.showMessage(\"Cannot start processing\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Strategy-Specific Errors","anchor":"Strategy-Specific-Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For detailed error information for each strategy, please refer to their respective documentation:"}]},{"items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","overridingTitle":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitleInlineContent":[{"text":"SingleExecutionStrategy","type":"text"}]},{"text":" - Duplicate execution errors","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","overridingTitleInlineContent":[{"type":"text","text":"PriorityBasedStrategy"}],"type":"reference","isActive":true,"overridingTitle":"PriorityBasedStrategy"},{"type":"text","text":" - Priority conflict errors"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"text":"GroupCoordinationStrategy","type":"text"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","isActive":true,"overridingTitle":"GroupCoordinationStrategy"},{"type":"text","text":" - Group rule violation errors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","isActive":true,"overridingTitle":"ConcurrencyLimitedStrategy","type":"reference","overridingTitleInlineContent":[{"text":"ConcurrencyLimitedStrategy","type":"text"}]},{"text":" - Concurrent execution limit exceeded errors","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"DynamicConditionStrategy","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","overridingTitle":"DynamicConditionStrategy","type":"reference","isActive":true},{"type":"text","text":" - Condition mismatch errors"}]}]},{"content":[{"inlineContent":[{"overridingTitle":"CompositeStrategy","overridingTitleInlineContent":[{"type":"text","text":"CompositeStrategy"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","isActive":true},{"text":" - Composite strategy errors","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Essentials","generated":true,"title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"references":{"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","role":"article","kind":"article","url":"\/documentation\/lockman\/choosingstrategy"},"doc://Lockman/documentation/Lockman/Unlock":{"kind":"article","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","title":"Unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","type":"topic","url":"\/documentation\/lockman\/unlock"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","title":"Debugging Guide","type":"topic","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"title":"Boundary","url":"\/documentation\/lockman\/boundaryoverview","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/Lock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","role":"article","type":"topic","title":"Lock","url":"\/documentation\/lockman\/lock","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"kind":"article"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","type":"topic","kind":"article","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","role":"article","url":"\/documentation\/lockman\/gettingstarted"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/Configuration":{"role":"article","title":"Configuration","url":"\/documentation\/lockman\/configuration","type":"topic","kind":"article","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article"}}}