{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanboundaryid"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper enables different types of boundary identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}]},{"anchor":"Type-Erasure-Benefits","text":"Type Erasure Benefits","type":"heading","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"type":"codeVoice","code":"Dictionary<AnyLockmanBoundaryId, Value>"},{"type":"text","text":" with mixed key types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Thread-Safety","text":"Thread Safety","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Marked as "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" because "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}]},{"anchor":"Usage-Example","text":"Usage Example","type":"heading","level":2},{"code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"anchor":"Operators","title":"Operators","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"anchor":"Initializers","title":"Initializers","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations","generated":true}],"metadata":{"navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"title":"AnyLockmanBoundaryId","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"externalID":"s:7Lockman03AnyA10BoundaryIdV","symbolKind":"struct","role":"symbol","roleHeading":"Structure","modules":[{"name":"Lockman"}]},"kind":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","title":"init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:7Lockman0A10BoundaryIda","kind":"typeIdentifier","text":"LockmanBoundaryId"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","abstract":[{"type":"text","text":"Creates a new "},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"code":"LockmanBoundaryId","type":"codeVoice"},{"type":"text","text":"."}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","url":"\/documentation\/lockman\/anylockmanboundaryid","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"title":"AnyLockmanBoundaryId","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://Lockman/SH":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SH","title":"Swift.Hashable"},"doc://Lockman/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different boundary ID types with identical values from colliding.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","title":"hash(into:)","type":"topic","role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","title":"Equatable Implementations","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations","kind":"article","role":"collectionGroup","abstract":[]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"title":"==(_:_:)","abstract":[{"text":"Compares two ","type":"text"},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" values.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://Lockman/SQ":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"}}}