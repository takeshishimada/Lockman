{"metadata":{"externalID":"s:7Lockman03AnyA8StrategyV","roleHeading":"Structure","role":"symbol","title":"AnyLockmanStrategy","modules":[{"name":"Lockman"}],"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}]},"kind":"symbol","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy"]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"],"anchor":"Initializers","generated":true},{"title":"Instance Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"],"anchor":"Instance-Properties","generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)"],"anchor":"Instance-Methods","generated":true},{"title":"Type Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"],"anchor":"Type-Methods","generated":true}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships","type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"},"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP","text":"LockmanInfo","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo"}],"platforms":["macOS"]}]},{"content":[{"anchor":"Purpose","type":"heading","text":"Purpose","level":2},{"type":"paragraph","inlineContent":[{"code":"AnyLockmanStrategy","type":"codeVoice"},{"text":" solves the fundamental problem of storing different concrete","type":"text"},{"text":" ","type":"text"},{"text":"strategy implementations in the same collection. Without type erasure, you cannot","type":"text"},{"text":" ","type":"text"},{"text":"store ","type":"text"},{"code":"LockmanSingleExecutionStrategy","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"LockmanPriorityBasedStrategy","type":"codeVoice"},{"text":" in the","type":"text"},{"text":" ","type":"text"},{"text":"same array, even though they both conform to ","type":"text"},{"code":"LockmanStrategy","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Key-Benefits","type":"heading","text":"Key Benefits","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Heterogeneous Collections","type":"text"}],"type":"strong"},{"text":": Store different strategy implementations together","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}]},{"type":"text","text":": Choose strategies dynamically based on conditions"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"API Boundaries"}]},{"type":"text","text":": Hide concrete strategy types from public interfaces"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Dependency Injection","type":"text"}],"type":"strong"},{"text":": Enable flexible strategy registration and resolution","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Universal Compatibility","type":"text"}]},{"text":": Support both class and struct strategy implementations","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Type-Safety-Guarantees","type":"heading","text":"Type Safety Guarantees","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the concrete strategy type is erased, type safety for lock information "},{"type":"codeVoice","code":"I"},{"type":"text","text":" "},{"type":"text","text":"is preserved at the "},{"type":"codeVoice","code":"AnyLockmanStrategy"},{"type":"text","text":" level. This means you cannot accidentally"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"codeVoice","code":"LockmanSingleExecutionInfo"},{"type":"text","text":" with a priority-based strategy wrapper."}]},{"anchor":"Performance-Considerations","type":"heading","text":"Performance Considerations","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type erasure introduces a small runtime overhead due to function pointer indirection."},{"type":"text","text":" "},{"type":"text","text":"However, this cost is typically negligible compared to the actual locking operations"},{"type":"text","text":" "},{"type":"text","text":"and is justified by the flexibility gained."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/LockmanInfo":{"role":"symbol","abstract":[{"text":"Represents information required by Lockman locking strategies.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/lockmaninfo","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","title":"LockmanInfo","navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"title":"makeStrategyId()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Lockman0A10StrategyIdV","kind":"typeIdentifier","text":"LockmanStrategyId"}],"abstract":[{"type":"text","text":"Creates a strategy identifier for the type-erased strategy."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"url":"\/documentation\/lockman\/lockmanstrategy","type":"topic","role":"symbol","title":"LockmanStrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(id:info:)":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Attempts to acquire a lock for the given boundary and information."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","title":"lock(id:info:)","kind":"symbol"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"title":"strategyId","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strategyId","kind":"identifier"},{"text":": ","kind":"text"},{"text":"LockmanStrategyId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"abstract":[{"type":"text","text":"The identifier for this type-erased strategy."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId","role":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"title":"canLock(id:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO"}],"abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","role":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"type":"topic","role":"symbol","title":"init(_:)","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation."}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy","type":"topic","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"title":"AnyLockmanStrategy","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","role":"symbol","title":"unlock(id:info:)","abstract":[{"text":"Releases a previously acquired lock.","type":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":" : [any "},{"kind":"typeIdentifier","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"},{"kind":"text","text":"]]"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","abstract":[{"type":"text","text":"Returns current locks information for debugging."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","title":"getCurrentLocks()"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","title":"cleanUp()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(id:)":{"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(id:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","role":"symbol","title":"cleanUp(id:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}]},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP"}}}