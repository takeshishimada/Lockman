{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/prioritybasedstrategy"]}],"metadata":{"title":"PriorityBasedStrategy","roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","title":"Strategies","generated":true}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority processing can interrupt low-priority processing to execute, allowing important processing to be handled preferentially."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where high-urgency processing or control based on importance is required."}]},{"text":"Priority System","anchor":"Priority-System","level":2,"type":"heading"},{"text":"Priority Levels","anchor":"Priority-Levels","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"high"}]},{"text":" - High Priority","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt all other priority processing","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"System-level emergency processing or important user operations"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"low"}],"type":"strong"},{"text":" - Low Priority","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can interrupt none priority processing","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Interrupted by high priority","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Regular background processing","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"none","type":"text"}]},{"type":"text","text":" - No Priority"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Bypasses priority system","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not interrupted by other processing"}]}]},{"content":[{"inlineContent":[{"text":"Basic processing or temporary disabling","type":"text"}],"type":"paragraph"}]}]},{"text":"Concurrent Execution Control","anchor":"Concurrent-Execution-Control","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Within the same priority level, control is based on the concurrent execution behavior setting of existing processing:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"exclusive"}]},{"type":"text","text":" - Exclusive Execution"}]},{"code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Rejects new processing of the same priority","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Protects important processing from interruption"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"replaceable"}]},{"type":"text","text":" - Replaceable Execution"}]},{"code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can be interrupted by new processing of the same priority","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Applied to search or update processing","type":"text"}],"type":"paragraph"}]}]},{"text":"Usage","anchor":"Usage","level":2,"type":"heading"},{"text":"Basic Usage Example","anchor":"Basic-Usage-Example","level":3,"type":"heading"},{"code":["@LockmanPriorityBased","enum Action {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Operation Examples","anchor":"Operation-Examples","level":2,"type":"heading"},{"text":"Interruption by Priority","anchor":"Interruption-by-Priority","level":3,"type":"heading"},{"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"],"type":"codeListing","syntax":null},{"text":"Control at Same Priority","anchor":"Control-at-Same-Priority","level":3,"type":"heading"},{"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"],"type":"codeListing","syntax":null},{"text":"Error Handling","anchor":"Error-Handling","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true,"overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"overridingTitle":"Error Handling"},{"type":"text","text":" page."}]},{"text":"LockmanPriorityBasedError","anchor":"LockmanPriorityBasedError","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"higherPriorityExists","type":"text"}],"type":"strong"},{"text":" - Higher priority is running","type":"text"}]},{"code":["lockFailure: { error, send in","    if case .higherPriorityExists(let requested, let current) = error as? LockmanPriorityBasedError {","        send(.priorityConflict(\"Waiting due to high priority process running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"samePriorityConflict","type":"text"}],"type":"strong"},{"text":" - Conflict at same priority","type":"text"}]},{"code":["lockFailure: { error, send in","    if case .samePriorityConflict(let priority) = error as? LockmanPriorityBasedError {","        send(.busyMessage(\"Process with same priority is running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"precedingActionCancelled"}]},{"type":"text","text":" - Preceding action cancelled"}]},{"code":["catch handler: { error, send in","    if case .precedingActionCancelled(let cancelledInfo) = error as? LockmanPriorityBasedError {","        send(.processCancelled(\"Interrupted by high priority process\"))","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","interfaceLanguage":"swift"},"sections":[],"references":{"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection","kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","type":"topic"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","title":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic"}}}