{"kind":"symbol","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Creates a new "},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"code":"LockmanBoundaryId","type":"codeVoice"},{"type":"text","text":"."}],"metadata":{"externalID":"s:7Lockman03AnyA10BoundaryIdVyACSH_s8Sendablepcfc","symbolKind":"init","title":"init(_:)","roleHeading":"Initializer","role":"symbol","modules":[{"name":"Lockman"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:7Lockman0A10BoundaryIda","kind":"typeIdentifier","text":"LockmanBoundaryId"},{"kind":"text","text":")"}]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": any ","kind":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanBoundaryId","preciseIdentifier":"s:7Lockman0A10BoundaryIda","text":"LockmanBoundaryId","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"value","content":[{"inlineContent":[{"text":"An instance conforming to ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":" to be wrapped","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Design Note","level":2,"type":"heading","anchor":"Design-Note"},{"type":"paragraph","inlineContent":[{"text":"The underlying value is stored as ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":", which preserves the original","type":"text"},{"text":" ","type":"text"},{"text":"typeâ€™s hashing and equality behavior while enabling uniform storage.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanboundaryid\/init(_:)"]}],"references":{"Lockman.png":{"alt":"Lockman logo","identifier":"Lockman.png","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image"},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10BoundaryIda"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","title":"init(_:)"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"url":"\/documentation\/lockman\/anylockmanboundaryid","kind":"symbol","title":"AnyLockmanBoundaryId"},"doc://Lockman/documentation/Lockman/LockmanBoundaryId":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanBoundaryId","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"LockmanBoundaryId","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanBoundaryId","kind":"identifier"}],"abstract":[{"text":"A boundary identifier used by Lockman strategies, combining ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to ensure unique and concurrent-safe keys.","type":"text"}],"title":"LockmanBoundaryId","url":"\/documentation\/lockman\/lockmanboundaryid","type":"topic"}}}