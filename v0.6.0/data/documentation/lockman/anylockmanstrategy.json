{"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"]}],"metadata":{"roleHeading":"Structure","externalID":"s:7Lockman03AnyA8StrategyV","role":"symbol","modules":[{"name":"Lockman"}],"navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"symbolKind":"struct","title":"AnyLockmanStrategy"},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"I","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Purpose","level":2,"anchor":"Purpose"},{"type":"paragraph","inlineContent":[{"code":"AnyLockmanStrategy","type":"codeVoice"},{"text":" solves the fundamental problem of storing different concrete","type":"text"},{"text":" ","type":"text"},{"text":"strategy implementations in the same collection. Without type erasure, you cannot","type":"text"},{"text":" ","type":"text"},{"text":"store ","type":"text"},{"code":"LockmanSingleExecutionStrategy","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"LockmanPriorityBasedStrategy","type":"codeVoice"},{"text":" in the","type":"text"},{"text":" ","type":"text"},{"text":"same array, even though they both conform to ","type":"text"},{"code":"LockmanStrategy","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","text":"Key Benefits","level":2,"anchor":"Key-Benefits"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Heterogeneous Collections","type":"text"}]},{"text":": Store different strategy implementations together","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}],"type":"strong"},{"text":": Choose strategies dynamically based on conditions","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"API Boundaries","type":"text"}],"type":"strong"},{"type":"text","text":": Hide concrete strategy types from public interfaces"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Dependency Injection"}]},{"text":": Enable flexible strategy registration and resolution","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Universal Compatibility"}]},{"type":"text","text":": Support both class and struct strategy implementations"}],"type":"paragraph"}]}]},{"type":"heading","text":"Type Safety Guarantees","level":2,"anchor":"Type-Safety-Guarantees"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the concrete strategy type is erased, type safety for lock information "},{"type":"codeVoice","code":"I"},{"type":"text","text":" "},{"type":"text","text":"is preserved at the "},{"type":"codeVoice","code":"AnyLockmanStrategy"},{"type":"text","text":" level. This means you cannot accidentally"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"codeVoice","code":"LockmanSingleExecutionInfo"},{"type":"text","text":" with a priority-based strategy wrapper."}]},{"type":"heading","text":"Performance Considerations","level":2,"anchor":"Performance-Considerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type erasure introduces a small runtime overhead due to function pointer indirection."},{"type":"text","text":" "},{"type":"text","text":"However, this cost is typically negligible compared to the actual locking operations"},{"type":"text","text":" "},{"type":"text","text":"and is justified by the flexibility gained."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy"]}],"topicSections":[{"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"],"generated":true},{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)"],"generated":true},{"anchor":"Type-Methods","title":"Type Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"],"generated":true}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","type":"topic","role":"symbol","title":"init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation.","type":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","abstract":[{"type":"text","text":"Creates a strategy identifier for the type-erased strategy."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","title":"makeStrategyId()","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV","text":"LockmanStrategyId"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":" : [any ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP"},{"text":"]]","kind":"text"}],"role":"symbol","abstract":[{"text":"Returns current locks information for debugging.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","title":"getCurrentLocks()","kind":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","role":"symbol","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)","abstract":[{"text":"Checks if a lock can be acquired for the given boundary and information.","type":"text"}],"type":"topic","title":"canLock(id:info:)"},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"url":"\/documentation\/lockman\/lockmanstrategy","title":"LockmanStrategy","kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"role":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(id:)":{"abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(id:)","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","title":"cleanUp(id:)","role":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","type":"topic","title":"AnyLockmanStrategy"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"abstract":[{"text":"Removes all lock information across all boundaries.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","title":"cleanUp()","role":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"strategyId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"role":"symbol","abstract":[{"text":"The identifier for this type-erased strategy.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId","title":"strategyId","kind":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman/LockmanInfo":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","url":"\/documentation\/lockman\/lockmaninfo","abstract":[{"type":"text","text":"Represents information required by Lockman locking strategies."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"kind":"symbol","title":"LockmanInfo","type":"topic"},"Lockman.png":{"variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"type":"image","identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(id:info:)":{"title":"lock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","abstract":[{"text":"Attempts to acquire a lock for the given boundary and information.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"title":"unlock(id:info:)","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}]}}}