{"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","topicSections":[{"title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"anchor":"Operators","generated":true},{"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"anchor":"Initializers","generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"anchor":"Instance-Methods","generated":true},{"title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"anchor":"Default-Implementations","generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper enables different types of boundary identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}]},{"type":"heading","level":2,"text":"Type Erasure Benefits","anchor":"Type-Erasure-Benefits"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Allows ","type":"text"},{"code":"Dictionary<AnyLockmanBoundaryId, Value>","type":"codeVoice"},{"text":" with mixed key types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maintains value semantics and equality comparison"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}]}]}]},{"type":"heading","level":2,"text":"Thread Safety","anchor":"Thread-Safety"},{"type":"paragraph","inlineContent":[{"text":"Marked as ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"text":" because ","type":"text"},{"type":"codeVoice","code":"AnyHashable"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}]},{"type":"heading","level":2,"text":"Usage Example","anchor":"Usage-Example"},{"code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/lockman\/anylockmanboundaryid"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"externalID":"s:7Lockman03AnyA10BoundaryIdV","role":"symbol","roleHeading":"Structure","title":"AnyLockmanBoundaryId","symbolKind":"struct","modules":[{"name":"Lockman"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}]},"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","interfaceLanguage":"swift"},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","title":"hash(into:)","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different boundary ID types with identical values from colliding.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","role":"symbol","title":"==(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","type":"topic","abstract":[{"text":"Compares two ","type":"text"},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" values.","type":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10BoundaryIda"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","title":"init(_:)"},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"},"doc://Lockman/SQ":{"identifier":"doc:\/\/Lockman\/SQ","type":"unresolvable","title":"Swift.Equatable"},"Lockman.png":{"identifier":"Lockman.png","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo","type":"image"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"abstract":[],"type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","kind":"article","title":"Equatable Implementations","role":"collectionGroup"},"doc://Lockman/SH":{"identifier":"doc:\/\/Lockman\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"url":"\/documentation\/lockman\/anylockmanboundaryid","kind":"symbol","title":"AnyLockmanBoundaryId"}}}