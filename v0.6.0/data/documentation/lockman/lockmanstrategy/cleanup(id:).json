{"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Removes all lock information for the specified boundary identifier."}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp(id:)","interfaceLanguage":"swift"},"metadata":{"required":true,"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"role":"symbol","externalID":"s:7Lockman0A8StrategyP7cleanUp2idyqd___tSHRd__s8SendableRd__lF","title":"cleanUp(id:)","roleHeading":"Instance Method","modules":[{"name":"Lockman"}]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The identifier whose lock information should be removed"}],"type":"paragraph"}],"name":"id"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This method provides targeted cleanup for specific boundary identifiers,"},{"type":"text","text":" "},{"type":"text","text":"allowing fine-grained control over which lock state to clear while"},{"type":"text","text":" "},{"type":"text","text":"leaving other boundaries unaffected."}],"type":"paragraph"},{"level":2,"anchor":"Use-Cases","text":"Use Cases","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Feature-specific cleanup when a component is deallocated"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"User session cleanup when a user logs out","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scoped cleanup for temporary contexts"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Partial system resets during development"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Implementation-Guidelines","text":"Implementation Guidelines","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Should only affect locks associated with the specified boundary"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Should not fail if no locks exist for the boundary"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Should preserve locks for other boundaries"}]}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmanstrategy\/cleanup(id:)"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy"]]},"references":{"doc://Lockman/documentation/Lockman/LockmanStrategy/cleanUp(id:)":{"required":true,"url":"\/documentation\/lockman\/lockmanstrategy\/cleanup(id:)","kind":"symbol","title":"cleanUp(id:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp(id:)","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"role":"symbol"},"doc://Lockman/documentation/Lockman":{"role":"collection","images":[{"identifier":"Lockman.png","type":"icon"}],"kind":"symbol","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","alt":"Lockman logo","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"url":"\/documentation\/lockman\/lockmanstrategy","title":"LockmanStrategy","kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"role":"symbol","type":"topic"}}}