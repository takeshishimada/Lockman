{"variants":[{"paths":["\/documentation\/lockman\/lockmansingleexecution()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecution"},{"kind":"text","text":"()"}],"title":"LockmanSingleExecution()","modules":[{"name":"Lockman"}],"role":"symbol","externalID":"s:7Lockman0A15SingleExecutionyycfm","roleHeading":"Macro","symbolKind":"macro"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"text":"LockmanSingleExecutionAction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A21SingleExecutionActionP"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"Apply this macro to an enum declaration to automatically generate:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Protocol conformance to ","type":"text"},{"code":"LockmanSingleExecutionAction","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"inlineContent":[{"text":"Default ","type":"text"},{"type":"codeVoice","code":"strategyId"},{"text":" implementation is provided by the protocol","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Important"}],"type":"strong"},{"text":": You must implement the ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property to specify the execution mode:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":".none","type":"codeVoice"},{"type":"text","text":": No exclusive execution (always allows locks)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".boundary","type":"codeVoice"},{"type":"text","text":": Only one action per boundary at a time (default behavior)"}]}]},{"content":[{"inlineContent":[{"code":".action","type":"codeVoice"},{"text":": Only one instance of the same actionId at a time","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Example usage with TCA:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct MyFeature {","  @LockmanSingleExecution","  enum Action {","    case login","    case logout","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .login:","        return .init(actionId: actionName, mode: .boundary)","      case .logout:","        return .init(actionId: actionName, mode: .action)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .login:","        return .withLock(","          operation: { send in","            \/\/ async work","          },","          action: .login,","          cancelID: \"login-operation\"","        )","      \/\/ ...","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for single execution locking behavior."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/LockmanSingleExecutionAction":{"title":"LockmanSingleExecutionAction","kind":"symbol","abstract":[{"type":"text","text":"A specialized "},{"type":"codeVoice","code":"LockmanAction"},{"type":"text","text":" for single-execution locking semantics."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"url":"\/documentation\/lockman\/lockmansingleexecutionaction","navigatorTitle":[{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"role":"symbol"},"Lockman.png":{"variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"type":"image","alt":"Lockman logo","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman/LockmanSingleExecution()":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","url":"\/documentation\/lockman\/lockmansingleexecution()","role":"symbol","title":"LockmanSingleExecution()","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for single execution locking behavior."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecution"},{"kind":"text","text":"()"}],"type":"topic","kind":"symbol"},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"}}}