{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/I","preciseIdentifier":"s:7Lockman0A8StrategyP1IQa","kind":"typeIdentifier","text":"I"},{"kind":"text","text":"> : "},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"This protocol provides a common interface for different locking strategies,"},{"type":"text","text":" "},{"type":"text","text":"allowing them to be used interchangeably while maintaining type safety for"},{"type":"text","text":" "},{"type":"text","text":"lock information. Each strategy implements specific logic for conflict detection,"},{"type":"text","text":" "},{"type":"text","text":"lock management, and cleanup operations."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Strategy Types","anchor":"Strategy-Types"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Single Execution","type":"text"}]},{"text":": Prevents concurrent execution of the same action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Priority-Based"}]},{"text":": Allows higher priority actions to preempt lower priority ones","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Composite"}]},{"text":": Combines multiple strategies for complex coordination","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Implementation Guidelines","anchor":"Implementation-Guidelines"},{"inlineContent":[{"type":"text","text":"Strategies can be implemented as either classes (for stateful strategies) or"},{"type":"text","text":" "},{"type":"text","text":"structs (for stateless strategies). Both can be type-erased using "},{"type":"codeVoice","code":"AnyLockmanStrategy"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Thread Safety","anchor":"Thread-Safety"},{"inlineContent":[{"text":"All strategy implementations must be thread-safe as they may be called","type":"text"},{"text":" ","type":"text"},{"text":"concurrently from multiple contexts. Use appropriate synchronization","type":"text"},{"text":" ","type":"text"},{"text":"mechanisms in your implementation.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Example Implementation","anchor":"Example-Implementation"},{"syntax":"swift","code":["final class MyStrategy: LockmanStrategy {","  typealias I = MyLockInfo","","  func canLock<B: LockmanBoundaryId>(id: B, info: I) -> LockmanResult {","    \/\/ Check if lock can be acquired","    return .success","  }","","  func lock<B: LockmanBoundaryId>(id: B, info: I) {","    \/\/ Acquire the lock","  }","","  func unlock<B: LockmanBoundaryId>(id: B, info: I) {","    \/\/ Release the lock","  }","","  func cleanUp() {","    \/\/ Clean up all state","  }","","  func cleanUp<B: LockmanBoundaryId>(id: B) {","    \/\/ Clean up state for specific boundary","  }","}"],"type":"codeListing"}]}],"kind":"symbol","topicSections":[{"anchor":"Associated-Types","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/I"],"title":"Associated Types","generated":true},{"anchor":"Instance-Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/strategyId"],"title":"Instance Properties","generated":true},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/unlock(id:info:)"],"title":"Instance Methods","generated":true},{"anchor":"Type-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/makeStrategyId()"],"title":"Type Methods","generated":true}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmanstrategy"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Lockman\/s8SendableP"],"title":"Inherits From","type":"inheritsFrom"},{"kind":"relationships","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy2","doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy3","doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy4","doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy5","doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/LockmanGroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/LockmanPriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionStrategy"],"title":"Conforming Types","type":"conformingTypes"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy"},"metadata":{"symbolKind":"protocol","modules":[{"name":"Lockman"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"externalID":"s:7Lockman0A8StrategyP","roleHeading":"Protocol","title":"LockmanStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}]},"abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"references":{"doc://Lockman/documentation/Lockman/LockmanStrategy/unlock(id:info:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/unlock(id:info:)","title":"unlock(id:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"I","preciseIdentifier":"s:7Lockman0A8StrategyP1IQa"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/lockman\/lockmanstrategy\/unlock(id:info:)","required":true,"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Releases a previously acquired lock."}]},"doc://Lockman/documentation/Lockman/LockmanCompositeStrategy4":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy4","role":"symbol","abstract":[{"text":"A composite strategy that coordinates locking between 4 different strategies.","type":"text"}],"navigatorTitle":[{"text":"LockmanCompositeStrategy4","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanCompositeStrategy4","kind":"identifier"}],"title":"LockmanCompositeStrategy4","kind":"symbol","type":"topic","url":"\/documentation\/lockman\/lockmancompositestrategy4"},"doc://Lockman/documentation/Lockman/LockmanStrategy/I":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/I","abstract":[{"text":"The type of lock information this strategy handles.","type":"text"}],"kind":"symbol","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"I","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A4InfoP","text":"LockmanInfo","kind":"typeIdentifier"}],"type":"topic","title":"I","role":"symbol","url":"\/documentation\/lockman\/lockmanstrategy\/i"},"doc://Lockman/documentation/Lockman/LockmanStrategy/cleanUp(id:)":{"required":true,"url":"\/documentation\/lockman\/lockmanstrategy\/cleanup(id:)","kind":"symbol","title":"cleanUp(id:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp(id:)","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanStrategy/cleanUp()":{"title":"cleanUp()","url":"\/documentation\/lockman\/lockmanstrategy\/cleanup()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp()","required":true,"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}]},"doc://Lockman/documentation/Lockman/LockmanStrategy/makeStrategyId()":{"title":"makeStrategyId()","url":"\/documentation\/lockman\/lockmanstrategy\/makestrategyid()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/makeStrategyId()","required":true,"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Lockman0A10StrategyIdV","kind":"typeIdentifier","text":"LockmanStrategyId"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Creates a strategy identifier for this strategy type.","type":"text"}]},"doc://Lockman/documentation/Lockman/LockmanStrategy/strategyId":{"title":"strategyId","type":"topic","role":"symbol","url":"\/documentation\/lockman\/lockmanstrategy\/strategyid","abstract":[{"text":"The unique identifier for this strategy instance.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/strategyId","required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"strategyId"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Lockman0A10StrategyIdV","kind":"typeIdentifier","text":"LockmanStrategyId"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanStrategy/getCurrentLocks()":{"kind":"symbol","abstract":[{"text":"Returns current locks information for debugging purposes.","type":"text"}],"title":"getCurrentLocks()","type":"topic","url":"\/documentation\/lockman\/lockmanstrategy\/getcurrentlocks()","required":true,"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/getCurrentLocks()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier","text":"AnyLockmanBoundaryId"},{"kind":"text","text":" : [any "},{"preciseIdentifier":"s:7Lockman0A4InfoP","kind":"typeIdentifier","text":"LockmanInfo"},{"kind":"text","text":"]]"}]},"doc://Lockman/documentation/Lockman/LockmanConcurrencyLimitedStrategy":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Strategy that limits the number of concurrent executions per concurrency group."}],"title":"LockmanConcurrencyLimitedStrategy","navigatorTitle":[{"text":"LockmanConcurrencyLimitedStrategy","kind":"identifier"}],"url":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanConcurrencyLimitedStrategy","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimitedStrategy"},"Lockman.png":{"alt":"Lockman logo","type":"image","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman/LockmanCompositeStrategy3":{"type":"topic","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy3","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanCompositeStrategy3"}],"abstract":[{"type":"text","text":"A composite strategy that coordinates locking between 3 different strategies."}],"title":"LockmanCompositeStrategy3","navigatorTitle":[{"kind":"identifier","text":"LockmanCompositeStrategy3"}],"url":"\/documentation\/lockman\/lockmancompositestrategy3"},"doc://Lockman/documentation/Lockman/LockmanStrategy/lock(id:info:)":{"title":"lock(id:info:)","kind":"symbol","required":true,"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Lockman0A8StrategyP1IQa","kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/lock(id:info:)","url":"\/documentation\/lockman\/lockmanstrategy\/lock(id:info:)","abstract":[{"text":"Attempts to acquire a lock for the given boundary and information.","type":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","type":"topic","title":"AnyLockmanStrategy"},"doc://Lockman/documentation/Lockman/LockmanStrategy/canLock(id:info:)":{"required":true,"type":"topic","url":"\/documentation\/lockman\/lockmanstrategy\/canlock(id:info:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Lockman0A8StrategyP1IQa","kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Lockman0A6ResultO","kind":"typeIdentifier","text":"LockmanResult"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/canLock(id:info:)","role":"symbol","title":"canLock(id:info:)","abstract":[{"text":"Checks if a lock can be acquired without actually acquiring it.","type":"text"}]},"doc://Lockman/documentation/Lockman/LockmanGroupCoordinationStrategy":{"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanGroupCoordinationStrategy","type":"topic","abstract":[{"text":"A strategy that coordinates actions within groups based on their roles.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanGroupCoordinationStrategy"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanGroupCoordinationStrategy"}],"url":"\/documentation\/lockman\/lockmangroupcoordinationstrategy","title":"LockmanGroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/LockmanCompositeStrategy2":{"role":"symbol","abstract":[{"type":"text","text":"A composite strategy that coordinates locking between 2 different strategies."}],"url":"\/documentation\/lockman\/lockmancompositestrategy2","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy2","navigatorTitle":[{"kind":"identifier","text":"LockmanCompositeStrategy2"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanCompositeStrategy2"}],"kind":"symbol","title":"LockmanCompositeStrategy2"},"doc://Lockman/documentation/Lockman/LockmanPriorityBasedStrategy":{"title":"LockmanPriorityBasedStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanPriorityBasedStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanPriorityBasedStrategy","kind":"symbol","url":"\/documentation\/lockman\/lockmanprioritybasedstrategy","abstract":[{"text":"A locking strategy that enforces priority-based execution semantics.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"LockmanPriorityBasedStrategy","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy":{"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy","abstract":[{"text":"A strategy that evaluates custom conditions at runtime to determine lock availability.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"title":"LockmanDynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/LockmanCompositeStrategy5":{"abstract":[{"text":"A composite strategy that coordinates locking between 5 different strategies.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanCompositeStrategy5","kind":"identifier"}],"title":"LockmanCompositeStrategy5","url":"\/documentation\/lockman\/lockmancompositestrategy5","kind":"symbol","navigatorTitle":[{"text":"LockmanCompositeStrategy5","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanCompositeStrategy5","role":"symbol"},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"url":"\/documentation\/lockman\/lockmanstrategy","title":"LockmanStrategy","kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"role":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanSingleExecutionStrategy":{"url":"\/documentation\/lockman\/lockmansingleexecutionstrategy","kind":"symbol","abstract":[{"type":"text","text":"A locking strategy that provides flexible execution control within a boundary."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionStrategy","title":"LockmanSingleExecutionStrategy","navigatorTitle":[{"kind":"identifier","text":"LockmanSingleExecutionStrategy"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecutionStrategy"}]}}}