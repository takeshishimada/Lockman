{"kind":"symbol","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method provides a global reset mechanism by clearing all internal lock state","type":"text"},{"text":" ","type":"text"},{"text":"from the underlying strategy. Itâ€™s typically used during:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Application shutdown sequences","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Test suite cleanup between test cases","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Emergency reset scenarios during development"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory pressure response"}]}]}]},{"text":"Scope of Operation","type":"heading","level":2,"anchor":"Scope-of-Operation"},{"type":"paragraph","inlineContent":[{"text":"This method affects ","type":"text"},{"inlineContent":[{"type":"text","text":"all boundaries"}],"type":"strong"},{"text":" managed by the underlying strategy,","type":"text"},{"text":" ","type":"text"},{"text":"not just those accessed through this particular wrapper instance.","type":"text"}]},{"text":"Thread Safety","type":"heading","level":2,"anchor":"Thread-Safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The operation is atomic with respect to other strategy operations, but"},{"type":"text","text":" "},{"type":"text","text":"callers should be aware that concurrent operations may be affected."}]},{"text":"Side Effects","type":"heading","level":2,"anchor":"Side-Effects"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"All active locks are immediately released"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lock state tracking is reset to initial conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pending operations may receive unexpected unlock notifications","type":"text"}]}]}]}]}],"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy\/cleanup()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"cleanUp()","symbolKind":"method","modules":[{"name":"Lockman"}],"externalID":"s:7Lockman03AnyA8StrategyV7cleanUpyyF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","roleHeading":"Instance Method"},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"abstract":[{"text":"Removes all lock information across all boundaries.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","title":"cleanUp()","role":"symbol","type":"topic"},"Lockman.png":{"type":"image","identifier":"Lockman.png","alt":"Lockman logo","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","type":"topic","title":"AnyLockmanStrategy"},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"}}}