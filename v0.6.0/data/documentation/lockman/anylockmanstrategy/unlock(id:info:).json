{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}]}],"kind":"declarations"},{"parameters":[{"name":"id","content":[{"inlineContent":[{"text":"The boundary identifier for which the lock should be released","type":"text"}],"type":"paragraph"}]},{"name":"info","content":[{"inlineContent":[{"text":"The same lock information of type ","type":"text"},{"code":"I","type":"codeVoice"},{"text":" that was used when acquiring the lock","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method must be called with the exact same parameters that were used"},{"type":"text","text":" "},{"type":"text","text":"when acquiring the lock. The implementation delegates to the concrete strategy’s"},{"type":"text","text":" "},{"type":"text","text":"unlock logic, which typically uses the lock info’s "},{"code":"uniqueId","type":"codeVoice"},{"type":"text","text":" for precise identification."}]},{"type":"heading","text":"Parameter Matching Requirements","anchor":"Parameter-Matching-Requirements","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Boundary ID"}]},{"type":"text","text":": Must match the ID used during lock acquisition"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Lock Info","type":"text"}],"type":"strong"},{"text":": Must be the same instance (same ","type":"text"},{"type":"codeVoice","code":"uniqueId"},{"text":") used during acquisition","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Strategy Consistency","type":"text"}],"type":"strong"},{"type":"text","text":": Must be called on the same strategy instance that acquired the lock"}]}]}]},{"type":"heading","text":"Error Recovery","anchor":"Error-Recovery","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If called with mismatched parameters, the concrete strategy may:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Silently ignore the unlock request (defensive programming)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Log a warning for debugging purposes","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throw an error in debug builds"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The behavior depends on the concrete strategy’s implementation.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"title":"unlock(id:info:)","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"symbolKind":"method","role":"symbol","externalID":"s:7Lockman03AnyA8StrategyV6unlock2id4infoyqd___xtSHRd__s8SendableRd__lF","modules":[{"name":"Lockman"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)"]}],"sections":[],"abstract":[{"text":"Releases a previously acquired lock.","type":"text"}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"title":"unlock(id:info:)","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://Lockman/documentation/Lockman":{"images":[{"type":"icon","identifier":"Lockman.png"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","type":"topic","title":"AnyLockmanStrategy"},"Lockman.png":{"identifier":"Lockman.png","alt":"Lockman logo","type":"image","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}]}}}