{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanResult","text":"LockmanResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A unique boundary identifier conforming to "},{"code":"LockmanBoundaryId","type":"codeVoice"}],"type":"paragraph"}],"name":"id"},{"content":[{"inlineContent":[{"text":"Lock information of type ","type":"text"},{"code":"I","type":"codeVoice"}],"type":"paragraph"}],"name":"info"}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"LockmanResult","type":"codeVoice"},{"text":" indicating whether the lock can be acquired","type":"text"}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"This method delegates to the concrete strategyâ€™s implementation through the","type":"text"},{"text":" ","type":"text"},{"text":"captured closure, maintaining identical behavior while hiding the concrete type.","type":"text"}]},{"anchor":"Delegation-Pattern","text":"Delegation Pattern","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type-erased wrapper acts as a transparent proxy, forwarding all calls to the"},{"type":"text","text":" "},{"type":"text","text":"underlying concrete strategy without modification. This ensures that the behavior"},{"type":"text","text":" "},{"type":"text","text":"is identical to calling the concrete strategy directly."}]},{"anchor":"Error-Handling","text":"Error Handling","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any errors thrown by the concrete strategy are propagated unchanged through this wrapper."},{"type":"text","text":" "},{"type":"text","text":"The wrapper does not add its own error handling or modification."}]}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult"}],"role":"symbol","modules":[{"name":"Lockman"}],"roleHeading":"Instance Method","title":"canLock(id:info:)","externalID":"s:7Lockman03AnyA8StrategyV7canLock2id4infoAA0A6ResultOqd___xtSHRd__s8SendableRd__lF","symbolKind":"method"},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy","title":"AnyLockmanStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanResult":{"abstract":[{"text":"The result of attempting to acquire a lock.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanResult","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanResult"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanResult"}],"url":"\/documentation\/lockman\/lockmanresult","type":"topic","title":"LockmanResult","role":"symbol"},"Lockman.png":{"alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"type":"topic","abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"canLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult","kind":"typeIdentifier"}],"title":"canLock(id:info:)","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)"},"doc://Lockman/documentation/Lockman":{"kind":"symbol","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"images":[{"type":"icon","identifier":"Lockman.png"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","url":"\/documentation\/lockman","type":"topic","title":"Lockman","role":"collection"}}}