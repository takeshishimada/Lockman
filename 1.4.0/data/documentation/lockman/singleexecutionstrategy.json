{"kind":"article","variants":[{"paths":["\/documentation\/lockman\/singleexecutionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}]},{"level":2,"type":"heading","anchor":"Execution-Modes","text":"Execution Modes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy supports three execution modes:"}]},{"level":3,"type":"heading","anchor":"none-No-Control","text":"none - No Control"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes all processing without exclusive control"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied for behavior verification during debugging or testing","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","anchor":"boundary-Boundary-level-Exclusive-Control","text":"boundary - Boundary-level Exclusive Control"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Only one process can execute within the same boundary"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}]}]},{"content":[{"inlineContent":[{"text":"Applied when wanting to control entire UI operations","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"action-Action-level-Exclusive-Control","level":3,"text":"action - Action-level Exclusive Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Applied when wanting to control only specific processing","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Usage","level":2,"text":"Usage"},{"type":"heading","anchor":"Basic-Usage-Example","level":3,"text":"Basic Usage Example"},{"syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"type":"codeListing"},{"anchor":"Usage-with-Reducerlock","type":"heading","level":3,"text":"Usage with Reducer.lock()"},{"syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            }","            .catch { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionCancellationError,","               case .actionAlreadyRunning(let info) = singleError.reason {","                await send(.showBusyMessage(\"\\(info.actionId) is currently running\"))","            }","        }","    )","}"],"type":"codeListing"},{"anchor":"Advanced-Usage-with-Effectlock","type":"heading","level":3,"text":"Advanced Usage with Effect.lock"},{"type":"paragraph","inlineContent":[{"text":"For cases requiring fine-grained control:","type":"text"}]},{"syntax":"swift","code":["case .saveButtonTapped:","    return .run { send in","        try await saveUserData()","        await send(.saveCompleted)","    } catch: { error, send in","        await send(.saveError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        }","    )"],"type":"codeListing"},{"anchor":"Operation-Examples","type":"heading","level":2,"text":"Operation Examples"},{"anchor":"action-mode","type":"heading","level":3,"text":"action mode"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"type":"codeListing"},{"anchor":"boundary-mode","type":"heading","level":3,"text":"boundary mode"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"type":"codeListing"},{"anchor":"Error-Handling","type":"heading","level":2,"text":"Error Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},{"type":"text","text":" page."}]},{"anchor":"LockmanSingleExecutionCancellationError","type":"heading","level":3,"text":"LockmanSingleExecutionCancellationError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This error conforms to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol and provides:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"cancelledInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": Where the cancellation occurred"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"reason","type":"codeVoice"},{"type":"text","text":": Specific reason for cancellation"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}]},{"type":"text","text":" - Boundary is already locked"}]},{"items":[{"content":[{"inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Existing lock information","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"actionAlreadyRunning","type":"text"}],"type":"strong"},{"type":"text","text":" - Same action is already running"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Running action information"}]}]}]}]}]},{"syntax":"swift","code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionCancellationError {","        switch singleError.reason {","        case .boundaryAlreadyLocked(let existingInfo):","            send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","        case .actionAlreadyRunning(let existingInfo):","            send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","        }","    } else {","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"],"type":"codeListing"}],"kind":"content"}],"seeAlsoSections":[{"title":"Strategies","generated":true,"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"metadata":{"title":"SingleExecutionStrategy","modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"url":"\/documentation\/lockman\/compositestrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"topic","kind":"article","title":"CompositeStrategy","role":"article"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"title":"GroupCoordinationStrategy","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","title":"PriorityBasedStrategy","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","title":"ConcurrencyLimitedStrategy","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"}}}