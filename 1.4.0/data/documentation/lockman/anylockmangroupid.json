{"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":", allowing heterogeneous group IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"},"kind":"symbol","topicSections":[{"anchor":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"generated":true,"title":"Operators"},{"anchor":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"],"generated":true,"title":"Initializers"},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"],"generated":true,"title":"Instance Methods"},{"anchor":"Default-Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"],"generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"variants":[{"paths":["\/documentation\/lockman\/anylockmangroupid"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper enables different types of group identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}]},{"type":"heading","level":2,"text":"Type Erasure Benefits","anchor":"Type-Erasure-Benefits"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"type":"codeVoice","code":"Set<AnyLockmanGroupId>"},{"type":"text","text":" with mixed group ID types"}]}]},{"content":[{"inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":2,"text":"Thread Safety","anchor":"Thread-Safety"},{"type":"paragraph","inlineContent":[{"text":"Marked as ","type":"text"},{"code":"@unchecked Sendable","type":"codeVoice"},{"text":" because ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}]},{"type":"heading","level":2,"text":"Usage Example","anchor":"Usage-Example"},{"type":"codeListing","syntax":"swift","code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"]}],"kind":"content"}],"metadata":{"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"title":"AnyLockmanGroupId","externalID":"s:7Lockman03AnyA7GroupIdV","modules":[{"name":"Lockman"}],"roleHeading":"Structure"},"references":{"doc://Lockman/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8CopyableP","title":"Swift.Copyable"},"doc://Lockman/SQ":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","role":"collectionGroup","title":"Equatable Implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"},"doc://Lockman/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","title":"hash(into:)","role":"symbol","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Generates a hash value for this group ID."}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","role":"collectionGroup","title":"CustomDebugStringConvertible Implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations"},"doc://Lockman/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"title":"AnyLockmanGroupId","type":"topic","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","role":"symbol","url":"\/documentation\/lockman\/anylockmangroupid","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","title":"==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"AnyLockmanGroupId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV"},{"text":", ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" instances for equality."}]},"doc://Lockman/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":"."}],"title":"init(_:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A7GroupIda","text":"LockmanGroupId","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"}}}