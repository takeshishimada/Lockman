{"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority processing can interrupt low-priority processing to execute, allowing important processing to be handled preferentially."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where high-urgency processing or control based on importance is required."}]},{"anchor":"Priority-System","type":"heading","text":"Priority System","level":2},{"anchor":"Priority-Levels","type":"heading","text":"Priority Levels","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"high","type":"text"}],"type":"strong"},{"text":" - High Priority","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt all other priority processing","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"System-level emergency processing or important user operations","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"low","type":"text"}]},{"text":" - Low Priority","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can interrupt none priority processing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Interrupted by high priority","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Regular background processing","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"type":"text","text":" - No Priority"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Bypasses priority system"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Not interrupted by other processing"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Basic processing or temporary disabling","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Exclusive-Execution-Control","type":"heading","text":"Exclusive Execution Control","level":3},{"type":"paragraph","inlineContent":[{"text":"Within the same priority level, control is based on the exclusive execution behavior setting of existing processing:","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"exclusive","type":"text"}],"type":"strong"},{"type":"text","text":" - Exclusive Execution"}]},{"type":"codeListing","syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rejects new processing of the same priority"}]}]},{"content":[{"inlineContent":[{"text":"Protects important processing from interruption","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"replaceable"}],"type":"strong"},{"text":" - Replaceable Execution","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can be interrupted by new processing of the same priority","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied to search or update processing"}],"type":"paragraph"}]}]},{"anchor":"Usage","type":"heading","text":"Usage","level":2},{"anchor":"Basic-Usage-Example","type":"heading","text":"Basic Usage Example","level":3},{"type":"codeListing","syntax":"swift","code":["@LockmanPriorityBased","enum ViewAction {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"]},{"anchor":"Operation-Examples","type":"heading","text":"Operation Examples","level":2},{"anchor":"Interruption-by-Priority","type":"heading","text":"Interruption by Priority","level":3},{"type":"codeListing","syntax":null,"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"]},{"anchor":"Control-at-Same-Priority","type":"heading","text":"Control at Same Priority","level":3},{"type":"codeListing","syntax":null,"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"]},{"anchor":"Error-Handling","type":"heading","text":"Error Handling","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling"},{"type":"text","text":" page."}]},{"anchor":"Error-Types","type":"heading","text":"Error Types","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"PriorityBasedStrategy uses two error types, both conforming to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol:"}]},{"anchor":"LockmanPriorityBasedBlockedError","type":"heading","text":"LockmanPriorityBasedBlockedError","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Occurs when a new action is blocked due to priority conflicts."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"BlockedReason cases:","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"higherPriorityExists"}],"type":"strong"},{"text":" - Higher priority is running","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"samePriorityConflict"}]},{"text":" - Conflict at same priority","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let blockedError = error as? LockmanPriorityBasedBlockedError {","        switch blockedError.reason {","        case .higherPriorityExists(let requested, let current):","            await send(.priorityConflict(\"Waiting due to high priority process running\"))","        case .samePriorityConflict(let priority):","            await send(.busyMessage(\"Process with same priority is running\"))","        }","    }","}"]},{"anchor":"LockmanPriorityBasedCancellationError","type":"heading","text":"LockmanPriorityBasedCancellationError","level":4},{"type":"paragraph","inlineContent":[{"text":"Occurs when an existing action is cancelled by preemption.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["catch handler: { error, send in","    if let cancellationError = error as? LockmanPriorityBasedCancellationError {","        await send(.processCancelled(\"Interrupted by high priority process: \\(cancellationError.cancelledInfo.actionId)\"))","    }","}"]}]}],"metadata":{"role":"article","modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"PriorityBasedStrategy"},"seeAlsoSections":[{"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"title":"Strategies","generated":true}],"sections":[],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/prioritybasedstrategy"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","interfaceLanguage":"swift"},"references":{"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"title":"GroupCoordinationStrategy","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","title":"ConcurrencyLimitedStrategy","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"url":"\/documentation\/lockman\/compositestrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"topic","kind":"article","title":"CompositeStrategy","role":"article"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"}}}