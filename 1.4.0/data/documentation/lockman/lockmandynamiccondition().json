{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","abstract":[{"text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmandynamiccondition()"]}],"metadata":{"title":"LockmanDynamicCondition()","role":"symbol","externalID":"s:7Lockman0A16DynamicConditionyycfm","roleHeading":"Macro","symbolKind":"macro","modules":[{"name":"Lockman"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","kind":"typeIdentifier","text":"LockmanDynamicConditionAction","preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanDynamicConditionAction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"actionName","type":"codeVoice"},{"text":" property that returns the enum case name as a String","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"extractMetadata()"},{"type":"text","text":" method that extracts enum associated values as metadata"}]}]},{"content":[{"inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"text":" property with default condition (always success)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Default ","type":"text"},{"code":"strategyId","type":"codeVoice"},{"text":" implementation is provided by the protocol","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"This macro enables you to define custom locking conditions at runtime based on:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Current state values","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Other locks in the same boundary"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Time-based conditions"}]}]},{"content":[{"inlineContent":[{"text":"Any custom logic","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Example usage with TCA:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          return .run { send in","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","          .lock(action: lockInfo, boundaryId: CancelID.fetch)","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          return .run { send in","            try await processTask(size: size)","            await send(.taskCompleted)","          }","          .lock(action: lockInfo, boundaryId: CancelID.process)","          }","        }","      }","    }","  }","}"],"syntax":"swift"}],"kind":"content"}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"kind":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionaction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","abstract":[{"text":"A protocol for actions that support dynamic condition-based locking.","type":"text"}],"type":"topic","title":"LockmanDynamicConditionAction"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"title":"LockmanDynamicCondition()","url":"\/documentation\/lockman\/lockmandynamiccondition()","abstract":[{"text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}]}}}