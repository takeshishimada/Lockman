{"topicSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"],"title":"Initializers","anchor":"Initializers"},{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"],"title":"Instance Properties","anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(boundaryId:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(boundaryId:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(boundaryId:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(boundaryId:info:)"],"title":"Instance Methods","anchor":"Instance-Methods"},{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"],"title":"Type Methods","anchor":"Type-Methods"}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"title":"Conforms To"}],"metadata":{"role":"symbol","symbolKind":"struct","roleHeading":"Structure","modules":[{"name":"Lockman"}],"title":"AnyLockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"externalID":"s:7Lockman03AnyA8StrategyV"},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"I","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"}]}]},{"kind":"content","content":[{"text":"Purpose","level":2,"anchor":"Purpose","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AnyLockmanStrategy"},{"type":"text","text":" solves the fundamental problem of storing different concrete"},{"type":"text","text":" "},{"type":"text","text":"strategy implementations in the same collection. Without type erasure, you cannot"},{"type":"text","text":" "},{"type":"text","text":"store "},{"type":"codeVoice","code":"LockmanSingleExecutionStrategy"},{"type":"text","text":" and "},{"type":"codeVoice","code":"LockmanPriorityBasedStrategy"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"same array, even though they both conform to "},{"type":"codeVoice","code":"LockmanStrategy"},{"type":"text","text":"."}]},{"text":"Key Benefits","level":2,"anchor":"Key-Benefits","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Heterogeneous Collections","type":"text"}]},{"type":"text","text":": Store different strategy implementations together"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}],"type":"strong"},{"type":"text","text":": Choose strategies dynamically based on conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"API Boundaries","type":"text"}],"type":"strong"},{"type":"text","text":": Hide concrete strategy types from public interfaces"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Dependency Injection","type":"text"}]},{"type":"text","text":": Enable flexible strategy registration and resolution"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Universal Compatibility"}]},{"text":": Support both class and struct strategy implementations","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Type Safety Guarantees","level":2,"anchor":"Type-Safety-Guarantees","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"While the concrete strategy type is erased, type safety for lock information ","type":"text"},{"code":"I","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is preserved at the ","type":"text"},{"code":"AnyLockmanStrategy","type":"codeVoice"},{"text":" level. This means you cannot accidentally","type":"text"},{"text":" ","type":"text"},{"text":"use ","type":"text"},{"code":"LockmanSingleExecutionInfo","type":"codeVoice"},{"text":" with a priority-based strategy wrapper.","type":"text"}]},{"text":"Performance Considerations","level":2,"anchor":"Performance-Considerations","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type erasure introduces a small runtime overhead due to function pointer indirection."},{"type":"text","text":" "},{"type":"text","text":"However, this cost is typically negligible compared to the actual locking operations"},{"type":"text","text":" "},{"type":"text","text":"and is justified by the flexibility gained."}]}]}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"references":{"doc://Lockman/documentation/Lockman/LockmanStrategy":{"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"title":"LockmanStrategy","url":"\/documentation\/lockman\/lockmanstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanStrategy","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(boundaryId:info:)":{"kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(boundaryid:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(boundaryId:info:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"canLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"boundaryId","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult"}],"abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"role":"symbol","type":"topic","title":"canLock(boundaryId:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(boundaryId:info:)":{"abstract":[{"type":"text","text":"Attempts to acquire a lock for the given boundary and information."}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"boundaryId","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"title":"lock(boundaryId:info:)","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(boundaryId:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/lock(boundaryid:info:)"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","kind":"symbol","role":"symbol","type":"topic","title":"cleanUp()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}]},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"title":"init(_:)","abstract":[{"type":"text","text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","type":"topic","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The identifier for this type-erased strategy."}],"title":"strategyId","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strategyId","kind":"identifier"},{"text":": ","kind":"text"},{"text":"LockmanStrategyId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId","url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid"},"doc://Lockman/documentation/Lockman/LockmanInfo":{"kind":"symbol","role":"symbol","title":"LockmanInfo","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","url":"\/documentation\/lockman\/lockmaninfo","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"abstract":[{"text":"Represents information required by Lockman locking strategies.","type":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(boundaryId:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(boundaryId:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"boundaryId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"type":"text","text":"Removes all lock information for the specified boundary identifier."}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(boundaryid:)","title":"cleanUp(boundaryId:)","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":" : [any "},{"kind":"typeIdentifier","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"},{"kind":"text","text":"]]"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","title":"getCurrentLocks()","abstract":[{"text":"Returns current lock information for debugging.","type":"text"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"title":"AnyLockmanStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(boundaryId:info:)":{"abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(boundaryid:info:)","type":"topic","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(boundaryId:info:)","title":"unlock(boundaryId:info:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"boundaryId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","title":"makeStrategyId()","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","kind":"symbol","abstract":[{"type":"text","text":"Creates a generic strategy identifier for type-erased strategies."}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeStrategyId","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV","kind":"typeIdentifier"}]}}}