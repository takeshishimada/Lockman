{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"CompositeStrategy is a strategy that combines multiple strategies to achieve more complex and advanced exclusive control. For complex requirements that cannot be addressed by a single strategy, you can build flexible and powerful control logic by combining 2 to 5 strategies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in advanced use cases that require satisfying multiple control conditions simultaneously."}]},{"type":"heading","anchor":"Combination-System","text":"Combination System","level":2},{"type":"heading","anchor":"Number-of-Strategy-Combinations","text":"Number of Strategy Combinations","level":3},{"type":"paragraph","inlineContent":[{"text":"Lockman supports combinations of 2 to 5 strategies:","type":"text"}]},{"type":"heading","anchor":"Combination-Control-Logic","text":"Combination Control Logic","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Success required in all strategies","type":"text"}]},{"type":"text","text":":"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Success only when lock acquisition is possible in all component strategies","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If even one fails, the entire operation fails"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Coordination of preceding cancellation"}]},{"text":":","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"When any strategy requires preceding cancellation, execute preceding cancellation for all","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the first cancellation error found","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"LIFO (Last In, First Out) release"}],"type":"strong"},{"type":"text","text":":"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lock release is executed in reverse order of acquisition"}]}]},{"content":[{"inlineContent":[{"text":"Release from the last acquired lock in order","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Usage","level":2,"anchor":"Usage"},{"type":"heading","text":"Basic Usage Example","level":3,"anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self",")","enum ViewAction {","    case criticalSave","    case normalSave","    ","    var lockmanInfo: LockmanCompositeInfo2<LockmanSingleExecutionInfo, LockmanPriorityBasedInfo> {","        LockmanCompositeInfo2(","            actionId: actionName,","            lockmanInfoForStrategy1: LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            ),","            lockmanInfoForStrategy2: LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: switch self {","                    case .criticalSave: .high(.exclusive)","                    case .normalSave: .low(.replaceable)","                }","            )","        )","    }","}"]},{"type":"heading","text":"Combining 3 Strategies","level":3,"anchor":"Combining-3-Strategies"},{"type":"codeListing","syntax":"swift","code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self,","    LockmanConcurrencyLimitedStrategy.self",")","enum Action {","    case downloadFile","    ","    var lockmanInfo: LockmanCompositeInfo3<LockmanSingleExecutionInfo, LockmanPriorityBasedInfo, LockmanConcurrencyLimitedInfo> {","        LockmanCompositeInfo3(","            actionId: actionName,","            lockmanInfoForStrategy1: LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action \/\/ Prevent duplication","            ),","            lockmanInfoForStrategy2: LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable) \/\/ Priority control","            ),","            lockmanInfoForStrategy3: LockmanConcurrencyLimitedInfo(","                actionId: actionName,","                concurrencyId: \"downloads\",","                limit: .limited(3) \/\/ Concurrent execution limit","            )","        )","    }","}"]},{"text":"Operation Examples","type":"heading","anchor":"Operation-Examples","level":2},{"level":3,"anchor":"Operation-with-2-Strategy-Combination","text":"Operation with 2 Strategy Combination","type":"heading"},{"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(varies by action)","","Time: 0s  - normalSave request (.low(.replaceable))","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Result: ✅ Start execution","","Time: 1s  - normalSave request (duplicate)","  Strategy 1: ❌ Fail (same action running)","  Strategy 2: No check (failed at strategy 1)","  Result: ❌ Overall failure","","Time: 2s  - criticalSave request (.high(.exclusive))","  Strategy 1: ✅ Success (different action)","  Strategy 2: ✅ Success (with preceding cancellation)","  Result: ✅ Start execution (cancel normalSave)"],"syntax":null,"type":"codeListing"},{"level":3,"anchor":"Operation-with-3-Strategy-Combination","text":"Operation with 3 Strategy Combination","type":"heading"},{"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(.low(.replaceable))  ","Strategy 3: ConcurrencyLimited(.limited(3))","","Current situation: 3 download processes running","","Time: 0s  - New downloadFile request","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Strategy 3: ❌ Fail (concurrent execution limit reached)","  Result: ❌ Overall failure"],"syntax":null,"type":"codeListing"},{"level":2,"anchor":"Error-Handling","text":"Error Handling","type":"heading"},{"inlineContent":[{"type":"text","text":"For errors that may occur with CompositeStrategy and their solutions, please also refer to the common patterns on the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"overridingTitle":"Error Handling"},{"type":"text","text":" page."}],"type":"paragraph"},{"level":3,"anchor":"Error-Handling-in-Composite-Strategy","text":"Error Handling in Composite Strategy","type":"heading"},{"inlineContent":[{"type":"text","text":"In composite strategies, errors from each component strategy are integrated and reported. Since the error from the first failed strategy is returned, check the error type and handle appropriately:"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    switch error {","    case let singleError as LockmanSingleExecutionCancellationError:","        await send(.singleExecutionConflict(\"Duplicate execution detected\"))","        ","    case let blockedError as LockmanPriorityBasedBlockedError:","        await send(.priorityConflict(\"Priority conflict occurred\"))","        ","    case let cancellationError as LockmanPriorityBasedCancellationError:","        await send(.actionPreempted(\"Action was preempted by higher priority\"))","        ","    case let concurrencyError as LockmanConcurrencyLimitedCancellationError:","        await send(.concurrencyLimitReached(\"Concurrent execution limit reached\"))","        ","    case let groupError as LockmanGroupCoordinationCancellationError:","        await send(.groupCoordinationConflict(\"Group coordination rule violated\"))","        ","    default:","        await send(.unknownLockFailure(\"Failed to acquire lock\"))","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"anchor":"Design-Guidelines","text":"Design Guidelines","type":"heading"},{"level":3,"anchor":"Strategy-Selection-Order","text":"Strategy Selection Order","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Start with basic control"}]},{"text":": Begin with SingleExecution","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Add if priority is needed","type":"text"}]},{"type":"text","text":": Combine PriorityBased"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add if resource control is needed"}]},{"type":"text","text":": Combine ConcurrencyLimited"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Add if coordination control is needed","type":"text"}],"type":"strong"},{"type":"text","text":": Combine GroupCoordination"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Add if custom logic is needed","type":"text"}]},{"type":"text","text":": Combine DynamicCondition"}]}]}],"type":"orderedList"}]}],"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/compositestrategy"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"],"generated":true,"anchor":"Strategies","title":"Strategies"}],"metadata":{"role":"article","roleHeading":"Article","title":"CompositeStrategy","modules":[{"name":"Lockman"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","interfaceLanguage":"swift"},"kind":"article","references":{"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","title":"ConcurrencyLimitedStrategy","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","title":"PriorityBasedStrategy","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"title":"GroupCoordinationStrategy","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"}}}