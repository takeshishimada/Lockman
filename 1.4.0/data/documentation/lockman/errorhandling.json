{"variants":[{"paths":["\/documentation\/lockman\/errorhandling"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"Error Handling","role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}]},{"level":2,"type":"heading","text":"Common Error Handling Patterns","anchor":"Common-Error-Handling-Patterns"},{"level":3,"type":"heading","text":"lockFailure Handler with Reducer.lock()","anchor":"lockFailure-Handler-with-Reducerlock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}]},{"syntax":"swift","type":"codeListing","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Benefits of centralized error handling:"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Consistent error handling across all actions","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Single place to update error messages","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Easier to maintain and test"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Parameters:","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"code":"error","type":"codeVoice"},{"type":"text","text":": The error that occurred (strategy-specific error type)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"send"},{"text":": Function for sending feedback to the user","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"catch handler Pattern","anchor":"catch-handler-Pattern"},{"inlineContent":[{"type":"text","text":"Handling general errors that occur during processing:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"]},{"inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}],"type":"paragraph"},{"type":"heading","text":"Types of Errors and Solutions","level":2,"anchor":"Types-of-Errors-and-Solutions"},{"type":"heading","text":"1. Lock Acquisition Failure (Already Locked)","level":3,"anchor":"1-Lock-Acquisition-Failure-Already-Locked"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": Occurs when the same processing or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    await send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"]},{"type":"heading","text":"2. Permission\/Priority Conflicts","level":3,"anchor":"2-PermissionPriority-Conflicts"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"text":": Occurs due to higher priority processing or group rule constraints","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"type":"codeListing"},{"level":3,"anchor":"3-Cancellation-Notification","text":"3. Cancellation Notification","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"],"type":"codeListing"},{"level":2,"anchor":"Best-Practices","text":"Best Practices","type":"heading"},{"level":3,"anchor":"1-Proper-Error-Type-Casting","text":"1. Proper Error Type Casting","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"type":"codeListing"},{"level":3,"anchor":"2-User-Friendly-Messages","text":"2. User-Friendly Messages","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"],"type":"codeListing"},{"level":3,"anchor":"3-Utilizing-Additional-Information","text":"3. Utilizing Additional Information","type":"heading"},{"inlineContent":[{"text":"Many errors contain additional information:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start processing\"))","        }","    }",")"],"type":"codeListing"},{"level":2,"anchor":"Strategy-Specific-Errors","text":"Strategy-Specific Errors","type":"heading"},{"inlineContent":[{"text":"All strategy errors now conform to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol, providing consistent access to:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"text":": Where the cancellation occurred","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"errorDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Localized error descriptions"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Error-Types-by-Strategy","text":"Error Types by Strategy:","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SingleExecutionStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"PriorityBasedStrategy","type":"text"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedBlockedError","type":"codeVoice"},{"type":"text","text":" - New action blocked by priority"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedCancellationError","type":"codeVoice"},{"type":"text","text":" - Existing action cancelled by preemption"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"GroupCoordinationStrategy"}],"type":"strong"},{"text":": ","type":"text"},{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"},{"text":" - Group rule violations","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy"}]},{"text":": ","type":"text"},{"type":"codeVoice","code":"LockmanConcurrencyLimitedCancellationError"},{"text":" - Concurrent execution limit exceeded","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","isActive":true,"overridingTitle":"DynamicConditionStrategy"},{"type":"text","text":" - Condition mismatch errors"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}],"isActive":true,"overridingTitle":"CompositeStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"reference"},{"text":" - Composite strategy errors","type":"text"}]}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/Lock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","kind":"article","type":"topic","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"role":"article","title":"Lock","url":"\/documentation\/lockman\/lock"},"doc://Lockman/documentation/Lockman/GettingStarted":{"abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","url":"\/documentation\/lockman\/gettingstarted","type":"topic","kind":"article","title":"Getting Started","role":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"url":"\/documentation\/lockman\/compositestrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"topic","kind":"article","title":"CompositeStrategy","role":"article"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","kind":"article","title":"Boundary","abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/boundaryoverview","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","type":"topic"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"role":"article","kind":"article","title":"Choosing a Strategy","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","role":"article","type":"topic","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman/Configuration":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","kind":"article","type":"topic","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"role":"article","title":"Configuration","url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/Unlock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","kind":"article","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","title":"Unlock","url":"\/documentation\/lockman\/unlock"}}}