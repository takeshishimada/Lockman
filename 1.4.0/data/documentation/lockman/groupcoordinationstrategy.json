{"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/lockman\/groupcoordinationstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}]},{"type":"heading","text":"Group System","level":2,"anchor":"Group-System"},{"type":"heading","text":"Coordination Roles","level":3,"anchor":"Coordination-Roles"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"none"}],"type":"strong"},{"text":" - Non-exclusive Participant","type":"text"}]},{"type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate regardless of group state"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Auxiliary processing such as UI updates or logging","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"leader","type":"text"}]},{"type":"text","text":" - Group Leader"}]},{"type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Role to start group activities"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Controls participation conditions according to entry policy","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables member participation"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"text":" - Group Member","type":"text"}]},{"type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can only participate in active groups"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes when leader or other participants are present"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Responsible for coordinated processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Leader Entry Policy","level":3,"anchor":"Leader-Entry-Policy"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"emptyGroup"}]},{"type":"text","text":" - Start only in empty group"}]},{"type":"codeListing","code":[".leader(.emptyGroup)"],"syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"text":"Can only participate when group is completely empty","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Starts new activity cycle"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Most strict control"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutMembers"}]},{"text":" - Start without members","type":"text"}]},{"type":"codeListing","code":[".leader(.withoutMembers)"],"syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no members are present"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Other leaders are allowed","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables coordination between leaders"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutLeader"}]},{"type":"text","text":" - Start without leader"}]},{"type":"codeListing","code":[".leader(.withoutLeader)"],"syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no other leaders are present"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Members are allowed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Usage","level":2,"anchor":"Usage"},{"type":"heading","text":"Basic Usage Example","level":3,"anchor":"Basic-Usage-Example"},{"type":"codeListing","code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Coordination with Multiple Groups","level":3,"anchor":"Coordination-with-Multiple-Groups"},{"type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"syntax":"swift"},{"type":"heading","text":"Operation Examples","level":2,"anchor":"Operation-Examples"},{"type":"heading","text":"Leader-Member Coordination","level":3,"anchor":"Leader-Member-Coordination"},{"type":"codeListing","code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"syntax":null},{"type":"heading","text":"Entry Policy Differences","level":3,"anchor":"Entry-Policy-Differences"},{"type":"codeListing","code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"syntax":null},{"type":"heading","text":"Error Handling","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitle":"Error Handling","type":"reference","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true},{"text":" page.","type":"text"}]},{"type":"heading","text":"LockmanGroupCoordinationCancellationError","level":3,"anchor":"LockmanGroupCoordinationCancellationError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This error conforms to "},{"code":"LockmanCancellationError","type":"codeVoice"},{"type":"text","text":" protocol and provides:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"cancelledInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reason","type":"codeVoice"},{"text":": Specific reason for cancellation","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}]},{"type":"text","text":" - Action already in group"}]},{"type":"codeListing","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}]},{"type":"text","text":" - Leader cannot join non-empty group"}]},{"type":"codeListing","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}],"type":"strong"},{"text":" - Member cannot join empty group","type":"text"}]},{"type":"codeListing","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"blockedByExclusiveLeader"}],"type":"strong"},{"type":"text","text":" - Blocked by exclusive leader"}]},{"type":"codeListing","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader: \\(leaderInfo.actionId)\"))","    }","}"],"syntax":"swift"}]}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"GroupCoordinationStrategy","role":"article"},"seeAlsoSections":[{"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"references":{"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","title":"ConcurrencyLimitedStrategy","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"url":"\/documentation\/lockman\/compositestrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"topic","kind":"article","title":"CompositeStrategy","role":"article"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","title":"PriorityBasedStrategy","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"}}}