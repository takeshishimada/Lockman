{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"identifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanAction","text":"LockmanAction","preciseIdentifier":"s:7Lockman0A6ActionP","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Conforming types can create lock info with custom conditions that are evaluated at runtime."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Example","anchor":"Example"},{"code":["\/\/ Define custom errors for your business logic","enum MyActionError: Error {","    case priorityTooLow(priority: Int)","    case taskTooBig(size: Int)","}","","@LockmanDynamicCondition","enum MyAction {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","}","","\/\/ Usage with custom error","let action = MyAction.fetchData(userId: \"123\", priority: 5)","let info = action.with {","    guard priority > 3 else {","        return .cancel(MyActionError.priorityTooLow(priority: priority))","    }","    return .success","}","","\/\/ Use with Effect.lock() for TCA integration","return .run { send in","    \/\/ Execute","}",".lock(action: action, boundaryId: boundary)"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmandynamicconditionaction"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"title":"LockmanDynamicConditionAction","modules":[{"name":"Lockman"}],"navigatorTitle":[{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"symbolKind":"protocol","role":"symbol","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"externalID":"s:7Lockman0A22DynamicConditionActionP"},"abstract":[{"type":"text","text":"A protocol for actions that support dynamic condition-based locking."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction"},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/actionName"],"generated":true,"anchor":"Instance-Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/with(condition:)-9p83x"],"generated":true,"anchor":"Instance-Methods"}],"sections":[],"kind":"symbol","relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanAction","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships","type":"inheritsFrom"}],"references":{"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction/actionName":{"abstract":[{"type":"text","text":"The name of the action, typically the enum case name."}],"url":"\/documentation\/lockman\/lockmandynamicconditionaction\/actionname","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/actionName","title":"actionName","kind":"symbol","required":true,"type":"topic","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"actionName","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}]},"doc://Lockman/documentation/Lockman/LockmanAction":{"title":"LockmanAction","abstract":[{"text":"An action that participates in Lockmanâ€™s locking mechanism.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"LockmanAction","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanAction","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanAction","url":"\/documentation\/lockman\/lockmanaction"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction/with(condition:)-9p83x":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"with"},{"kind":"text","text":"("},{"kind":"externalParam","text":"condition"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV","text":"LockmanDynamicConditionInfo"}],"required":true,"kind":"symbol","title":"with(condition:)","defaultImplementations":1,"role":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionaction\/with(condition:)-9p83x","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/with(condition:)-9p83x","abstract":[{"text":"Creates lock info with a custom condition.","type":"text"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"kind":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionaction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","abstract":[{"text":"A protocol for actions that support dynamic condition-based locking.","type":"text"}],"type":"topic","title":"LockmanDynamicConditionAction"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"}}}