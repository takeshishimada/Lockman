{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature."}]},{"anchor":"Adding-Lockman-as-a-dependency","text":"Adding Lockman as a dependency","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}]},{"type":"codeListing","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"x.x.x\")","]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And add "},{"code":"Lockman","type":"codeVoice"},{"type":"text","text":" as a dependency of your package’s target:"}]},{"type":"codeListing","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"syntax":"swift"},{"anchor":"Writing-your-first-feature","text":"Writing your first feature","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"overridingTitle":"@LockmanSingleExecution","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}],"type":"reference","isActive":true},{"type":"text","text":" macro."}]},{"anchor":"Step-1-Define-the-Reducer","text":"Step 1: Define the Reducer","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, define the basic Reducer structure:"}]},{"type":"codeListing","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"syntax":"swift"},{"anchor":"Step-2-Define-State-and-Action","text":"Step 2: Define State and Action","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the State to manage the processing status and the available actions:"}]},{"type":"codeListing","code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    enum Action: ViewAction {","        case view(View)","        case internal(Internal)","        ","        @LockmanSingleExecution","        enum View {","            case startProcessButtonTapped","            ","            var lockmanInfo: LockmanSingleExecutionInfo {","                return .init(actionId: actionName, mode: .boundary)","            }","        }","        ","        enum Internal {","            case processStart","            case processCompleted","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Key points:"}]},{"items":[{"content":[{"inlineContent":[{"text":"This example uses TCA’s ViewAction pattern, where view-related actions are nested under the ","type":"text"},{"code":"view","type":"codeVoice"},{"text":" case","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applying the ","type":"text"},{"overridingTitle":"@LockmanSingleExecution","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},{"text":" macro to the nested View enum makes it conform to the ","type":"text"},{"code":"LockmanSingleExecutionAction","type":"codeVoice"},{"text":" protocol","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property defines how each action is controlled for locking:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Action identification: Provides the action identifier within the lock management system","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"anchor":"Step-3-Define-CancelID","text":"Step 3: Define CancelID","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a "},{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" to use as the cancellation identifier for Effects:"}]},{"type":"codeListing","code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"CancelID","type":"codeVoice"},{"text":" is used for Effect cancellation and lock boundary identification.","type":"text"}]},{"anchor":"Step-4-Implement-the-Reducer-body","text":"Step 4: Implement the Reducer body","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Implement processing with exclusive control using the ","type":"text"},{"isActive":true,"overridingTitle":"Reducer.lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitleInlineContent":[{"code":"Reducer.lock","type":"codeVoice"}],"type":"reference"},{"text":" modifier:","type":"text"}]},{"type":"codeListing","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .run { send in","                await send(.processStart)","                \/\/ Simulate heavy processing","                try await Task.sleep(nanoseconds: 3_000_000_000)","                await send(.processCompleted)","            }","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            if error is LockmanSingleExecutionCancellationError {","                await send(.internal(.updateMessage(\"Processing is already in progress\")))","            }","        },","        for: \\.view","    )","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Key points about the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitleInlineContent":[{"type":"codeVoice","code":"Reducer.lock"}],"isActive":true,"type":"reference","overridingTitle":"Reducer.lock"},{"text":" modifier:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatically applies lock management to all actions that implement "},{"type":"codeVoice","code":"LockmanAction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"type":"text","text":": Specifies the identifier for Effect cancellation and lock boundary"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"lockFailure","type":"codeVoice"},{"text":": Common handler for lock acquisition failures across all actions","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"for"},{"type":"text","text":": Case paths to check for nested LockmanAction conformance (in this example, "},{"type":"codeVoice","code":"\\.view"},{"type":"text","text":" checks actions nested in the view case)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Effects from non-LockmanAction actions pass through unchanged","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this implementation, the "},{"type":"codeVoice","code":"startProcessButtonTapped"},{"type":"text","text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times."}]},{"anchor":"Alternative-APIs","text":"Alternative APIs","type":"heading","level":2},{"anchor":"Using-Effectlock-Method-Chain","text":"Using Effect.lock() Method Chain","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"For individual effects that need locking, you can use the method chain API:","type":"text"}]},{"type":"codeListing","code":["case .startProcessButtonTapped:","    return .run { send in","        await send(.processStart)","        try await Task.sleep(nanoseconds: 3_000_000_000)","        await send(.processCompleted)","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ Handler for lock acquisition failure","            await send(.lockFailed)","        }","    )"],"syntax":"swift"},{"anchor":"Using-Effectrun-with-Lock","text":"Using Effect.run with Lock","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"When you need traditional Effect.run behavior with lock management:","type":"text"}]},{"type":"codeListing","code":["case .startProcessButtonTapped:","    return .run { send in","        await send(.processStart)","        \/\/ Simulate heavy processing","        try await Task.sleep(nanoseconds: 3_000_000_000)","        await send(.processCompleted)","    } catch: { error, send in","        \/\/ Handle errors during operation","        await send(.processError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            await send(.internal(.updateMessage(\"Processing is already in progress\")))","        }","    )"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach provides:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Standard TCA error handling with catch"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Separate lock failure handler"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Clean method chain syntax","type":"text"}]}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/gettingstarted"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"metadata":{"roleHeading":"Article","title":"Getting Started","modules":[{"name":"Lockman"}],"role":"article"},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"seeAlsoSections":[{"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true}],"references":{"doc://Lockman/documentation/Lockman/Lock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","kind":"article","type":"topic","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"role":"article","title":"Lock","url":"\/documentation\/lockman\/lock"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","role":"article","type":"topic","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"role":"article","kind":"article","title":"Choosing a Strategy","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/Unlock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","kind":"article","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","title":"Unlock","url":"\/documentation\/lockman\/unlock"},"doc://Lockman/documentation/Lockman/Configuration":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","kind":"article","type":"topic","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"role":"article","title":"Configuration","url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","kind":"article","title":"Boundary","abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/boundaryoverview","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","type":"topic"}}}