{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"seeAlsoSections":[{"title":"Strategies","generated":true,"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"metadata":{"role":"article","title":"GroupCoordinationStrategy","roleHeading":"Article","modules":[{"name":"Lockman"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}],"type":"paragraph"},{"anchor":"Group-System","text":"Group System","type":"heading","level":2},{"anchor":"Coordination-Roles","text":"Coordination Roles","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"none","type":"text"}],"type":"strong"},{"text":" - Non-exclusive Participant","type":"text"}],"type":"paragraph"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"text":"Can participate regardless of group state","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Auxiliary processing such as UI updates or logging"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"leader","type":"text"}]},{"type":"text","text":" - Group Leader"}],"type":"paragraph"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Role to start group activities","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enables member participation","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"member"}]},{"type":"text","text":" - Group Member"}],"type":"paragraph"},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate in active groups"}]}]},{"content":[{"inlineContent":[{"text":"Executes when leader or other participants are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responsible for coordinated processing"}]}]}],"type":"unorderedList"},{"level":3,"text":"Leader Entry Policy","anchor":"Leader-Entry-Policy","type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"emptyGroup","type":"text"}],"type":"strong"},{"text":" - Start only in empty group","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".leader(.emptyGroup)"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Can only participate when group is completely empty","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Starts new activity cycle","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Most strict control"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"withoutMembers"}],"type":"strong"},{"text":" - Start without members","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".leader(.withoutMembers)"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Can participate when no members are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Other leaders are allowed"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables coordination between leaders"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"withoutLeader","type":"text"}],"type":"strong"},{"text":" - Start without leader","type":"text"}]},{"code":[".leader(.withoutLeader)"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no other leaders are present"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Members are allowed"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}]}]}]},{"text":"Usage","type":"heading","anchor":"Usage","level":2},{"text":"Basic Usage Example","type":"heading","anchor":"Basic-Usage-Example","level":3},{"code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Coordination with Multiple Groups","type":"heading","anchor":"Coordination-with-Multiple-Groups","level":3},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"text":"Operation Examples","type":"heading","anchor":"Operation-Examples","level":2},{"text":"Leader-Member Coordination","type":"heading","anchor":"Leader-Member-Coordination","level":3},{"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing","syntax":null},{"text":"Entry Policy Differences","type":"heading","anchor":"Entry-Policy-Differences","level":3},{"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing","syntax":null},{"text":"Error Handling","type":"heading","anchor":"Error-Handling","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"isActive":true},{"type":"text","text":" page."}]},{"text":"LockmanGroupCoordinationCancellationError","type":"heading","anchor":"LockmanGroupCoordinationCancellationError","level":3},{"type":"paragraph","inlineContent":[{"text":"This error conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanCancellationError"},{"text":" protocol and provides:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"text":": Where the cancellation occurred","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reason"},{"type":"text","text":": Specific reason for cancellation"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}]},{"type":"text","text":" - Action already in group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}]},{"type":"text","text":" - Leader cannot join non-empty group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"memberCannotJoinEmptyGroup","type":"text"}]},{"type":"text","text":" - Member cannot join empty group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"blockedByExclusiveLeader","type":"text"}]},{"type":"text","text":" - Blocked by exclusive leader"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader: \\(leaderInfo.actionId)\"))","    }","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman":{"role":"collection","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"url":"\/documentation\/lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","kind":"article","role":"article","url":"\/documentation\/lockman\/compositestrategy","title":"CompositeStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"title":"PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"role":"article","type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article","title":"SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"role":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"kind":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","title":"DynamicConditionStrategy","kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","type":"topic"}}}