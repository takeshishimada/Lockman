{"metadata":{"modules":[{"name":"Lockman"}],"externalID":"s:7Lockman03AnyA8StrategyV15getCurrentLocksSDyAA0bA10BoundaryIdVSayAA0A4Info_pGGyF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":" : [any ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP"},{"text":"]]","kind":"text"}],"roleHeading":"Instance Method","role":"symbol","symbolKind":"method","title":"getCurrentLocks()"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":" : [any "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","kind":"typeIdentifier","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"},{"kind":"text","text":"]]"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"Dictionary mapping boundary IDs to their active lock information","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"This method provides a snapshot of all currently held locks managed by the","type":"text"},{"text":" ","type":"text"},{"text":"underlying concrete strategy. The implementation delegates to the concrete","type":"text"},{"text":" ","type":"text"},{"text":"strategy’s getCurrentLocks method through the type-erased closure.","type":"text"}],"type":"paragraph"},{"text":"Type Safety","anchor":"Type-Safety","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"While the strategy type is erased, the lock information types are preserved"},{"type":"text","text":" "},{"type":"text","text":"through the protocol’s associated type requirement."}],"type":"paragraph"},{"text":"Thread Safety","anchor":"Thread-Safety","type":"heading","level":2},{"inlineContent":[{"text":"The operation provides a consistent snapshot at the time of the call,","type":"text"},{"text":" ","type":"text"},{"text":"but the actual lock state may change immediately after.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()"]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Returns current locks information for debugging.","type":"text"}],"references":{"doc://Lockman/documentation/Lockman/LockmanInfo":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","role":"symbol","abstract":[{"text":"Represents information required by Lockman locking strategies.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"title":"LockmanInfo","url":"\/documentation\/lockman\/lockmaninfo"},"doc://Lockman/documentation/Lockman":{"role":"collection","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"url":"\/documentation\/lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy","role":"symbol","title":"AnyLockmanStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","type":"topic","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"abstract":[{"text":"Returns current locks information for debugging.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier","text":"AnyLockmanBoundaryId"},{"kind":"text","text":" : [any "},{"preciseIdentifier":"s:7Lockman0A4InfoP","kind":"typeIdentifier","text":"LockmanInfo"},{"kind":"text","text":"]]"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","title":"getCurrentLocks()"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"title":"AnyLockmanBoundaryId","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","url":"\/documentation\/lockman\/anylockmanboundaryid","type":"topic","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}]}}}