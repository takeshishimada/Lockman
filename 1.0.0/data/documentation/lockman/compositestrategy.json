{"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"CompositeStrategy is a strategy that combines multiple strategies to achieve more complex and advanced exclusive control. For complex requirements that cannot be addressed by a single strategy, you can build flexible and powerful control logic by combining 2 to 5 strategies."}],"type":"paragraph"},{"inlineContent":[{"text":"This strategy is used in advanced use cases that require satisfying multiple control conditions simultaneously.","type":"text"}],"type":"paragraph"},{"text":"Combination System","anchor":"Combination-System","type":"heading","level":2},{"text":"Number of Strategy Combinations","anchor":"Number-of-Strategy-Combinations","type":"heading","level":3},{"inlineContent":[{"text":"Lockman supports combinations of 2 to 5 strategies:","type":"text"}],"type":"paragraph"},{"text":"Combination Control Logic","anchor":"Combination-Control-Logic","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Success required in all strategies","type":"text"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Success only when lock acquisition is possible in all component strategies"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If even one fails, the entire operation fails"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Coordination of preceding cancellation"}]},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"When any strategy requires preceding cancellation, execute preceding cancellation for all","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the first cancellation error found"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"LIFO (Last In, First Out) release"}],"type":"strong"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lock release is executed in reverse order of acquisition"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Release from the last acquired lock in order"}]}]}]},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"text":"Basic Usage Example","anchor":"Basic-Usage-Example","type":"heading","level":3},{"syntax":"swift","code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self",")","enum ViewAction {","    case criticalSave","    case normalSave","    ","    var lockmanInfo: LockmanCompositeInfo2<LockmanSingleExecutionInfo, LockmanPriorityBasedInfo> {","        LockmanCompositeInfo2(","            actionId: actionName,","            lockmanInfoForStrategy1: LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            ),","            lockmanInfoForStrategy2: LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: switch self {","                    case .criticalSave: .high(.exclusive)","                    case .normalSave: .low(.replaceable)","                }","            )","        )","    }","}"],"type":"codeListing"},{"text":"Combining 3 Strategies","anchor":"Combining-3-Strategies","type":"heading","level":3},{"syntax":"swift","code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self,","    LockmanConcurrencyLimitedStrategy.self",")","enum Action {","    case downloadFile","    ","    var lockmanInfo: LockmanCompositeInfo3<LockmanSingleExecutionInfo, LockmanPriorityBasedInfo, LockmanConcurrencyLimitedInfo> {","        LockmanCompositeInfo3(","            actionId: actionName,","            lockmanInfoForStrategy1: LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action \/\/ Prevent duplication","            ),","            lockmanInfoForStrategy2: LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable) \/\/ Priority control","            ),","            lockmanInfoForStrategy3: LockmanConcurrencyLimitedInfo(","                actionId: actionName,","                concurrencyId: \"downloads\",","                limit: .limited(3) \/\/ Concurrent execution limit","            )","        )","    }","}"],"type":"codeListing"},{"text":"Operation Examples","anchor":"Operation-Examples","type":"heading","level":2},{"text":"Operation with 2 Strategy Combination","anchor":"Operation-with-2-Strategy-Combination","type":"heading","level":3},{"syntax":null,"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(varies by action)","","Time: 0s  - normalSave request (.low(.replaceable))","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Result: ✅ Start execution","","Time: 1s  - normalSave request (duplicate)","  Strategy 1: ❌ Fail (same action running)","  Strategy 2: No check (failed at strategy 1)","  Result: ❌ Overall failure","","Time: 2s  - criticalSave request (.high(.exclusive))","  Strategy 1: ✅ Success (different action)","  Strategy 2: ✅ Success (with preceding cancellation)","  Result: ✅ Start execution (cancel normalSave)"],"type":"codeListing"},{"text":"Operation with 3 Strategy Combination","anchor":"Operation-with-3-Strategy-Combination","type":"heading","level":3},{"syntax":null,"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(.low(.replaceable))  ","Strategy 3: ConcurrencyLimited(.limited(3))","","Current situation: 3 download processes running","","Time: 0s  - New downloadFile request","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Strategy 3: ❌ Fail (concurrent execution limit reached)","  Result: ❌ Overall failure"],"type":"codeListing"},{"text":"Error Handling","anchor":"Error-Handling","type":"heading","level":2},{"inlineContent":[{"text":"For errors that may occur with CompositeStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},{"text":" page.","type":"text"}],"type":"paragraph"},{"text":"Error Handling in Composite Strategy","anchor":"Error-Handling-in-Composite-Strategy","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"In composite strategies, errors from each component strategy are integrated and reported. Since the error from the first failed strategy is returned, check the error type and handle appropriately:"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    switch error {","    case let singleError as LockmanSingleExecutionCancellationError:","        await send(.singleExecutionConflict(\"Duplicate execution detected\"))","        ","    case let blockedError as LockmanPriorityBasedBlockedError:","        await send(.priorityConflict(\"Priority conflict occurred\"))","        ","    case let cancellationError as LockmanPriorityBasedCancellationError:","        await send(.actionPreempted(\"Action was preempted by higher priority\"))","        ","    case let concurrencyError as LockmanConcurrencyLimitedCancellationError:","        await send(.concurrencyLimitReached(\"Concurrent execution limit reached\"))","        ","    case let groupError as LockmanGroupCoordinationCancellationError:","        await send(.groupCoordinationConflict(\"Group coordination rule violated\"))","        ","    default:","        await send(.unknownLockFailure(\"Failed to acquire lock\"))","    }","}"],"type":"codeListing"},{"text":"Design Guidelines","anchor":"Design-Guidelines","type":"heading","level":2},{"text":"Strategy Selection Order","anchor":"Strategy-Selection-Order","type":"heading","level":3},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Start with basic control"}],"type":"strong"},{"text":": Begin with SingleExecution","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Add if priority is needed","type":"text"}]},{"text":": Combine PriorityBased","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add if resource control is needed"}]},{"text":": Combine ConcurrencyLimited","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Add if coordination control is needed"}],"type":"strong"},{"type":"text","text":": Combine GroupCoordination"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Add if custom logic is needed"}],"type":"strong"},{"text":": Combine DynamicCondition","type":"text"}],"type":"paragraph"}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/compositestrategy"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"],"title":"Strategies","anchor":"Strategies","generated":true}],"kind":"article","metadata":{"roleHeading":"Article","role":"article","title":"CompositeStrategy","modules":[{"name":"Lockman"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"references":{"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"role":"article","type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","kind":"article","title":"SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"role":"article"},"doc://Lockman/documentation/Lockman":{"role":"collection","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"url":"\/documentation\/lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"title":"PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","title":"GroupCoordinationStrategy","role":"article","url":"\/documentation\/lockman\/groupcoordinationstrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"kind":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","title":"DynamicConditionStrategy","kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","type":"topic"}}}