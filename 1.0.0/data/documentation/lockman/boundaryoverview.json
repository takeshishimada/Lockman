{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/boundaryoverview"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A Boundary is the "},{"type":"strong","inlineContent":[{"text":"exclusive control boundary","type":"text"}]},{"type":"text","text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"],"type":"codeListing"},{"inlineContent":[{"text":"Using CancelID as a boundary provides the following benefits:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Natural integration with TCA"}]},{"text":" - Leverages existing TCA mechanisms","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Clear boundary definition","type":"text"}],"type":"strong"},{"type":"text","text":" - CancelID clearly defines the scope of exclusive control"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Boundary Specifications","anchor":"Boundary-Specifications","level":2,"type":"heading"},{"text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Exclusive control between different Boundaries is not possible:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Since these are treated as separate boundaries, load can be executed even while save is running."}],"type":"paragraph"},{"text":"2. Only one Boundary per reducer","anchor":"2-Only-one-Boundary-per-reducer","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot specify multiple Boundaries for a single reducer:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"]},{"type":"heading","level":2,"anchor":"Summary","text":"Summary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness."}]}]}],"abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"anchor":"Essentials","title":"Essentials"}],"sections":[],"kind":"article","metadata":{"modules":[{"name":"Lockman"}],"role":"article","title":"Boundary","roleHeading":"Article"},"references":{"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","kind":"article","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article"},"doc://Lockman/documentation/Lockman/Lock":{"abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","type":"topic","url":"\/documentation\/lockman\/lock","role":"article"},"doc://Lockman/documentation/Lockman/Configuration":{"type":"topic","role":"article","url":"\/documentation\/lockman\/configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"kind":"article","title":"Configuration"},"doc://Lockman/documentation/Lockman/Unlock":{"abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","type":"topic","url":"\/documentation\/lockman\/unlock","role":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","kind":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"role":"article"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","kind":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"role":"article"},"doc://Lockman/documentation/Lockman":{"role":"collection","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"url":"\/documentation\/lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/GettingStarted":{"role":"article","kind":"article","title":"Getting Started","url":"\/documentation\/lockman\/gettingstarted","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"type":"topic"}}}