{"abstract":[{"text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior.","type":"text"}],"variants":[{"paths":["\/documentation\/lockman\/lockmandynamiccondition()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"text":"LockmanDynamicConditionAction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"text":"Apply this macro to an enum declaration to automatically generate:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Protocol conformance to ","type":"text"},{"code":"LockmanDynamicConditionAction","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"extractMetadata()"},{"type":"text","text":" method that extracts enum associated values as metadata"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"text":" property with default condition (always success)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The macro enables you to define custom locking conditions at runtime based on:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Current state values","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Other locks in the same boundary"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Time-based conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any custom logic"}]}]}]},{"inlineContent":[{"type":"text","text":"Example usage with TCA:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            try await processTask(size: size)","            await send(.taskCompleted)","          }","        }","      }","    }","  }","}"],"type":"codeListing"}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"externalID":"s:7Lockman0A16DynamicConditionyycfm","modules":[{"name":"Lockman"}],"symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"role":"symbol","roleHeading":"Macro","title":"LockmanDynamicCondition()"},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"references":{"doc://Lockman/documentation/Lockman":{"role":"collection","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"url":"\/documentation\/lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","url":"\/documentation\/lockman\/lockmandynamicconditionaction","kind":"symbol","abstract":[{"type":"text","text":"A protocol for actions that support dynamic condition-based locking."}],"navigatorTitle":[{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"title":"LockmanDynamicConditionAction","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"type":"topic","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"title":"LockmanDynamicCondition()","url":"\/documentation\/lockman\/lockmandynamiccondition()","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()"}}}