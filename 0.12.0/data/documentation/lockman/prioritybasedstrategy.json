{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","title":"Strategies"}],"abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"kind":"article","metadata":{"title":"PriorityBasedStrategy","role":"article","modules":[{"name":"Lockman"}],"roleHeading":"Article"},"sections":[],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/prioritybasedstrategy"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority processing can interrupt low-priority processing to execute, allowing important processing to be handled preferentially."}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where high-urgency processing or control based on importance is required.","type":"text"}]},{"text":"Priority System","anchor":"Priority-System","type":"heading","level":2},{"text":"Priority Levels","anchor":"Priority-Levels","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"high"}],"type":"strong"},{"text":" - High Priority","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can interrupt all other priority processing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"System-level emergency processing or important user operations"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"low","type":"text"}],"type":"strong"},{"type":"text","text":" - Low Priority"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt none priority processing","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Interrupted by high priority"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Regular background processing","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"none","type":"text"}]},{"type":"text","text":" - No Priority"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bypasses priority system"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not interrupted by other processing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Basic processing or temporary disabling"}]}]}],"type":"unorderedList"},{"text":"Exclusive Execution Control","anchor":"Exclusive-Execution-Control","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Within the same priority level, control is based on the exclusive execution behavior setting of existing processing:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"exclusive"}]},{"type":"text","text":" - Exclusive Execution"}]},{"type":"codeListing","syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Rejects new processing of the same priority"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Protects important processing from interruption"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"replaceable","type":"text"}],"type":"strong"},{"text":" - Replaceable Execution","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"]},{"items":[{"content":[{"inlineContent":[{"text":"Can be interrupted by new processing of the same priority","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied to search or update processing"}]}]}],"type":"unorderedList"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"text":"Basic Usage Example","anchor":"Basic-Usage-Example","type":"heading","level":3},{"type":"codeListing","syntax":"swift","code":["@LockmanPriorityBased","enum ViewAction {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"]},{"text":"Operation Examples","anchor":"Operation-Examples","type":"heading","level":2},{"text":"Interruption by Priority","anchor":"Interruption-by-Priority","type":"heading","level":3},{"type":"codeListing","syntax":null,"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"]},{"text":"Control at Same Priority","anchor":"Control-at-Same-Priority","type":"heading","level":3},{"type":"codeListing","syntax":null,"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"]},{"text":"Error Handling","anchor":"Error-Handling","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","type":"reference"},{"text":" page.","type":"text"}]},{"text":"LockmanPriorityBasedError","anchor":"LockmanPriorityBasedError","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"higherPriorityExists"}],"type":"strong"},{"type":"text","text":" - Higher priority is running"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if case .higherPriorityExists(let requested, let current) = error as? LockmanPriorityBasedError {","        send(.priorityConflict(\"Waiting due to high priority process running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"samePriorityConflict"}]},{"type":"text","text":" - Conflict at same priority"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if case .samePriorityConflict(let priority) = error as? LockmanPriorityBasedError {","        send(.busyMessage(\"Process with same priority is running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"precedingActionCancelled","type":"text"}]},{"type":"text","text":" - Preceding action cancelled"}]},{"type":"codeListing","syntax":"swift","code":["catch handler: { error, send in","    if case .precedingActionCancelled(let cancelledInfo) = error as? LockmanPriorityBasedError {","        send(.processCancelled(\"Interrupted by high priority process\"))","    }","}"]}]}],"references":{"doc://Lockman/documentation/Lockman":{"title":"Lockman","kind":"symbol","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","title":"SingleExecutionStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","title":"Error Handling"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","type":"topic","title":"GroupCoordinationStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","role":"article","title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"}}}