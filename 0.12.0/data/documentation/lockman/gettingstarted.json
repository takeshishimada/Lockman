{"abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature.","type":"text"}]},{"anchor":"Adding-Lockman-as-a-dependency","type":"heading","level":2,"text":"Adding Lockman as a dependency"},{"type":"paragraph","inlineContent":[{"text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" file:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"0.12.0\")","]"]},{"type":"paragraph","inlineContent":[{"text":"And add ","type":"text"},{"code":"Lockman","type":"codeVoice"},{"text":" as a dependency of your package’s target:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"]},{"anchor":"Writing-your-first-feature","type":"heading","level":2,"text":"Writing your first feature"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}],"isActive":true,"overridingTitle":"@LockmanSingleExecution","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},{"type":"text","text":" macro."}]},{"anchor":"Step-1-Define-the-Reducer","type":"heading","level":3,"text":"Step 1: Define the Reducer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, define the basic Reducer structure:"}]},{"type":"codeListing","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"syntax":"swift"},{"level":3,"type":"heading","text":"Step 2: Define State and Action","anchor":"Step-2-Define-State-and-Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the State to manage the processing status and the available actions:"}]},{"type":"codeListing","code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    enum Action: ViewAction {","        case view(View)","        case internal(Internal)","        ","        @LockmanSingleExecution","        enum View {","            case startProcessButtonTapped","            ","            var lockmanInfo: LockmanSingleExecutionInfo {","                return .init(actionId: actionName, mode: .boundary)","            }","        }","        ","        enum Internal {","            case processStart","            case processCompleted","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Key points:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Applying the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","isActive":true,"overridingTitle":"@LockmanSingleExecution","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}],"type":"reference"},{"type":"text","text":" macro to the Action enum makes it conform to the "},{"code":"LockmanSingleExecutionAction","type":"codeVoice"},{"type":"text","text":" protocol"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property defines how each action is controlled for locking:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Action identification: Provides the action identifier within the lock management system"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"level":3,"type":"heading","text":"Step 3: Define CancelID","anchor":"Step-3-Define-CancelID"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a "},{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" to use as the cancellation identifier for Effects:"}]},{"type":"codeListing","code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CancelID"},{"text":" is used for Effect cancellation and lock boundary identification.","type":"text"}]},{"level":3,"anchor":"Step-4-Implement-the-Reducer-body","text":"Step 4: Implement the Reducer body","type":"heading"},{"inlineContent":[{"type":"text","text":"Implement processing with exclusive control using the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitle":"withLock","overridingTitleInlineContent":[{"code":"withLock","type":"codeVoice"}],"isActive":true},{"type":"text","text":" method:"}],"type":"paragraph"},{"code":["var body: some Reducer<State, Action> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .withLock(","                operation: { send in","                    await send(.processStart)","                    \/\/ Simulate heavy processing","                    try await Task.sleep(nanoseconds: 3_000_000_000)","                    await send(.processCompleted)","                },","                lockFailure: { error, send in","                    \/\/ When processing is already in progress","                    state.message = \"Processing is already in progress\"","                },","                action: action,","                cancelID: CancelID.userAction","            )","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Key points about the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","type":"reference","overridingTitle":"withLock","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"withLock"}]},{"type":"text","text":" method:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"operation","type":"codeVoice"},{"text":": Defines the processing to be executed under exclusive control","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lockFailure"},{"text":": Handler called when the same processing is already in progress","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"action","type":"codeVoice"},{"text":": Passes the currently processing action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"cancelID"},{"type":"text","text":": Specifies the identifier for Effect cancellation and lock boundary"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"With this implementation, the "},{"type":"codeVoice","code":"startProcessButtonTapped"},{"type":"text","text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"Getting Started","role":"article"},"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials","anchor":"Essentials"}],"variants":[{"paths":["\/documentation\/lockman\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman/DebuggingGuide":{"abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","role":"article","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"role":"article","url":"\/documentation\/lockman\/choosingstrategy","kind":"article","type":"topic","title":"Choosing a Strategy","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","title":"Error Handling"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","title":"SingleExecutionStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}]},"doc://Lockman/documentation/Lockman/Lock":{"title":"Lock","url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"kind":"article","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"title":"Boundary","url":"\/documentation\/lockman\/boundaryoverview","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"kind":"article","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","kind":"symbol","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/Configuration":{"abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"title":"Configuration","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/Unlock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/unlock","kind":"article","role":"article"}}}