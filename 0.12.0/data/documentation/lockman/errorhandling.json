{"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true,"anchor":"Essentials"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"level":2,"text":"Common Error Handling Patterns","anchor":"Common-Error-Handling-Patterns","type":"heading"},{"level":3,"text":"lockFailure Handler","anchor":"lockFailure-Handler","type":"heading"},{"inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".withLock(","    operation: { send in","        \/\/ Execute processing","    },","    lockFailure: { error, send in","        \/\/ Error handling","        if case .specificError(let info) = error as? StrategySpecificError {","            send(.userFriendlyMessage(\"Error message\"))","        }","    },","    action: action,","    cancelID: cancelID",")"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Parameters:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"error"},{"type":"text","text":": The error that occurred (strategy-specific error type)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"send","type":"codeVoice"},{"type":"text","text":": Function for sending feedback to the user"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"text":"catch handler Pattern","anchor":"catch-handler-Pattern","type":"heading"},{"inlineContent":[{"text":"Handling general errors that occur during processing:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["catch handler: { error, send in","    send(.operationError(error.localizedDescription))","}"]},{"inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}],"type":"paragraph"},{"level":2,"text":"Types of Errors and Solutions","anchor":"Types-of-Errors-and-Solutions","type":"heading"},{"level":3,"text":"1. Lock Acquisition Failure (Already Locked)","anchor":"1-Lock-Acquisition-Failure-Already-Locked","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Concept","type":"text"}]},{"type":"text","text":": Occurs when the same processing or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    send(.setButtonState(.loading))","}"]},{"level":3,"text":"2. Permission\/Priority Conflicts","anchor":"2-PermissionPriority-Conflicts","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Concept","type":"text"}]},{"type":"text","text":": Occurs due to higher priority processing or group rule constraints"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"]},{"level":3,"text":"3. Cancellation Notification","anchor":"3-Cancellation-Notification","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["catch handler: { error, send in","    if error is CancellationError {","        send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        send(.processError(error.localizedDescription))","    }","}"]},{"level":2,"text":"Best Practices","anchor":"Best-Practices","type":"heading"},{"level":3,"text":"1. Proper Error Type Casting","anchor":"1-Proper-Error-Type-Casting","type":"heading"},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if case .actionAlreadyRunning(let existingInfo) = error as? LockmanSingleExecutionError {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"]},{"level":3,"text":"2. User-Friendly Messages","anchor":"2-User-Friendly-Messages","type":"heading"},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Good example: Specific and easy to understand message","send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","send(.showMessage(\"LockmanError: boundary locked\"))"]},{"level":3,"text":"3. Utilizing Additional Information","anchor":"3-Utilizing-Additional-Information","type":"heading"},{"inlineContent":[{"text":"Many errors contain additional information:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    switch error as? LockmanConcurrencyLimitedError {","    case .concurrencyLimitReached(let current, let limit, _):","        send(.showMessage(\"Concurrent execution limit (\\(limit)) reached (current: \\(current))\"))","    default:","        send(.showMessage(\"Cannot start processing\"))","    }","}"]},{"level":2,"text":"Strategy-Specific Errors","anchor":"Strategy-Specific-Errors","type":"heading"},{"inlineContent":[{"text":"For detailed error information for each strategy, please refer to their respective documentation:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitle":"SingleExecutionStrategy","overridingTitleInlineContent":[{"text":"SingleExecutionStrategy","type":"text"}],"isActive":true,"type":"reference"},{"text":" - Duplicate execution errors","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","overridingTitleInlineContent":[{"text":"PriorityBasedStrategy","type":"text"}],"type":"reference","isActive":true,"overridingTitle":"PriorityBasedStrategy"},{"text":" - Priority conflict errors","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","isActive":true,"type":"reference","overridingTitle":"GroupCoordinationStrategy","overridingTitleInlineContent":[{"text":"GroupCoordinationStrategy","type":"text"}]},{"text":" - Group rule violation errors","type":"text"}]}]},{"content":[{"inlineContent":[{"overridingTitle":"ConcurrencyLimitedStrategy","isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"ConcurrencyLimitedStrategy","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},{"text":" - Concurrent execution limit exceeded errors","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","overridingTitle":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}],"isActive":true},{"type":"text","text":" - Condition mismatch errors"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","overridingTitle":"CompositeStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"CompositeStrategy"}]},{"type":"text","text":" - Composite strategy errors"}]}]}],"type":"unorderedList"}]}],"kind":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Lockman"}],"title":"Error Handling"},"references":{"doc://Lockman/documentation/Lockman/Lock":{"title":"Lock","url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"kind":"article","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/Unlock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/unlock","kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/Configuration":{"abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"title":"Configuration","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","type":"topic","title":"GroupCoordinationStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}]},"doc://Lockman/documentation/Lockman/GettingStarted":{"abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/lockman\/gettingstarted","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","type":"topic","title":"Getting Started"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","kind":"symbol","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","title":"SingleExecutionStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}]},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","role":"article","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"title":"Boundary","url":"\/documentation\/lockman\/boundaryoverview","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"kind":"article","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"role":"article","url":"\/documentation\/lockman\/choosingstrategy","kind":"article","type":"topic","title":"Choosing a Strategy","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","role":"article","title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}]},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"url":"\/documentation\/lockman\/prioritybasedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","kind":"article","title":"PriorityBasedStrategy","role":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"type":"topic"}}}