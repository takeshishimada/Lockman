{"sections":[],"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}]},{"text":"Execution Modes","level":2,"anchor":"Execution-Modes","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy supports three execution modes:"}]},{"text":"none - No Control","level":3,"anchor":"none-No-Control","type":"heading"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Executes all processing without exclusive control","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Used when temporarily disabling lock functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}],"type":"unorderedList"},{"text":"boundary - Boundary-level Exclusive Control","level":3,"anchor":"boundary-Boundary-level-Exclusive-Control","type":"heading"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only one process can execute within the same boundary"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"action - Action-level Exclusive Control","level":3,"anchor":"action-Action-level-Exclusive-Control","type":"heading"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Different actions can execute concurrently"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Usage","level":2,"anchor":"Usage","type":"heading"},{"text":"Basic Usage Example","level":3,"anchor":"Basic-Usage-Example","type":"heading"},{"syntax":"swift","type":"codeListing","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"]},{"text":"Usage within Effects","level":3,"anchor":"Usage-within-Effects","type":"heading"},{"syntax":"swift","type":"codeListing","code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            send(.saveCompleted)","        },","        catch handler: { error, send in","            send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            send(.saveBusy(\"Save process is currently running\"))","        },","        action: .save,","        cancelID: CancelID.userAction","    )"]},{"text":"Operation Examples","level":2,"anchor":"Operation-Examples","type":"heading"},{"text":"action mode","level":3,"anchor":"action-mode","type":"heading"},{"syntax":null,"type":"codeListing","code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"]},{"text":"boundary mode","level":3,"anchor":"boundary-mode","type":"heading"},{"syntax":null,"type":"codeListing","code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"]},{"text":"Error Handling","level":2,"anchor":"Error-Handling","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"type":"text","text":" page."}]},{"text":"LockmanSingleExecutionError","level":3,"anchor":"LockmanSingleExecutionError","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}]},{"type":"text","text":" - Boundary is already locked"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": ID of the locked boundary"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Existing lock information"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyRunning"}]},{"type":"text","text":" - Same action is already running"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"type":"text","text":": Running action information"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    switch error as? LockmanSingleExecutionError {","    case .boundaryAlreadyLocked(_, let existingInfo):","        send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","    case .actionAlreadyRunning(let existingInfo):","        send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","    default:","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"]}],"kind":"content"}],"metadata":{"roleHeading":"Article","title":"SingleExecutionStrategy","modules":[{"name":"Lockman"}],"role":"article"},"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","generated":true,"title":"Strategies"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"references":{"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","role":"article","title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"url":"\/documentation\/lockman\/prioritybasedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","kind":"article","title":"PriorityBasedStrategy","role":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/lockman\/errorhandling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","title":"Error Handling"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","kind":"symbol","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","type":"topic","title":"GroupCoordinationStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}]},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}]}}}