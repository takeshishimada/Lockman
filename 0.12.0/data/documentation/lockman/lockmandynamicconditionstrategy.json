{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"code":"LockmanDynamicConditionStrategy","type":"codeVoice"},{"text":" allows you to define arbitrary locking conditions","type":"text"},{"text":" ","type":"text"},{"text":"using closures that are evaluated when the lock is requested. This provides maximum","type":"text"},{"text":" ","type":"text"},{"text":"flexibility for complex business logic scenarios.","type":"text"}]},{"type":"heading","level":2,"text":"Example","anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["\/\/ Business logic condition with custom error","struct PriorityTooLowError: Error {","    let priority: Int","}","","let action = MyAction.fetchData(userId: \"123\", priority: 5)","let conditionalAction = action.with {","    guard priority > 3 else {","        return .failure(PriorityTooLowError(priority: priority))","    }","    return .success","}"]},{"type":"heading","level":2,"text":"Thread Safety","anchor":"Thread-Safety"},{"type":"paragraph","inlineContent":[{"text":"This strategy is thread-safe and uses ","type":"text"},{"code":"LockmanState","type":"codeVoice"},{"text":" for managing concurrent access.","type":"text"}]}]}],"topicSections":[{"anchor":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/init()"],"title":"Initializers","generated":true},{"anchor":"Instance-Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/strategyId"],"title":"Instance Properties","generated":true},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/unlock(id:info:)"],"title":"Instance Methods","generated":true},{"anchor":"Type-Aliases","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/I"],"title":"Type Aliases","generated":true},{"anchor":"Type-Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/shared"],"title":"Type Properties","generated":true},{"anchor":"Type-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/makeStrategyId()"],"title":"Type Methods","generated":true}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"paths":["\/documentation\/lockman\/lockmandynamicconditionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:7Lockman0A24DynamicConditionStrategyC","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"modules":[{"name":"Lockman"}],"symbolKind":"class","roleHeading":"Class","title":"LockmanDynamicConditionStrategy"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"A strategy that evaluates custom conditions at runtime to determine lock availability.","type":"text"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"title":"Conforms To","type":"conformsTo"}],"references":{"doc://Lockman/documentation/Lockman/LockmanStrategy":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanStrategy","kind":"identifier"}],"abstract":[{"text":"A protocol defining the core locking operations that all strategies must implement.","type":"text"}],"title":"LockmanStrategy","kind":"symbol","role":"symbol","url":"\/documentation\/lockman\/lockmanstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy","title":"LockmanDynamicConditionStrategy","abstract":[{"type":"text","text":"A strategy that evaluates custom conditions at runtime to determine lock availability."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy","kind":"symbol"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","kind":"symbol","role":"collection","url":"\/documentation\/lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/makeStrategyId()":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV","text":"LockmanStrategyId"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/makeStrategyId()","abstract":[{"type":"text","text":"Creates a strategy identifier for the dynamic condition strategy."}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/makestrategyid()","title":"makeStrategyId()"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/init()":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/init()","abstract":[{"type":"text","text":"Creates a new dynamic condition strategy instance."}],"kind":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/init()","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"title":"init()","type":"topic"},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/shared":{"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/shared","title":"shared","abstract":[{"text":"Shared singleton instance.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/shared","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanDynamicConditionStrategy","preciseIdentifier":"s:7Lockman0A24DynamicConditionStrategyC"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/canLock(id:info:)":{"abstract":[{"type":"text","text":"Evaluates the dynamic condition to determine if a lock can be acquired."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"canLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"LockmanDynamicConditionInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV"},{"text":") -> ","kind":"text"},{"text":"LockmanResult","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO"}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/canlock(id:info:)","title":"canLock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/canLock(id:info:)","type":"topic","role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/cleanUp(id:)":{"abstract":[{"type":"text","text":"Removes all active locks for the specified boundary."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/cleanup(id:)","title":"cleanUp(id:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp(id:)","type":"topic","role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/getCurrentLocks()":{"abstract":[{"type":"text","text":"Returns current locks information for debugging."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/getCurrentLocks()","kind":"symbol","role":"symbol","title":"getCurrentLocks()","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/getcurrentlocks()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","text":"AnyLockmanBoundaryId"},{"kind":"text","text":" : [any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP","text":"LockmanInfo"},{"kind":"text","text":"]]"}],"type":"topic"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/lock(id:info:)":{"abstract":[{"type":"text","text":"Acquires a lock for the specified boundary and action."}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/lock(id:info:)","kind":"symbol","role":"symbol","title":"lock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/lock(id:info:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"LockmanDynamicConditionInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV"},{"text":")","kind":"text"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/cleanUp()":{"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp()","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/cleanup()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Removes all active locks across all boundaries."}],"title":"cleanUp()"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/unlock(id:info:)":{"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/unlock(id:info:)","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/unlock(id:info:)","title":"unlock(id:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV","kind":"typeIdentifier","text":"LockmanDynamicConditionInfo"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Releases all locks with the same actionId."}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/I":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/I","title":"LockmanDynamicConditionStrategy.I","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/i","abstract":[],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"I"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"I"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/strategyId":{"type":"topic","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/strategyid","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strategyId","kind":"identifier"},{"text":": ","kind":"text"},{"text":"LockmanStrategyId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"abstract":[{"text":"The unique identifier for this strategy instance.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/strategyId","kind":"symbol","title":"strategyId","role":"symbol"}}}