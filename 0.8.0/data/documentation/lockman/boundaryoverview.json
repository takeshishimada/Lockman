{"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A Boundary is the ","type":"text"},{"inlineContent":[{"text":"exclusive control boundary","type":"text"}],"type":"strong"},{"text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution.","type":"text"}]},{"code":["\/\/ Specify CancelID as boundary with withLock","return .withLock(","    operation: { send in","        \/\/ Processing","    },","    lockFailure: { error, send in","        \/\/ Processing when already running within the same boundary","    },","    action: action,","    cancelID: CancelID.userAction  \/\/ This CancelID functions as a Boundary",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using CancelID as a boundary provides the following benefits:"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Natural integration with TCA"}]},{"text":" - Leverages existing TCA mechanisms","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Clear boundary definition","type":"text"}],"type":"strong"},{"text":" - CancelID clearly defines the scope of exclusive control","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Boundary Specifications","anchor":"Boundary-Specifications","level":2,"type":"heading"},{"text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Exclusive control between different Boundaries is not possible:","type":"text"}]},{"code":["\/\/ ❌ Not possible: Control save and load simultaneously","case .saveButtonTapped:","    \/\/ Control only within CancelID.save boundary","    return .withLock(..., cancelID: CancelID.save)","    ","case .loadButtonTapped:","    \/\/ Control only within CancelID.load boundary (independent from save)","    return .withLock(..., cancelID: CancelID.load)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since these are treated as separate boundaries, load can be executed even while save is running."}]},{"text":"2. Only one Boundary per action","anchor":"2-Only-one-Boundary-per-action","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"You cannot specify multiple Boundaries for a single action:"}],"type":"paragraph"},{"code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","return .withLock(","    operation: { send in \/* ... *\/ },","    lockFailure: { error, send in \/* ... *\/ },","    action: action,","    cancelID: [CancelID.save, CancelID.validate]  \/\/ Multiple specification not allowed",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:","type":"text"}],"type":"paragraph"},{"code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","    return .withLock(..., cancelID: CancelID.fileOperation)"],"type":"codeListing","syntax":"swift"},{"anchor":"Summary","level":2,"type":"heading","text":"Summary"},{"inlineContent":[{"type":"text","text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article","title":"Boundary"},"seeAlsoSections":[{"anchor":"Essentials","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"sections":[],"variants":[{"paths":["\/documentation\/lockman\/boundaryoverview"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"url":"\/documentation\/lockman\/choosingstrategy","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","kind":"article","title":"Error Handling","type":"topic","role":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","type":"topic","kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/Lock":{"abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"kind":"article","title":"Lock","role":"article","type":"topic","url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"role":"article","url":"\/documentation\/lockman\/gettingstarted","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"doc://Lockman/documentation/Lockman/Configuration":{"abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"kind":"article","url":"\/documentation\/lockman\/configuration","type":"topic","title":"Configuration","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"kind":"symbol","url":"\/documentation\/lockman","role":"collection"},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}],"kind":"article","url":"\/documentation\/lockman\/unlock","type":"topic","title":"Unlock"}}}