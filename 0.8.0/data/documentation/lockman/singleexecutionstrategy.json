{"kind":"article","sections":[],"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"metadata":{"roleHeading":"Article","role":"article","title":"SingleExecutionStrategy","modules":[{"name":"Lockman"}]},"seeAlsoSections":[{"title":"Strategies","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}],"type":"paragraph"},{"text":"Execution Modes","type":"heading","level":2,"anchor":"Execution-Modes"},{"inlineContent":[{"type":"text","text":"SingleExecutionStrategy supports three execution modes:"}],"type":"paragraph"},{"text":"none - No Control","type":"heading","level":3,"anchor":"none-No-Control"},{"code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Executes all processing concurrently without exclusive control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}],"type":"unorderedList"},{"text":"boundary - Boundary-level Exclusive Control","type":"heading","level":3,"anchor":"boundary-Boundary-level-Exclusive-Control"},{"code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}]}]}],"type":"unorderedList"},{"text":"action - Action-level Exclusive Control","type":"heading","level":3,"anchor":"action-Action-level-Exclusive-Control"},{"code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Different actions can execute concurrently"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Usage","type":"heading","level":2,"anchor":"Usage"},{"text":"Basic Usage Example","type":"heading","level":3,"anchor":"Basic-Usage-Example"},{"code":["@LockmanSingleExecution","enum Action {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Usage within Effects","type":"heading","level":3,"anchor":"Usage-within-Effects"},{"code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            send(.saveCompleted)","        },","        catch handler: { error, send in","            send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            send(.saveBusy(\"Save process is currently running\"))","        },","        action: .save,","        cancelID: CancelID.userAction","    )"],"syntax":"swift","type":"codeListing"},{"anchor":"Operation-Examples","text":"Operation Examples","level":2,"type":"heading"},{"anchor":"action-mode","text":"action mode","level":3,"type":"heading"},{"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"syntax":null,"type":"codeListing"},{"anchor":"boundary-mode","text":"boundary mode","level":3,"type":"heading"},{"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"syntax":null,"type":"codeListing"},{"text":"Error Handling","type":"heading","anchor":"Error-Handling","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},{"type":"text","text":" page."}]},{"text":"LockmanSingleExecutionError","type":"heading","anchor":"LockmanSingleExecutionError","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}],"type":"strong"},{"text":" - Boundary is already locked","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": ID of the locked boundary"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Existing lock information"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyRunning","type":"text"}]},{"text":" - Same action is already running","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Running action information"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    switch error as? LockmanSingleExecutionError {","    case .boundaryAlreadyLocked(_, let existingInfo):","        send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","    case .actionAlreadyRunning(let existingInfo):","        send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","    default:","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"]}]}],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"type":"topic","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"title":"GroupCoordinationStrategy","role":"article","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","kind":"article","title":"Error Handling","type":"topic","role":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"kind":"article","type":"topic"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"kind":"symbol","url":"\/documentation\/lockman","role":"collection"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","kind":"article","type":"topic","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"kind":"article","type":"topic"}}}