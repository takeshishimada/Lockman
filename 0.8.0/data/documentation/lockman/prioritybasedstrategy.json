{"variants":[{"paths":["\/documentation\/lockman\/prioritybasedstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"title":"Strategies","anchor":"Strategies"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","interfaceLanguage":"swift"},"sections":[],"abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority processing can interrupt low-priority processing to execute, allowing important processing to be handled preferentially.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where high-urgency processing or control based on importance is required.","type":"text"}]},{"type":"heading","level":2,"text":"Priority System","anchor":"Priority-System"},{"type":"heading","level":3,"text":"Priority Levels","anchor":"Priority-Levels"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"high"}]},{"type":"text","text":" - High Priority"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt all other priority processing","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"System-level emergency processing or important user operations"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"low","type":"text"}]},{"text":" - Low Priority","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can interrupt none priority processing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Interrupted by high priority"}]}]},{"content":[{"inlineContent":[{"text":"Regular background processing","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"type":"text","text":" - No Priority"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Bypasses priority system"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not interrupted by other processing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basic processing or temporary disabling","type":"text"}]}]}]},{"type":"heading","text":"Concurrent Execution Control","level":3,"anchor":"Concurrent-Execution-Control"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within the same priority level, control is based on the concurrent execution behavior setting of existing processing:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"exclusive","type":"text"}]},{"type":"text","text":" - Exclusive Execution"}]},{"type":"codeListing","syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Rejects new processing of the same priority","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Protects important processing from interruption","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"replaceable","type":"text"}]},{"text":" - Replaceable Execution","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can be interrupted by new processing of the same priority"}]}]},{"content":[{"inlineContent":[{"text":"Applied to search or update processing","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Usage","level":2,"anchor":"Usage"},{"type":"heading","text":"Basic Usage Example","level":3,"anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanPriorityBased","enum Action {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"]},{"type":"heading","text":"Operation Examples","level":2,"anchor":"Operation-Examples"},{"type":"heading","text":"Interruption by Priority","level":3,"anchor":"Interruption-by-Priority"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"]},{"type":"heading","text":"Control at Same Priority","level":3,"anchor":"Control-at-Same-Priority"},{"type":"codeListing","syntax":null,"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"]},{"type":"heading","text":"Error Handling","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","overridingTitle":"Error Handling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"isActive":true},{"type":"text","text":" page."}]},{"type":"heading","text":"LockmanPriorityBasedError","level":3,"anchor":"LockmanPriorityBasedError"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"higherPriorityExists"}]},{"type":"text","text":" - Higher priority is running"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if case .higherPriorityExists(let requested, let current) = error as? LockmanPriorityBasedError {","        send(.priorityConflict(\"Waiting due to high priority process running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"samePriorityConflict"}],"type":"strong"},{"text":" - Conflict at same priority","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if case .samePriorityConflict(let priority) = error as? LockmanPriorityBasedError {","        send(.busyMessage(\"Process with same priority is running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"precedingActionCancelled"}]},{"type":"text","text":" - Preceding action cancelled"}]},{"type":"codeListing","syntax":"swift","code":["catch handler: { error, send in","    if case .precedingActionCancelled(let cancelledInfo) = error as? LockmanPriorityBasedError {","        send(.processCancelled(\"Interrupted by high priority process\"))","    }","}"]}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"title":"PriorityBasedStrategy","roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article"},"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","kind":"article","title":"Error Handling","type":"topic","role":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"kind":"article","type":"topic"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"title":"GroupCoordinationStrategy","role":"article","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"url":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"kind":"article","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"title":"SingleExecutionStrategy","role":"article","type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"kind":"symbol","url":"\/documentation\/lockman","role":"collection"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"type":"topic","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"title":"CompositeStrategy"}}}