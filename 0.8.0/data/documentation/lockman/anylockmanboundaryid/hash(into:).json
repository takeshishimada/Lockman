{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId"]]},"metadata":{"modules":[{"name":"Lockman"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"text":")","kind":"text"}],"externalID":"s:7Lockman03AnyA10BoundaryIdV4hash4intoys6HasherVz_tF","role":"symbol","roleHeading":"Instance Method","symbolKind":"method","title":"hash(into:)"},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"},"abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different boundary ID types with identical values from colliding.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"hasher","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"kind":"text","text":")"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"hasher","content":[{"type":"paragraph","inlineContent":[{"text":"The hasher to use when combining the components of this instance","type":"text"}]}]}]},{"content":[{"text":"Hash Collision Prevention","type":"heading","level":2,"anchor":"Hash-Collision-Prevention"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"code":"AnyHashable","type":"codeVoice"},{"type":"text","text":" includes type information in its hash, two different"},{"type":"text","text":" "},{"type":"text","text":"types with the same value will produce different hash values, preventing"},{"type":"text","text":" "},{"type":"text","text":"unintended collisions in hash-based collections."}]}],"kind":"content"}],"kind":"symbol","references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","abstract":[{"type":"text","text":"Generates hash values that include type information to prevent"},{"type":"text","text":" "},{"type":"text","text":"different boundary ID types with identical values from colliding."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","title":"hash(into:)"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"kind":"symbol","url":"\/documentation\/lockman","role":"collection"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"url":"\/documentation\/lockman\/anylockmanboundaryid","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","type":"topic","role":"symbol","title":"AnyLockmanBoundaryId","kind":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}]}}}