{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"paths":["\/documentation\/lockman\/lockmandynamicconditionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"externalID":"s:7Lockman0A24DynamicConditionStrategyC","title":"LockmanDynamicConditionStrategy","symbolKind":"class","role":"symbol","modules":[{"name":"Lockman"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanDynamicConditionStrategy","kind":"identifier"}],"roleHeading":"Class"},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"A strategy that evaluates custom conditions at runtime to determine lock availability."}],"topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/init()"],"anchor":"Initializers","title":"Initializers","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/strategyId"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/unlock(id:info:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/I"],"anchor":"Type-Aliases","title":"Type Aliases","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/shared"],"anchor":"Type-Properties","title":"Type Properties","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/makeStrategyId()"],"anchor":"Type-Methods","title":"Type Methods","generated":true}],"relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionStrategy","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LockmanDynamicConditionStrategy"},{"text":" allows you to define arbitrary locking conditions","type":"text"},{"text":" ","type":"text"},{"text":"using closures that are evaluated when the lock is requested. This provides maximum","type":"text"},{"text":" ","type":"text"},{"text":"flexibility for complex business logic scenarios.","type":"text"}]},{"type":"heading","anchor":"Example","level":2,"text":"Example"},{"type":"codeListing","syntax":"swift","code":["\/\/ Business logic condition with custom error","struct PriorityTooLowError: Error {","    let priority: Int","}","","let action = MyAction.fetchData(userId: \"123\", priority: 5)","let conditionalAction = action.with {","    guard priority > 3 else {","        return .failure(PriorityTooLowError(priority: priority))","    }","    return .success","}"]},{"type":"heading","anchor":"Thread-Safety","level":2,"text":"Thread Safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is thread-safe and uses "},{"type":"codeVoice","code":"LockmanState"},{"type":"text","text":" for managing concurrent access."}]}]}],"references":{"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/getCurrentLocks()":{"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/getcurrentlocks()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":" : [any "},{"kind":"typeIdentifier","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"},{"kind":"text","text":"]]"}],"abstract":[{"text":"Returns current locks information for debugging.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/getCurrentLocks()","kind":"symbol","title":"getCurrentLocks()","role":"symbol"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"kind":"symbol","url":"\/documentation\/lockman","role":"collection"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/I":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"I"}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/i","abstract":[],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/I","role":"symbol","title":"LockmanDynamicConditionStrategy.I","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"I"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/shared":{"role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"LockmanDynamicConditionStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A24DynamicConditionStrategyC"}],"title":"shared","abstract":[{"type":"text","text":"Shared singleton instance."}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/shared","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/shared","kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/init()":{"abstract":[{"text":"Creates a new dynamic condition strategy instance.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/init()","role":"symbol","type":"topic","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/init()","kind":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy":{"navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"abstract":[{"type":"text","text":"A strategy that evaluates custom conditions at runtime to determine lock availability."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy","title":"LockmanDynamicConditionStrategy","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionStrategy"}],"type":"topic"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/cleanUp(id:)":{"type":"topic","abstract":[{"text":"Removes all active locks for the specified boundary.","type":"text"}],"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/cleanup(id:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"cleanUp(id:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp(id:)"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/unlock(id:info:)":{"abstract":[{"text":"Releases all locks with the same actionId.","type":"text"}],"title":"unlock(id:info:)","role":"symbol","type":"topic","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/unlock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/unlock(id:info:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"LockmanDynamicConditionInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/lock(id:info:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanDynamicConditionInfo","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Acquires a lock for the specified boundary and action."}],"kind":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/lock(id:info:)","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/lock(id:info:)","title":"lock(id:info:)"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/makeStrategyId()":{"abstract":[{"text":"Creates a strategy identifier for the dynamic condition strategy.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"role":"symbol","title":"makeStrategyId()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/makeStrategyId()","type":"topic","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/makestrategyid()","kind":"symbol"},"doc://Lockman/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/strategyId":{"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/strategyid","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/strategyId","role":"symbol","title":"strategyId","type":"topic","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"strategyId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"abstract":[{"text":"The unique identifier for this strategy instance.","type":"text"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"title":"LockmanStrategy","kind":"symbol","abstract":[{"text":"A protocol defining the core locking operations that all strategies must implement.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","url":"\/documentation\/lockman\/lockmanstrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanStrategy","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"LockmanStrategy","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/canLock(id:info:)":{"url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/canlock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/canLock(id:info:)","kind":"symbol","abstract":[{"type":"text","text":"Evaluates the dynamic condition to determine if a lock can be acquired."}],"role":"symbol","title":"canLock(id:info:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanDynamicConditionInfo","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO"}]},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionStrategy/cleanUp()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"title":"cleanUp()","abstract":[{"text":"Removes all active locks across all boundaries.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionStrategy\/cleanUp()","type":"topic","role":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/cleanup()"}}}