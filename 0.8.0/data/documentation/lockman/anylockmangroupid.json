{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This wrapper enables different types of group identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}],"type":"paragraph"},{"level":2,"anchor":"Type-Erasure-Benefits","text":"Type Erasure Benefits","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"code":"Set<AnyLockmanGroupId>","type":"codeVoice"},{"type":"text","text":" with mixed group ID types"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Maintains value semantics and equality comparison"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Thread-Safety","text":"Thread Safety","type":"heading"},{"inlineContent":[{"text":"Marked as ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"text":" because ","type":"text"},{"type":"codeVoice","code":"AnyHashable"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Usage-Example","text":"Usage Example","type":"heading"},{"code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"],"syntax":"swift","type":"codeListing"}]}],"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":", allowing heterogeneous group IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"metadata":{"title":"AnyLockmanGroupId","modules":[{"name":"Lockman"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"role":"symbol","externalID":"s:7Lockman03AnyA7GroupIdV","symbolKind":"struct","roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}]},"topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"anchor":"Operators","title":"Operators","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"],"anchor":"Initializers","title":"Initializers","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations","generated":true}],"variants":[{"paths":["\/documentation\/lockman\/anylockmangroupid"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"doc://Lockman/s8CopyableP":{"type":"unresolvable","title":"Swift.Copyable","identifier":"doc:\/\/Lockman\/s8CopyableP"},"doc://Lockman/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"title":"CustomDebugStringConvertible Implementations","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","abstract":[],"type":"topic","role":"collectionGroup","kind":"article"},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","kind":"symbol","role":"symbol","abstract":[{"text":"Compares two ","type":"text"},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" values.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"==(_:_:)"},"doc://Lockman/documentation/Lockman":{"title":"Lockman","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"kind":"symbol","url":"\/documentation\/lockman","role":"collection"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"title":"Equatable Implementations","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","abstract":[],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations","type":"topic","role":"collectionGroup","kind":"article"},"doc://Lockman/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/Lockman\/SQ","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"title":"hash(into:)","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different group ID types with identical values from colliding.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"title":"AnyLockmanGroupId","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":", allowing heterogeneous group IDs","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"url":"\/documentation\/lockman\/anylockmangroupid","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","type":"topic","role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":"."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:7Lockman0A7GroupIda","kind":"typeIdentifier","text":"LockmanGroupId"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","title":"init(_:)"}}}