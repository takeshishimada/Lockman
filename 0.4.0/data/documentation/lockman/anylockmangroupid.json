{"topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"generated":true,"anchor":"Operators","title":"Operators"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"],"generated":true,"anchor":"Initializers","title":"Initializers"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"sections":[],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmangroupid"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"This wrapper enables different types of group identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}],"type":"paragraph"},{"type":"heading","anchor":"Type-Erasure-Benefits","level":2,"text":"Type Erasure Benefits"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Allows ","type":"text"},{"type":"codeVoice","code":"Set<AnyLockmanGroupId>"},{"text":" with mixed group ID types","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Thread-Safety","level":2,"text":"Thread Safety"},{"inlineContent":[{"type":"text","text":"Marked as "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" because "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}],"type":"paragraph"},{"type":"heading","anchor":"Usage-Example","level":2,"text":"Usage Example"},{"type":"codeListing","syntax":"swift","code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"modules":[{"name":"Lockman"}],"externalID":"s:7Lockman03AnyA7GroupIdV","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","title":"AnyLockmanGroupId","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"role":"symbol"},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"title":"hash(into:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Generates hash values that include type information to prevent"},{"type":"text","text":" "},{"type":"text","text":"different group ID types with identical values from colliding."}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","abstract":[],"title":"CustomDebugStringConvertible Implementations"},"doc://Lockman/s8CopyableP":{"title":"Swift.Copyable","identifier":"doc:\/\/Lockman\/s8CopyableP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"abstract":[{"text":"Compares two ","type":"text"},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"type":"codeVoice","code":"AnyHashable"},{"text":" values.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","type":"topic","kind":"symbol","title":"==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/Lockman\/SQ","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"url":"\/documentation\/lockman\/anylockmangroupid","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","kind":"symbol","title":"AnyLockmanGroupId"},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"title":"Equatable Implementations","role":"collectionGroup","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations","kind":"article","abstract":[],"url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/SH":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SH","title":"Swift.Hashable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanGroupId","preciseIdentifier":"s:7Lockman0A7GroupIda","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","title":"init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","type":"topic","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":"."}]}}}