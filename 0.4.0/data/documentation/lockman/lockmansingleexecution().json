{"sections":[],"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for single execution locking behavior."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","preciseIdentifier":"s:7Lockman0A21SingleExecutionActionP","text":"LockmanSingleExecutionAction","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Apply this macro to an enum declaration to automatically generate:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"actionName","type":"codeVoice"},{"text":" property that returns the enum case name as a String","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Important","type":"text"}]},{"type":"text","text":": You must implement the "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property to specify the execution mode:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".none"},{"type":"text","text":": No exclusive execution (always allows locks)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".boundary"},{"text":": Only one action per boundary at a time (default behavior)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".action"},{"text":": Only one instance of the same actionId at a time","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Example usage with TCA:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct MyFeature {","  @LockmanSingleExecution","  enum Action {","    case login","    case logout","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .login:","        return .init(actionId: actionName, mode: .boundary)","      case .logout:","        return .init(actionId: actionName, mode: .action)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .login:","        return .withLock(","          operation: { send in","            \/\/ async work","          },","          action: .login,","          cancelID: \"login-operation\"","        )","      \/\/ ...","      }","    }","  }","}"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmansingleexecution()"]}],"metadata":{"role":"symbol","title":"LockmanSingleExecution()","symbolKind":"macro","roleHeading":"Macro","modules":[{"name":"Lockman"}],"externalID":"s:7Lockman0A15SingleExecutionyycfm","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecution"},{"kind":"text","text":"()"}]},"kind":"symbol","references":{"doc://Lockman/documentation/Lockman/LockmanSingleExecutionAction":{"title":"LockmanSingleExecutionAction","type":"topic","abstract":[{"text":"A specialized ","type":"text"},{"code":"LockmanAction","type":"codeVoice"},{"text":" for single-execution locking semantics.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","role":"symbol","url":"\/documentation\/lockman\/lockmansingleexecutionaction"},"Lockman.png":{"type":"image","identifier":"Lockman.png","alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}]},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/LockmanSingleExecution()":{"title":"LockmanSingleExecution()","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for single execution locking behavior."}],"type":"topic","kind":"symbol","url":"\/documentation\/lockman\/lockmansingleexecution()","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecution"},{"kind":"text","text":"()"}]}}}