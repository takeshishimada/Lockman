{"abstract":[{"text":"Releases a previously acquired lock for the specified boundary and action.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanSingleExecutionInfo","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionInfo","preciseIdentifier":"s:7Lockman0A19SingleExecutionInfoV"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"id","content":[{"inlineContent":[{"type":"text","text":"The boundary identifier whose lock should be released"}],"type":"paragraph"}]},{"name":"info","content":[{"inlineContent":[{"type":"text","text":"The exact lock information that was used when acquiring the lock"}],"type":"paragraph"}]}]},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Removes the specific lock information from the internal state using the"},{"type":"text","text":" "},{"type":"text","text":"instanceâ€™s "},{"code":"uniqueId","type":"codeVoice"},{"type":"text","text":". This provides precise lock management and prevents"},{"type":"text","text":" "},{"type":"text","text":"unintended removal of other locks with the same "},{"code":"actionId","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"text":"Instance-Specific Removal","anchor":"Instance-Specific-Removal","type":"heading"},{"inlineContent":[{"text":"Only the exact ","type":"text"},{"type":"codeVoice","code":"info"},{"text":" instance that was passed to ","type":"text"},{"type":"codeVoice","code":"lock()"},{"text":" is removed.","type":"text"},{"text":" ","type":"text"},{"text":"Other instances with the same ","type":"text"},{"type":"codeVoice","code":"actionId"},{"text":" but different ","type":"text"},{"type":"codeVoice","code":"uniqueId"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"text":"remain unaffected.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Rationale for uniqueId-based Removal","anchor":"Rationale-for-uniqueId-based-Removal","type":"heading"},{"inlineContent":[{"type":"text","text":"Using "},{"code":"uniqueId","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"actionId","type":"codeVoice"},{"type":"text","text":" for removal provides:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Precision","type":"text"}]},{"type":"text","text":": Only removes the specific lock instance that was acquired"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety"}]},{"type":"text","text":": Prevents accidental removal of other locks with the same actionId"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Consistency"}]},{"type":"text","text":": Maintains 1:1 correspondence between lock() and unlock() calls"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Flexibility","type":"text"}]},{"text":": Allows multiple lock instances with the same actionId in different scenarios","type":"text"}]}]}]},{"level":2,"text":"Example","anchor":"Example","type":"heading"},{"code":["let info1 = LockmanSingleExecutionInfo(actionId: \"sync\")","let info2 = LockmanSingleExecutionInfo(actionId: \"sync\")  \/\/ Same actionId, different uniqueId","","\/\/ Hypothetical scenario where both could be locked on different boundaries","strategy.lock(id: boundary1, info: info1)","strategy.lock(id: boundary2, info: info2)","","\/\/ Unlock only removes the specific instance","strategy.unlock(id: boundary1, info: info1)  \/\/ Only removes info1","\/\/ info2 remains locked on boundary2"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/lockman\/lockmansingleexecutionstrategy\/unlock(id:info:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionStrategy"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanSingleExecutionInfo","preciseIdentifier":"s:7Lockman0A19SingleExecutionInfoV"},{"kind":"text","text":")"}],"roleHeading":"Instance Method","modules":[{"name":"Lockman"}],"title":"unlock(id:info:)","externalID":"s:7Lockman0A23SingleExecutionStrategyC6unlock2id4infoyx_AA0abC4InfoVtSHRzs8SendableRzlF","symbolKind":"method","role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionStrategy\/unlock(id:info:)"},"kind":"symbol","references":{"doc://Lockman/documentation/Lockman/LockmanSingleExecutionInfo":{"role":"symbol","url":"\/documentation\/lockman\/lockmansingleexecutioninfo","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionInfo","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecutionInfo"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanSingleExecutionInfo"}],"abstract":[{"type":"text","text":"Information required for single-execution locking behavior."}],"title":"LockmanSingleExecutionInfo","kind":"symbol"},"Lockman.png":{"identifier":"Lockman.png","type":"image","alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}]},"doc://Lockman/documentation/Lockman/LockmanSingleExecutionStrategy/unlock(id:info:)":{"title":"unlock(id:info:)","kind":"symbol","type":"topic","url":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/unlock(id:info:)","role":"symbol","abstract":[{"text":"Releases a previously acquired lock for the specified boundary and action.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"text":": ","kind":"text"},{"text":"LockmanSingleExecutionInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A19SingleExecutionInfoV"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionStrategy\/unlock(id:info:)"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/LockmanSingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecutionStrategy","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/lockman\/lockmansingleexecutionstrategy","title":"LockmanSingleExecutionStrategy","navigatorTitle":[{"text":"LockmanSingleExecutionStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A locking strategy that provides flexible execution control within a boundary."}]}}}