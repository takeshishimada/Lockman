{"metadata":{"title":"cleanUp()","modules":[{"name":"Lockman"}],"role":"symbol","symbolKind":"method","externalID":"s:7Lockman03AnyA8StrategyV7cleanUpyyF","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy\/cleanup()"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()"},"kind":"symbol","abstract":[{"text":"Removes all lock information across all boundaries.","type":"text"}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This method provides a global reset mechanism by clearing all internal lock state"},{"type":"text","text":" "},{"type":"text","text":"from the underlying strategy. Itâ€™s typically used during:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Application shutdown sequences"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Test suite cleanup between test cases","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Emergency reset scenarios during development"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory pressure response"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"Scope-of-Operation","text":"Scope of Operation","type":"heading"},{"inlineContent":[{"text":"This method affects ","type":"text"},{"inlineContent":[{"type":"text","text":"all boundaries"}],"type":"strong"},{"text":" managed by the underlying strategy,","type":"text"},{"text":" ","type":"text"},{"text":"not just those accessed through this particular wrapper instance.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Thread-Safety","text":"Thread Safety","type":"heading"},{"inlineContent":[{"type":"text","text":"The operation is atomic with respect to other strategy operations, but"},{"type":"text","text":" "},{"type":"text","text":"callers should be aware that concurrent operations may be affected."}],"type":"paragraph"},{"level":2,"anchor":"Side-Effects","text":"Side Effects","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"All active locks are immediately released","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lock state tracking is reset to initial conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pending operations may receive unexpected unlock notifications","type":"text"}]}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"kind":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","title":"cleanUp()","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"type":"topic","title":"AnyLockmanStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy"}}}