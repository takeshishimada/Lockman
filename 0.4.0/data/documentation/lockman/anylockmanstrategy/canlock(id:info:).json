{"sections":[],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"canLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult","kind":"typeIdentifier"}],"role":"symbol","title":"canLock(id:info:)","modules":[{"name":"Lockman"}],"symbolKind":"method","externalID":"s:7Lockman03AnyA8StrategyV7canLock2id4infoAA0A6ResultOqd___xtSHRd__s8SendableRd__lF","roleHeading":"Instance Method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)"},"abstract":[{"text":"Checks if a lock can be acquired for the given boundary and information.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO","text":"LockmanResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"id","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A unique boundary identifier conforming to "},{"type":"codeVoice","code":"LockmanBoundaryId"}]}]},{"name":"info","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lock information of type "},{"code":"I","type":"codeVoice"}]}]}]},{"content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"LockmanResult"},{"type":"text","text":" indicating whether the lock can be acquired"}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method delegates to the concrete strategyâ€™s implementation through the"},{"type":"text","text":" "},{"type":"text","text":"captured closure, maintaining identical behavior while hiding the concrete type."}]},{"type":"heading","text":"Delegation Pattern","level":2,"anchor":"Delegation-Pattern"},{"type":"paragraph","inlineContent":[{"text":"The type-erased wrapper acts as a transparent proxy, forwarding all calls to the","type":"text"},{"text":" ","type":"text"},{"text":"underlying concrete strategy without modification. This ensures that the behavior","type":"text"},{"text":" ","type":"text"},{"text":"is identical to calling the concrete strategy directly.","type":"text"}]},{"type":"heading","text":"Error Handling","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"text":"Any errors thrown by the concrete strategy are propagated unchanged through this wrapper.","type":"text"},{"text":" ","type":"text"},{"text":"The wrapper does not add its own error handling or modification.","type":"text"}]}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO"}],"abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"title":"canLock(id:info:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"type":"topic","title":"AnyLockmanStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy"},"Lockman.png":{"type":"image","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/documentation/Lockman/LockmanResult":{"navigatorTitle":[{"text":"LockmanResult","kind":"identifier"}],"abstract":[{"type":"text","text":"The result of attempting to acquire a lock."}],"url":"\/documentation\/lockman\/lockmanresult","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanResult","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanResult","title":"LockmanResult","role":"symbol","kind":"symbol","type":"topic"}}}