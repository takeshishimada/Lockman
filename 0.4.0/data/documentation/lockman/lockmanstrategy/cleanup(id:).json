{"sections":[],"abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"id","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The identifier whose lock information should be removed"}]}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"This method provides targeted cleanup for specific boundary identifiers,"},{"type":"text","text":" "},{"type":"text","text":"allowing fine-grained control over which lock state to clear while"},{"type":"text","text":" "},{"type":"text","text":"leaving other boundaries unaffected."}],"type":"paragraph"},{"type":"heading","text":"Use Cases","anchor":"Use-Cases","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Feature-specific cleanup when a component is deallocated"}]}]},{"content":[{"inlineContent":[{"text":"User session cleanup when a user logs out","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Scoped cleanup for temporary contexts"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Partial system resets during development"}],"type":"paragraph"}]}]},{"type":"heading","text":"Implementation Guidelines","anchor":"Implementation-Guidelines","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Should only affect locks associated with the specified boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Should not fail if no locks exist for the boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Should preserve locks for other boundaries","type":"text"}]}]}]}]}],"metadata":{"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"title":"cleanUp(id:)","required":true,"externalID":"s:7Lockman0A8StrategyP7cleanUp2idyqd___tSHRd__s8SendableRd__lF","role":"symbol","roleHeading":"Instance Method","modules":[{"name":"Lockman"}]},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy"]]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp(id:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/lockman\/lockmanstrategy\/cleanup(id:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/LockmanStrategy/cleanUp(id:)":{"required":true,"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/cleanUp(id:)","url":"\/documentation\/lockman\/lockmanstrategy\/cleanup(id:)","title":"cleanUp(id:)","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}]},"Lockman.png":{"type":"image","identifier":"Lockman.png","alt":"Lockman logo","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}]},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"type":"topic","url":"\/documentation\/lockman\/lockmanstrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"title":"LockmanStrategy","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy"}}}