{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId"},"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"generated":true,"anchor":"Operators","title":"Operators"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"generated":true,"anchor":"Initializers","title":"Initializers"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"platforms":["macOS"]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"inlineContent":[{"text":"This wrapper enables different types of boundary identifiers to coexist in the same","type":"text"},{"text":" ","type":"text"},{"text":"collection while maintaining type safety for hashing and equality operations.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Type Erasure Benefits","anchor":"Type-Erasure-Benefits"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"code":"Dictionary<AnyLockmanBoundaryId, Value>","type":"codeVoice"},{"type":"text","text":" with mixed key types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"text":"Thread Safety","anchor":"Thread-Safety"},{"inlineContent":[{"text":"Marked as ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"text":" because ","type":"text"},{"type":"codeVoice","code":"AnyHashable"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Usage Example","anchor":"Usage-Example"},{"type":"codeListing","syntax":"swift","code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanboundaryid"]}],"relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"Lockman"}],"navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"role":"symbol","externalID":"s:7Lockman03AnyA10BoundaryIdV","symbolKind":"struct","title":"AnyLockmanBoundaryId","roleHeading":"Structure"},"kind":"symbol","references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","role":"symbol","title":"init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanBoundaryId","preciseIdentifier":"s:7Lockman0A10BoundaryIda","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","abstract":[{"text":"Creates a new ","type":"text"},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":".","type":"text"}],"type":"topic"},"doc://Lockman/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","abstract":[{"text":"Compares two ","type":"text"},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" values.","type":"text"}],"title":"==(_:_:)","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"title":"hash(into:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","kind":"symbol","type":"topic","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different boundary ID types with identical values from colliding.","type":"text"}]},"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","role":"collectionGroup","title":"Equatable Implementations","abstract":[]},"doc://Lockman/SQ":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"type":"topic","navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"title":"AnyLockmanBoundaryId"}}}