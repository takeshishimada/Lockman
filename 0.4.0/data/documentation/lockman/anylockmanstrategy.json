{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"I","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"anchor":"Purpose","level":2,"text":"Purpose","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"AnyLockmanStrategy"},{"type":"text","text":" solves the fundamental problem of storing different concrete"},{"type":"text","text":" "},{"type":"text","text":"strategy implementations in the same collection. Without type erasure, you cannot"},{"type":"text","text":" "},{"type":"text","text":"store "},{"type":"codeVoice","code":"LockmanSingleExecutionStrategy"},{"type":"text","text":" and "},{"type":"codeVoice","code":"LockmanPriorityBasedStrategy"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"same array, even though they both conform to "},{"type":"codeVoice","code":"LockmanStrategy"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Key-Benefits","level":2,"text":"Key Benefits","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Heterogeneous Collections","type":"text"}]},{"type":"text","text":": Store different strategy implementations together"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}],"type":"strong"},{"type":"text","text":": Choose strategies dynamically based on conditions"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"API Boundaries","type":"text"}],"type":"strong"},{"type":"text","text":": Hide concrete strategy types from public interfaces"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Dependency Injection"}]},{"type":"text","text":": Enable flexible strategy registration and resolution"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Universal Compatibility","type":"text"}],"type":"strong"},{"text":": Support both class and struct strategy implementations","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Type-Safety-Guarantees","level":2,"text":"Type Safety Guarantees","type":"heading"},{"inlineContent":[{"text":"While the concrete strategy type is erased, type safety for lock information ","type":"text"},{"code":"I","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is preserved at the ","type":"text"},{"code":"AnyLockmanStrategy","type":"codeVoice"},{"text":" level. This means you cannot accidentally","type":"text"},{"text":" ","type":"text"},{"text":"use ","type":"text"},{"code":"LockmanSingleExecutionInfo","type":"codeVoice"},{"text":" with a priority-based strategy wrapper.","type":"text"}],"type":"paragraph"},{"anchor":"Performance-Considerations","level":2,"text":"Performance Considerations","type":"heading"},{"inlineContent":[{"type":"text","text":"Type erasure introduces a small runtime overhead due to function pointer indirection."},{"type":"text","text":" "},{"type":"text","text":"However, this cost is typically negligible compared to the actual locking operations"},{"type":"text","text":" "},{"type":"text","text":"and is justified by the flexibility gained."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"symbolKind":"struct","title":"AnyLockmanStrategy","roleHeading":"Structure","modules":[{"name":"Lockman"}],"externalID":"s:7Lockman03AnyA8StrategyV","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy"]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"],"anchor":"Initializers","generated":true},{"title":"Instance Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"],"anchor":"Instance-Properties","generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)"],"anchor":"Instance-Methods","generated":true},{"title":"Type Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"],"anchor":"Type-Methods","generated":true}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo"}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(id:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"cleanUp(id:)","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(id:)","role":"symbol","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)"},"Lockman.png":{"identifier":"Lockman.png","type":"image","alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"type":"topic","title":"AnyLockmanStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"type":"topic","url":"\/documentation\/lockman\/lockmanstrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"title":"LockmanStrategy","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)","abstract":[{"text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation.","type":"text"}],"type":"topic","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns current locks information for debugging."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","title":"getCurrentLocks()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":" : [any ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP"},{"text":"]]","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO"}],"abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"title":"canLock(id:info:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"kind":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","title":"cleanUp()","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"kind":"symbol","abstract":[{"type":"text","text":"Creates a strategy identifier for the type-erased strategy."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","title":"makeStrategyId()","type":"topic","role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV","text":"LockmanStrategyId"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(id:info:)":{"abstract":[{"text":"Attempts to acquire a lock for the given boundary and information.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","kind":"symbol","title":"lock(id:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)","type":"topic","role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"type":"topic","title":"unlock(id:info:)","abstract":[{"text":"Releases a previously acquired lock.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strategyId","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A10StrategyIdV","text":"LockmanStrategyId","kind":"typeIdentifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId","abstract":[{"text":"The identifier for this type-erased strategy.","type":"text"}],"title":"strategyId","role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanInfo":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanInfo"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","navigatorTitle":[{"kind":"identifier","text":"LockmanInfo"}],"url":"\/documentation\/lockman\/lockmaninfo","kind":"symbol","abstract":[{"text":"Represents information required by Lockman locking strategies.","type":"text"}],"title":"LockmanInfo","role":"symbol","type":"topic"}}}