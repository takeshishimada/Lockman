{"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/lockman\/lockmanconcurrencylimited()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimitedAction","kind":"typeIdentifier","text":"LockmanConcurrencyLimitedAction","preciseIdentifier":"s:7Lockman0A24ConcurrencyLimitedActionP"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(actionName)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanConcurrencyLimited"},{"kind":"text","text":"()"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Protocol conformance to ","type":"text"},{"code":"LockmanConcurrencyLimitedAction","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Important"}],"type":"strong"},{"type":"text","text":": You must implement the "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property to specify concurrency limits:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Using a predefined concurrency group: ","type":"text"},{"code":".init(actionId: actionName, group: MyConcurrencyGroup.apiRequests)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Using direct limit: "},{"code":".init(actionId: actionName, .limited(3))","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Using unlimited: "},{"type":"codeVoice","code":".init(actionId: actionName, .unlimited)"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Example usage with TCA:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Define your concurrency groups","enum MyConcurrencyGroup: ConcurrencyGroup {","  case apiRequests","  case fileOperations","  case uiUpdates","","  var id: String {","    switch self {","    case .apiRequests: return \"api_requests\"","    case .fileOperations: return \"file_operations\"","    case .uiUpdates: return \"ui_updates\"","    }","  }","","  var limit: ConcurrencyLimit {","    switch self {","    case .apiRequests: return .limited(3)","    case .fileOperations: return .limited(2)","    case .uiUpdates: return .unlimited","    }","  }","}","","@Reducer","struct MyFeature {","  @LockmanConcurrencyLimited","  enum Action {","    case fetchUserProfile(User.ID)","    case uploadFile(File)","    case refreshUI","","    var lockmanInfo: LockmanConcurrencyLimitedInfo {","      switch self {","      case .fetchUserProfile:","        \/\/ Use predefined group","        return .init(actionId: actionName, group: MyConcurrencyGroup.apiRequests)","      case .uploadFile:","        \/\/ Use predefined group","        return .init(actionId: actionName, group: MyConcurrencyGroup.fileOperations)","      case .refreshUI:","        \/\/ Direct unlimited","        return .init(actionId: actionName, .unlimited)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchUserProfile(let userId):","        return .withLock(","          operation: { send in","            \/\/ Only 3 concurrent API requests allowed","            let profile = try await api.fetchProfile(userId)","            await send(.profileFetched(profile))","          },","          action: .fetchUserProfile(userId),","          cancelID: \"fetch-profile-\\(userId)\"","        )","      \/\/ ...","      }","    }","  }","}"]}]}],"sections":[],"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for concurrency-limited locking behavior."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimited()"},"metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanConcurrencyLimited"},{"kind":"text","text":"()"}],"externalID":"s:7Lockman0A18ConcurrencyLimitedyycfm","modules":[{"name":"Lockman"}],"roleHeading":"Macro","title":"LockmanConcurrencyLimited()","role":"symbol","symbolKind":"macro"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","role":"collection","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"title":"Lockman"},"doc://Lockman/documentation/Lockman/LockmanConcurrencyLimitedAction":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanConcurrencyLimitedAction","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/lockman\/lockmanconcurrencylimitedaction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimitedAction","abstract":[{"text":"Protocol for actions that support concurrency limiting.","type":"text"}],"title":"LockmanConcurrencyLimitedAction","type":"topic","navigatorTitle":[{"text":"LockmanConcurrencyLimitedAction","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/LockmanConcurrencyLimited()":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimited()","kind":"symbol","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for concurrency-limited locking behavior."}],"title":"LockmanConcurrencyLimited()","url":"\/documentation\/lockman\/lockmanconcurrencylimited()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanConcurrencyLimited","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol"},"Lockman.png":{"identifier":"Lockman.png","alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image"}}}