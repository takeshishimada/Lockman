name: Test

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    types: [ready_for_review]
    branches:
      - main
      - develop
      - 'feature/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Swift ${{ matrix.swift }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          # Swift 5.9
          - os: macos-14
            swift: '5.9'
            xcode: '15.2'
          
          # Swift 6.0
          - os: macos-15
            swift: '6.0'
            xcode: '16.0'
          
          # Latest (Swift 6.1)
          - os: macos-latest
            swift: 'latest'
            xcode: 'latest-stable'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        if: matrix.xcode != 'latest-stable'
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app

      - name: Swift version
        run: swift --version

      - name: Cache Swift PM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ matrix.swift }}-${{ hashFiles('**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ matrix.swift }}-
            ${{ runner.os }}-spm-

      # Test on macOS
      - name: Test macOS
        run: |
          set -e
          swift build --build-tests
          swift test --enable-code-coverage --parallel

      # Extract and convert coverage
      - name: Generate coverage report
        if: matrix.swift != '5.9'  # Code coverage may have issues with older Swift
        run: |
          set -e
          # Find the correct path for coverage data
          COV_BIN=$(find .build -name 'LockmanPackageTests' -type f -perm +111 | grep -E '\.xctest/Contents/MacOS/LockmanPackageTests$' | head -n 1)
          if [ -z "$COV_BIN" ]; then
            echo "Could not find test binary"
            exit 1
          fi
          
          # Find profdata
          PROF_DATA=$(find .build -name 'default.profdata' -type f | head -n 1)
          if [ -z "$PROF_DATA" ]; then
            echo "Could not find profdata"
            exit 1
          fi
          
          # Generate lcov format
          xcrun llvm-cov export \
            "$COV_BIN" \
            -instr-profile="$PROF_DATA" \
            -format="lcov" > coverage.lcov

      - name: Upload coverage to Codecov
        if: matrix.swift != '5.9'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.lcov
          flags: unittests,swift${{ matrix.swift }}
          name: swift-${{ matrix.swift }}-${{ matrix.os }}
          fail_ci_if_error: false  # Don't fail if coverage upload fails

  test-platforms:
    name: Test Platforms
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Cache Swift PM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-platforms-${{ hashFiles('**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-platforms-

      # Test iOS
      - name: Test iOS
        run: |
          xcodebuild test \
            -scheme Lockman-Package \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
            -skipMacroValidation \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      # Test tvOS
      - name: Test tvOS
        run: |
          xcodebuild test \
            -scheme Lockman-Package \
            -destination "platform=tvOS Simulator,name=Apple TV,OS=latest" \
            -skipMacroValidation \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      # Build watchOS (can't test on simulator)
      - name: Build watchOS
        run: |
          xcodebuild build \
            -scheme Lockman-Package \
            -destination "platform=watchOS Simulator,name=Apple Watch Series 9 (45mm),OS=latest" \
            -skipMacroValidation \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

  coverage-check:
    name: Coverage Check
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for coverage processing
        run: sleep 30

      - name: Check coverage threshold
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false