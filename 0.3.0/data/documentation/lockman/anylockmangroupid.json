{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmangroupid"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper enables different types of group identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}]},{"type":"heading","anchor":"Type-Erasure-Benefits","level":2,"text":"Type Erasure Benefits"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows ","type":"text"},{"code":"Set<AnyLockmanGroupId>","type":"codeVoice"},{"text":" with mixed group ID types","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}]}]}]},{"type":"heading","anchor":"Thread-Safety","level":2,"text":"Thread Safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Marked as "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" because "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}]},{"type":"heading","anchor":"Usage-Example","level":2,"text":"Usage Example"},{"type":"codeListing","syntax":"swift","code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"]}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"roleHeading":"Structure","modules":[{"name":"Lockman"}],"role":"symbol","title":"AnyLockmanGroupId","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"externalID":"s:7Lockman03AnyA7GroupIdV","symbolKind":"struct"},"topicSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"anchor":"Operators","title":"Operators"},{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"],"anchor":"Initializers","title":"Initializers"},{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"],"anchor":"Instance-Methods","title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"kind":"symbol","relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"title":"Conforms To"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different group ID types with identical values from colliding.","type":"text"}],"url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","title":"hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"abstract":[],"title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"},"doc://Lockman/SQ":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"title":"==(_:_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","type":"topic","abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" instances for equality by comparing their underlying "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" values."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible"},"doc://Lockman/SH":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SH","title":"Swift.Hashable"},"Lockman.png":{"variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo","type":"image","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","type":"topic","title":"Lockman","role":"collection","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","images":[{"identifier":"Lockman.png","type":"icon"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"type":"topic","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","url":"\/documentation\/lockman\/anylockmangroupid","title":"AnyLockmanGroupId","role":"symbol"},"doc://Lockman/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable"},"doc://Lockman/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8CopyableP","title":"Swift.Copyable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"LockmanGroupId","preciseIdentifier":"s:7Lockman0A7GroupIda"},{"kind":"text","text":")"}],"title":"init(_:)","abstract":[{"text":"Creates a new ","type":"text"},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","role":"symbol","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"abstract":[],"title":"CustomDebugStringConvertible Implementations","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations"}}}