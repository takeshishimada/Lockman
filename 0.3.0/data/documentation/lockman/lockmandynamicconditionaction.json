{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionAction"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanAction","preciseIdentifier":"s:7Lockman0A6ActionP","kind":"typeIdentifier","text":"LockmanAction"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Conforming types can create lock info with custom conditions that are evaluated at runtime."}],"type":"paragraph"},{"text":"Example","level":2,"anchor":"Example","type":"heading"},{"code":["@LockmanDynamicCondition","enum MyAction {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","}","","\/\/ Usage","let action = MyAction.fetchData(userId: \"123\", priority: 5)","let info = action.with {","    guard priority > 3 else {","        return .failure(LockmanDynamicConditionError.conditionNotMet(","            actionId: \"fetchData\",","            hint: \"Priority too low\"","        ))","    }","    return .success","}","","try await withLock(info, in: boundary) {","    \/\/ Execute","}"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/lockman\/lockmandynamicconditionaction"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"A protocol for actions that support dynamic condition-based locking."}],"sections":[],"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/actionName"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/with(condition:)-9p83x"],"generated":true}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"role":"symbol","symbolKind":"protocol","externalID":"s:7Lockman0A22DynamicConditionActionP","title":"LockmanDynamicConditionAction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"identifier"}]},"relationshipsSections":[{"kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanAction","doc:\/\/Lockman\/s8SendableP"],"type":"inheritsFrom"}],"references":{"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction/with(condition:)-9p83x":{"title":"with(condition:)","url":"\/documentation\/lockman\/lockmandynamicconditionaction\/with(condition:)-9p83x","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/with(condition:)-9p83x","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"with","kind":"identifier"},{"text":"(","kind":"text"},{"text":"condition","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"LockmanDynamicConditionInfo","preciseIdentifier":"s:7Lockman0A20DynamicConditionInfoV","kind":"typeIdentifier"}],"abstract":[{"text":"Creates lock info with a custom condition.","type":"text"}],"role":"symbol","kind":"symbol","required":true,"defaultImplementations":1},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"url":"\/documentation\/lockman\/lockmandynamicconditionaction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"abstract":[{"text":"A protocol for actions that support dynamic condition-based locking.","type":"text"}],"navigatorTitle":[{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","kind":"symbol","title":"LockmanDynamicConditionAction"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction/actionName":{"title":"actionName","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"actionName"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"url":"\/documentation\/lockman\/lockmandynamicconditionaction\/actionname","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction\/actionName","role":"symbol","type":"topic","required":true,"abstract":[{"type":"text","text":"The name of the action, typically the enum case name."}]},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Lockman/documentation/Lockman/LockmanAction":{"abstract":[{"text":"An action that participates in Lockmanâ€™s locking mechanism.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/lockmanaction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanAction","navigatorTitle":[{"text":"LockmanAction","kind":"identifier"}],"role":"symbol","title":"LockmanAction","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanAction","kind":"identifier"}]},"Lockman.png":{"alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"identifier":"Lockman.png","type":"image"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","type":"topic","title":"Lockman","role":"collection","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","images":[{"identifier":"Lockman.png","type":"icon"}]}}}