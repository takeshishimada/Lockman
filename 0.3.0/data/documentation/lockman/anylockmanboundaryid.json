{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}]}]},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This wrapper enables different types of boundary identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}],"type":"paragraph"},{"text":"Type Erasure Benefits","level":2,"anchor":"Type-Erasure-Benefits","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows ","type":"text"},{"code":"Dictionary<AnyLockmanBoundaryId, Value>","type":"codeVoice"},{"text":" with mixed key types","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Thread-Safety","level":2,"type":"heading","text":"Thread Safety"},{"type":"paragraph","inlineContent":[{"text":"Marked as ","type":"text"},{"code":"@unchecked Sendable","type":"codeVoice"},{"text":" because ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}]},{"anchor":"Usage-Example","level":2,"type":"heading","text":"Usage Example"},{"syntax":"swift","code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"],"type":"codeListing"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"AnyLockmanBoundaryId","role":"symbol","roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"Lockman"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"externalID":"s:7Lockman03AnyA10BoundaryIdV"},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo"}],"topicSections":[{"title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"generated":true,"anchor":"Operators"},{"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"generated":true,"anchor":"Initializers"},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"generated":true,"anchor":"Instance-Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"variants":[{"paths":["\/documentation\/lockman\/anylockmanboundaryid"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"title":"init(_:)","abstract":[{"text":"Creates a new ","type":"text"},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10BoundaryIda","text":"LockmanBoundaryId"},{"kind":"text","text":")"}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"kind":"symbol","title":"AnyLockmanBoundaryId","type":"topic","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId"},"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"title":"==(_:_:)","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","role":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"type":"topic","abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"type":"text","text":" instances for equality by comparing their underlying "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" values."}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"kind":"article","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations"},"doc://Lockman/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/Lockman\/SQ"},"doc://Lockman/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","kind":"symbol","abstract":[{"type":"text","text":"Generates hash values that include type information to prevent"},{"type":"text","text":" "},{"type":"text","text":"different boundary ID types with identical values from colliding."}],"title":"hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV","text":"Hasher"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","role":"symbol"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","type":"topic","title":"Lockman","role":"collection","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","images":[{"identifier":"Lockman.png","type":"icon"}]}}}