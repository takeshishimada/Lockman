{"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related operations as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Group System","anchor":"Group-System"},{"level":3,"type":"heading","text":"Coordination Roles","anchor":"Coordination-Roles"},{"inlineContent":[{"text":"Group coordination uses roles to define how actions participate in group operations:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"none"}],"type":"strong"},{"type":"text","text":" - Non-exclusive Participant"}],"type":"paragraph"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate regardless of group state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Auxiliary operations such as UI updates or logging"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"leader","type":"text"}],"type":"strong"},{"text":" - Group Leader","type":"text"}],"type":"paragraph"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Role to start group activities","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables member participation"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"member"}]},{"type":"text","text":" - Group Member"}],"type":"paragraph"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate in active groups"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Executes when leader or other participants are present"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responsible for coordinated operations"}]}]}]},{"level":3,"type":"heading","text":"Leader Entry Policy","anchor":"Leader-Entry-Policy"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"emptyGroup"}],"type":"strong"},{"type":"text","text":" - Start only in empty group"}],"type":"paragraph"},{"code":[".leader(.emptyGroup)"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can only participate when group is completely empty","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Starts new activity cycle","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Most strict control"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutMembers"}]},{"type":"text","text":" - Start without members"}],"type":"paragraph"},{"code":[".leader(.withoutMembers)"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate when no members are present","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Other leaders are allowed","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enables coordination between leaders","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutLeader"}]},{"text":" - Start without leader","type":"text"}],"type":"paragraph"},{"code":[".leader(.withoutLeader)"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can participate when no other leaders are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Members are allowed"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}]}]}]},{"level":2,"type":"heading","text":"Usage","anchor":"Usage"},{"level":3,"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Coordination with Multiple Groups","anchor":"Coordination-with-Multiple-Groups"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Operation Examples","anchor":"Operation-Examples"},{"level":3,"type":"heading","text":"Leader-Member Coordination","anchor":"Leader-Member-Coordination"},{"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing","syntax":null},{"level":3,"type":"heading","text":"Entry Policy Differences","anchor":"Entry-Policy-Differences"},{"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing","syntax":null},{"level":2,"type":"heading","text":"Error Handling","anchor":"Error-Handling"},{"inlineContent":[{"text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true,"type":"reference","overridingTitle":"Error Handling"},{"text":" page.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"LockmanGroupCoordinationCancellationError","anchor":"LockmanGroupCoordinationCancellationError"},{"inlineContent":[{"type":"text","text":"This error conforms to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol and provides:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"cancelledInfo","type":"codeVoice"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reason","type":"codeVoice"},{"type":"text","text":": Specific reason for cancellation"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}],"type":"strong"},{"text":" - Action already in group","type":"text"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"inlineContent":[{"text":"leaderCannotJoinNonEmptyGroup","type":"text"}],"type":"strong"},{"type":"text","text":" - Leader cannot join non-empty group"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other operations are running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"inlineContent":[{"text":"memberCannotJoinEmptyGroup","type":"text"}],"type":"strong"},{"type":"text","text":" - Member cannot join empty group"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"blockedByExclusiveLeader","type":"text"}]},{"type":"text","text":" - Blocked by exclusive leader"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader operation: \\(leaderInfo.actionId)\"))","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"seeAlsoSections":[{"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"GroupCoordinationStrategy","role":"article"},"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","type":"topic","title":"Error Handling","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"type":"topic","kind":"article","title":"SingleExecutionStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"url":"\/documentation\/lockman\/singleexecutionstrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","role":"article","title":"ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","type":"topic"},"doc://Lockman/documentation/Lockman":{"abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"url":"\/documentation\/lockman\/compositestrategy","kind":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"Dynamic Condition Evaluation","kind":"article","type":"topic","abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}]},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","title":"PriorityBasedStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"kind":"article"}}}