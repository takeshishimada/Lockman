{"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"A Boundary is the ","type":"text"},{"inlineContent":[{"text":"exclusive control boundary","type":"text"}],"type":"strong"},{"text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using CancelID as a boundary provides the following benefits:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Natural integration with TCA","type":"text"}],"type":"strong"},{"text":" - Leverages existing TCA mechanisms","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Clear boundary definition"}],"type":"strong"},{"type":"text","text":" - CancelID clearly defines the scope of exclusive control"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Boundary Specifications","anchor":"Boundary-Specifications","level":2,"type":"heading"},{"text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Exclusive control between different Boundaries is not possible:"}],"type":"paragraph"},{"code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Since these are treated as separate boundaries, load can be executed even while save is running."}],"type":"paragraph"},{"text":"2. Only one Boundary per reducer","anchor":"2-Only-one-Boundary-per-reducer","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"You cannot specify multiple Boundaries for a single reducer:"}],"type":"paragraph"},{"code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:","type":"text"}],"type":"paragraph"},{"code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"],"syntax":"swift","type":"codeListing"},{"text":"Summary","anchor":"Summary","level":2,"type":"heading"},{"inlineContent":[{"text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"kind":"article","metadata":{"roleHeading":"Article","title":"Boundary","role":"article","modules":[{"name":"Lockman"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/boundaryoverview"]}],"abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true}],"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","type":"topic","title":"Error Handling","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman/GettingStarted":{"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"url":"\/documentation\/lockman\/gettingstarted","title":"Getting Started","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","role":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"type":"topic","kind":"article","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/unlock","kind":"article"},"doc://Lockman/documentation/Lockman/Configuration":{"url":"\/documentation\/lockman\/configuration","type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"kind":"article","url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","role":"article","type":"topic"},"doc://Lockman/documentation/Lockman":{"abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/Lock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","url":"\/documentation\/lockman\/lock","role":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"type":"topic","kind":"article","title":"Lock"}}}