{"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same operation from being executed redundantly, maintaining data consistency and application stability."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user actions and duplicate execution of automatic operations."}],"type":"paragraph"},{"anchor":"Execution-Modes","level":2,"text":"Execution Modes","type":"heading"},{"inlineContent":[{"type":"text","text":"SingleExecutionStrategy supports three execution modes:"}],"type":"paragraph"},{"anchor":"none-No-Control","level":3,"text":"none - No Control","type":"heading"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Executes all operations without exclusive control","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}],"type":"unorderedList"},{"anchor":"boundary-Boundary-level-Exclusive-Control","level":3,"text":"boundary - Boundary-level Exclusive Control","type":"heading"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Only one process can execute within the same boundary"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}]}]}],"type":"unorderedList"},{"anchor":"action-Action-level-Exclusive-Control","level":3,"text":"action - Action-level Exclusive Control","type":"heading"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Different actions can execute concurrently"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied when wanting to control only specific operations","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Usage","level":2,"text":"Usage","type":"heading"},{"anchor":"Basic-Usage-Example","level":3,"text":"Basic Usage Example","type":"heading"},{"syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"type":"codeListing"},{"anchor":"Usage-with-Reducerlock","level":3,"text":"Usage with Reducer.lock()","type":"heading"},{"syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            } catch: { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionError {","                await send(.showBusyMessage(\"\\(singleError.lockmanInfo.actionId) is currently running\"))","            }","        }","    )","}"],"type":"codeListing"},{"anchor":"Advanced-Usage-with-Effectlock","level":3,"text":"Advanced Usage with Effect.lock","type":"heading"},{"inlineContent":[{"type":"text","text":"For cases requiring fine-grained control:"}],"type":"paragraph"},{"syntax":"swift","code":["case .saveButtonTapped:","    return .run { send in","        try await saveUserData()","        await send(.saveCompleted)","    } catch: { error, send in","        await send(.saveError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        }","    )"],"type":"codeListing"},{"anchor":"Operation-Examples","level":2,"text":"Operation Examples","type":"heading"},{"anchor":"action-mode","level":3,"text":"action mode","type":"heading"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"type":"codeListing"},{"anchor":"boundary-mode","level":3,"text":"boundary mode","type":"heading"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"type":"codeListing"},{"anchor":"Error-Handling","level":2,"text":"Error Handling","type":"heading"},{"inlineContent":[{"text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}]},{"text":" page.","type":"text"}],"type":"paragraph"},{"anchor":"LockmanSingleExecutionError","level":3,"text":"LockmanSingleExecutionError","type":"heading"},{"inlineContent":[{"text":"This error conforms to ","type":"text"},{"code":"LockmanStrategyError","type":"codeVoice"},{"text":" protocol and provides:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":": Information about the action that couldn‚Äôt acquire the lock"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": Where the lock failure occurred"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"errorDescription","type":"codeVoice"},{"text":": Human-readable error description","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Specific reason for the failure"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Error cases:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}],"type":"strong"},{"text":" - Boundary is already locked by another action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"actionAlreadyRunning","type":"text"}],"type":"strong"},{"text":" - Same action ID is already running","type":"text"}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionError {","        switch singleError {","        case .boundaryAlreadyLocked(_, let lockmanInfo):","            await send(.showBusyMessage(\"Another process is running: \\(lockmanInfo.actionId)\"))","        case .actionAlreadyRunning(_, let lockmanInfo):","            await send(.showBusyMessage(\"\\(lockmanInfo.actionId) is running\"))","        }","    } else {","        await send(.showBusyMessage(\"Cannot start operation\"))","    }","}"],"type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"metadata":{"modules":[{"name":"Lockman"}],"role":"article","roleHeading":"Article","title":"SingleExecutionStrategy"},"seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"anchor":"Strategies"}],"variants":[{"paths":["\/documentation\/lockman\/singleexecutionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","title":"GroupCoordinationStrategy","type":"topic","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","title":"PriorityBasedStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"kind":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"Dynamic Condition Evaluation","kind":"article","type":"topic","abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}]},"doc://Lockman/documentation/Lockman":{"abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"url":"\/documentation\/lockman\/compositestrategy","kind":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","role":"article","title":"ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","type":"topic"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","type":"topic","title":"Error Handling","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]}}}