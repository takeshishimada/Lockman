{"metadata":{"symbolKind":"struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"modules":[{"name":"Lockman"}],"title":"AnyLockmanBoundaryId","externalID":"s:7Lockman03AnyA10BoundaryIdV","navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"roleHeading":"Structure"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","topicSections":[{"generated":true,"title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"anchor":"Operators"},{"generated":true,"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"anchor":"Initializers"},{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"anchor":"Instance-Methods"},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"anchor":"Default-Implementations"}],"sections":[],"variants":[{"paths":["\/documentation\/lockman\/anylockmanboundaryid"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This wrapper enables different types of boundary identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}],"type":"paragraph"},{"anchor":"Type-Erasure-Benefits","text":"Type Erasure Benefits","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"code":"Dictionary<AnyLockmanBoundaryId, Value>","type":"codeVoice"},{"type":"text","text":" with mixed key types"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Maintains value semantics and equality comparison"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Thread-Safety","text":"Thread Safety","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Marked as "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" because "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}],"type":"paragraph"},{"anchor":"Usage-Example","text":"Usage Example","level":2,"type":"heading"},{"code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"],"syntax":"swift","type":"codeListing"}]}],"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo"}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Generates a hash value for this boundary ID."}],"title":"hash(into:)","kind":"symbol","role":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)"},"doc://Lockman/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"type":"text","text":" instances for equality."}],"url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","role":"symbol","title":"==(_:_:)"},"doc://Lockman/documentation/Lockman":{"abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","type":"topic","role":"collection"},"doc://Lockman/SQ":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable"},"doc://Lockman/SH":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SH","title":"Swift.Hashable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":", allowing heterogeneous boundary IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"title":"AnyLockmanBoundaryId","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"url":"\/documentation\/lockman\/anylockmanboundaryid"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations","role":"collectionGroup","abstract":[],"kind":"article","title":"Equatable Implementations"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","abstract":[{"text":"Creates a new ","type":"text"},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":".","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"LockmanBoundaryId","preciseIdentifier":"s:7Lockman0A10BoundaryIda"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","kind":"symbol","role":"symbol"}}}