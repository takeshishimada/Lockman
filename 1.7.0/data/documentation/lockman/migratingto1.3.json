{"abstract":[{"text":"Update your code from Lockman 1.2 to take advantage of Lockman 1.3â€™s simplified API and enhanced safety features.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/MigratingTo1.3"},"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"Migrating to 1.3","role":"article"},"variants":[{"paths":["\/documentation\/lockman\/migratingto1.3"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Lockman 1.3 introduces a major API simplification by removing the "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" methods in favor of the more consistent "},{"code":"Effect.lock","type":"codeVoice"},{"type":"text","text":" method chain approach. This change eliminates API duplication and provides a cleaner, more maintainable codebase."}],"type":"paragraph"},{"inlineContent":[{"text":"The key improvements include:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Removal of ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" methods for API consistency","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enhanced safety through automatic lock management","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Simplified learning curve with fewer API options","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Better integration with TCAâ€™s Effect patterns"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Updating dependencies","level":2,"type":"heading","anchor":"Updating-dependencies"},{"inlineContent":[{"text":"To upgrade to Lockman 1.3, update your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" file:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["dependencies: [","  .package(","    url: \"https:\/\/github.com\/takeshishimada\/Lockman\",","    from: \"1.3.0\"","  )","]"],"type":"codeListing"},{"text":"Breaking changes","level":2,"type":"heading","anchor":"Breaking-changes"},{"text":"Removal of withLock methods","level":3,"type":"heading","anchor":"Removal-of-withLock-methods"},{"inlineContent":[{"text":"All ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" methods have been removed. Use ","type":"text"},{"type":"codeVoice","code":"Effect.lock"},{"text":" method chain or ","type":"text"},{"type":"codeVoice","code":"Reducer.lock"},{"text":" instead.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}],"type":"paragraph"},{"syntax":"swift","code":["return .withLock(","  operation: { send in","    try await performWork()","    await send(.completed)","  },","  catch handler: { error, send in","    await send(.failed(error))","  },","  lockFailure: { error, send in","    await send(.lockFailed)","  },","  action: action,","  boundaryId: CancelID.operation",")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"âœ… After (1.3):"}],"type":"paragraph"},{"syntax":"swift","code":["return .run { send in","  try await performWork()","  await send(.completed)","} catch: { error, send in","  await send(.failed(error))","}",".lock(","  action: action,","  boundaryId: CancelID.operation,","  lockFailure: { error, send in","    await send(.lockFailed)","  }",")"],"type":"codeListing"},{"text":"Removal of withLock(concatenating:)","level":3,"type":"heading","anchor":"Removal-of-withLockconcatenating"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"withLock(concatenating:)"},{"type":"text","text":" method has been renamed to "},{"type":"codeVoice","code":"Effect.lock(concatenating:)"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}],"type":"paragraph"},{"syntax":"swift","code":["return .withLock(","  concatenating: [","    .run { send in await step1() },","    .run { send in await step2() },","    .run { send in await step3() }","  ],","  action: action,","  boundaryId: CancelID.workflow",")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"âœ… After (1.3):"}],"type":"paragraph"},{"syntax":"swift","code":["return .lock(","  concatenating: [","    .run { send in await step1() },","    .run { send in await step2() },","    .run { send in await step3() }","  ],","  action: action,","  boundaryId: CancelID.workflow",")"],"type":"codeListing"},{"text":"Manual unlock functionality removed","level":3,"type":"heading","anchor":"Manual-unlock-functionality-removed"},{"inlineContent":[{"type":"text","text":"Manual unlock functionality (unlock parameter in operation) has been removed. All locks are now automatically managed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}],"type":"paragraph"},{"syntax":"swift","code":["return .withLock(","  operation: { send, unlock in","    defer { unlock() }","    try await performWork()","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")"],"type":"codeListing"},{"inlineContent":[{"text":"âœ… After (1.3):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["return .run { send in","  try await performWork()","  await send(.completed)","}",".lock(","  action: action,","  boundaryId: CancelID.operation,","  unlockOption: .immediate \/\/ Control timing instead",")"],"type":"codeListing"},{"text":"Migration strategy","level":2,"type":"heading","anchor":"Migration-strategy"},{"text":"Step 1: Replace withLock with Effect.lock","level":3,"type":"heading","anchor":"Step-1-Replace-withLock-with-Effectlock"},{"inlineContent":[{"type":"text","text":"For each "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" call:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move the operation closure to a "},{"type":"codeVoice","code":".run { }"},{"type":"text","text":" effect"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Move the catch handler to ","type":"text"},{"code":".catch { }","type":"codeVoice"},{"text":" if present","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Chain ","type":"text"},{"code":".lock()","type":"codeVoice"},{"text":" with the action and boundary parameters","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Move lockFailure to the lock method","type":"text"}]}]}],"type":"orderedList"},{"text":"Step 2: Replace withLock(concatenating:) calls","level":3,"type":"heading","anchor":"Step-2-Replace-withLockconcatenating-calls"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Change method name from "},{"type":"codeVoice","code":".withLock(concatenating:"},{"type":"text","text":" to "},{"type":"codeVoice","code":".lock(concatenating:"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Parameters remain the same"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Step 3: Remove manual unlock usage","level":3,"type":"heading","anchor":"Step-3-Remove-manual-unlock-usage"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove "},{"type":"codeVoice","code":"unlock"},{"type":"text","text":" parameter from operation closures"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Remove manual ","type":"text"},{"code":"unlock()","type":"codeVoice"},{"text":" calls","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"unlockOption"},{"type":"text","text":" parameter to control timing if needed"}]}]}],"type":"orderedList"},{"text":"Complete migration examples","level":2,"type":"heading","anchor":"Complete-migration-examples"},{"text":"Basic operation migration","level":3,"type":"heading","anchor":"Basic-operation-migration"},{"inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}],"type":"paragraph"},{"syntax":"swift","code":["case .fetchData:","  return .withLock(","    operation: { send in","      let data = try await apiClient.fetchData()","      await send(.dataReceived(data))","    },","    catch handler: { error, send in","      await send(.fetchFailed(error))","    },","    lockFailure: { error, send in","      await send(.fetchBlocked)","    },","    action: action,","    boundaryId: CancelID.fetch","  )"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"âœ… After (1.3):"}],"type":"paragraph"},{"syntax":"swift","code":["case .fetchData:","  return .run { send in","    let data = try await apiClient.fetchData()","    await send(.dataReceived(data))","  } catch: { error, send in","    await send(.fetchFailed(error))","  }","  .lock(","    action: action,","    boundaryId: CancelID.fetch,","    lockFailure: { error, send in","      await send(.fetchBlocked)","    }","  )"],"type":"codeListing"},{"text":"Concatenated operations migration","level":3,"type":"heading","anchor":"Concatenated-operations-migration"},{"inlineContent":[{"text":"ðŸš« Before (1.2):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .processWorkflow:","  return .withLock(","    concatenating: [","      .send(.workflowStarted),","      .run { send in await processStep1() },","      .run { send in await processStep2() },","      .send(.workflowCompleted)","    ],","    unlockOption: .transition,","    action: action,","    boundaryId: CancelID.workflow","  )"],"type":"codeListing"},{"inlineContent":[{"text":"âœ… After (1.3):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .processWorkflow:","  return .lock(","    concatenating: [","      .send(.workflowStarted),","      .run { send in await processStep1() },","      .run { send in await processStep2() },","      .send(.workflowCompleted)","    ],","    unlockOption: .transition,","    action: action,","    boundaryId: CancelID.workflow","  )"],"type":"codeListing"},{"text":"Complex manual unlock migration","level":3,"type":"heading","anchor":"Complex-manual-unlock-migration"},{"inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}],"type":"paragraph"},{"syntax":"swift","code":["case .complexOperation:","  return .withLock(","    operation: { send, unlock in","      try await phase1()","      ","      if shouldSkipPhase2 {","        unlock()","        await send(.skipped)","        return","      }","      ","      try await phase2()","      unlock()","      await send(.completed)","    },","    catch handler: { error, send, unlock in","      unlock()","      await send(.failed(error))","    },","    action: action,","    boundaryId: CancelID.complex","  )"],"type":"codeListing"},{"inlineContent":[{"text":"âœ… After (1.3):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .complexOperation:","  return .run { send in","    try await phase1()","    ","    if shouldSkipPhase2 {","      await send(.skipped)","      return","    }","    ","    try await phase2()","    await send(.completed)","  } catch: { error, send in","    await send(.failed(error))","  }","  .lock(","    action: action,","    boundaryId: CancelID.complex,","    unlockOption: .immediate \/\/ Automatic timing control","  )"],"type":"codeListing"},{"text":"Benefits of upgrading","level":2,"type":"heading","anchor":"Benefits-of-upgrading"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Simplified API"}],"type":"strong"},{"text":": Single consistent method chain approach","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Enhanced safety","type":"text"}]},{"type":"text","text":": Automatic lock management prevents lock leaks"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Better TCA integration"}],"type":"strong"},{"type":"text","text":": Natural fit with Effect patterns"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Reduced learning curve"}],"type":"strong"},{"type":"text","text":": Fewer API variants to learn"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Improved maintainability"}],"type":"strong"},{"type":"text","text":": Cleaner, more predictable code patterns"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"API mapping reference","level":2,"type":"heading","anchor":"API-mapping-reference"},{"rows":[[[{"inlineContent":[{"text":"Old API (1.2)","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"New API (1.3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":".withLock(operation:...)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":".run {...}.lock(...)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":".withLock(concatenating:...)"}],"type":"paragraph"}],[{"inlineContent":[{"code":".lock(concatenating:...)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"operation: { send, unlock in }"}],"type":"paragraph"}],[{"inlineContent":[{"code":".run { send in }","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"unlockOption","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Manual ","type":"text"},{"type":"codeVoice","code":"unlock()"},{"text":" calls","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Automatic with ","type":"text"},{"code":"unlockOption","type":"codeVoice"},{"text":" control","type":"text"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"text":"Testing your migration","level":2,"type":"heading","anchor":"Testing-your-migration"},{"inlineContent":[{"type":"text","text":"After migrating, verify that:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lock behavior is maintained"}]},{"type":"text","text":": Operations are still properly locked"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Error handling works","type":"text"}]},{"type":"text","text":": Both operation errors and lock failures are handled"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Timing is correct"}]},{"type":"text","text":": Use "},{"code":"unlockOption","type":"codeVoice"},{"type":"text","text":" to adjust timing if needed"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Performance is maintained"}],"type":"strong"},{"type":"text","text":": No regression in lock performance"}]}]}],"type":"orderedList"},{"anchor":"Summary","level":2,"type":"heading","text":"Summary"},{"inlineContent":[{"type":"text","text":"Lockman 1.3 represents a significant API simplification while maintaining all the functionality and safety guarantees of previous versions. The migration primarily involves moving from "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" to "},{"code":"Effect.lock","type":"codeVoice"},{"type":"text","text":" method chains, which provides a cleaner and more consistent API surface."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Key takeaways:"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Breaking changes"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" methods removed"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Consistent API"}]},{"type":"text","text":": Single method chain approach with "},{"type":"codeVoice","code":"Effect.lock"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Enhanced safety"}]},{"type":"text","text":": Automatic lock management only"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Better integration","type":"text"}]},{"type":"text","text":": Natural fit with TCA Effect patterns"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The new API eliminates confusion between different locking approaches and provides a more maintainable codebase going forward."}],"type":"paragraph"}]}],"kind":"article","references":{"doc://Lockman/documentation/Lockman":{"abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","type":"topic","role":"collection"}}}