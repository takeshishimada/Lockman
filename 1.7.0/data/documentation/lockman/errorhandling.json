{"metadata":{"roleHeading":"Article","title":"Error Handling","role":"article","modules":[{"name":"Lockman"}]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true}],"variants":[{"paths":["\/documentation\/lockman\/errorhandling"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Common Error Handling Patterns","anchor":"Common-Error-Handling-Patterns"},{"type":"heading","level":3,"text":"lockFailure Handler with Reducer.lock()","anchor":"lockFailure-Handler-with-Reducerlock"},{"inlineContent":[{"text":"Basic lockFailure handler structure used in all strategies:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Benefits of centralized error handling:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Consistent error handling across all actions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Single place to update error messages"}]}]},{"content":[{"inlineContent":[{"text":"Easier to maintain and test","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Parameters:"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"error"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"send"},{"type":"text","text":": Function for sending feedback to the user"}]}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"catch handler Pattern","anchor":"catch-handler-Pattern"},{"inlineContent":[{"text":"Handling general errors that occur during processing:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"]},{"inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Types of Errors and Solutions","anchor":"Types-of-Errors-and-Solutions"},{"type":"heading","level":3,"text":"1. Lock Acquisition Failure (Already Locked)","anchor":"1-Lock-Acquisition-Failure-Already-Locked"},{"inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"type":"text","text":": Occurs when the same operation or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Notify user that operation is in progress","    await send(.showMessage(\"Operation is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"]},{"type":"heading","level":3,"text":"2. Permission\/Priority Conflicts","anchor":"2-PermissionPriority-Conflicts"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Concept","type":"text"}]},{"text":": Occurs due to higher priority operations or group rule constraints","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"]},{"type":"heading","level":3,"text":"3. Cancellation Notification","anchor":"3-Cancellation-Notification"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"text":": When existing operations are cancelled by higher priority operations","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"]},{"type":"heading","level":2,"text":"Best Practices","anchor":"Best-Practices"},{"type":"heading","level":3,"text":"1. Proper Error Type Casting","anchor":"1-Proper-Error-Type-Casting"},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"]},{"type":"heading","level":3,"text":"2. User-Friendly Messages","anchor":"2-User-Friendly-Messages"},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"]},{"type":"heading","level":3,"text":"3. Utilizing Additional Information","anchor":"3-Utilizing-Additional-Information"},{"inlineContent":[{"type":"text","text":"Many errors contain additional information:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start operation\"))","        }","    }",")"]},{"type":"heading","level":2,"text":"Strategy-Specific Errors","anchor":"Strategy-Specific-Errors"},{"inlineContent":[{"type":"text","text":"All strategy errors now conform to "},{"code":"LockmanCancellationError","type":"codeVoice"},{"type":"text","text":" protocol, providing consistent access to:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": Where the cancellation occurred"}]}]},{"content":[{"inlineContent":[{"code":"errorDescription","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"failureReason","type":"codeVoice"},{"text":": Localized error descriptions","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"Error Types by Strategy:","anchor":"Error-Types-by-Strategy"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"SingleExecutionStrategy","type":"text"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"PriorityBasedStrategy"}],"type":"strong"},{"text":":","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedBlockedError"},{"type":"text","text":" - New action blocked by priority"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"LockmanPriorityBasedCancellationError","type":"codeVoice"},{"text":" - Existing action cancelled by preemption","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"GroupCoordinationStrategy","type":"text"}],"type":"strong"},{"text":": ","type":"text"},{"code":"LockmanGroupCoordinationCancellationError","type":"codeVoice"},{"text":" - Group rule violations","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy"}],"type":"strong"},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanConcurrencyLimitedCancellationError"},{"type":"text","text":" - Concurrent execution limit exceeded"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}],"isActive":true,"overridingTitle":"DynamicConditionStrategy"},{"type":"text","text":" - Condition mismatch errors"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"CompositeStrategy"}],"overridingTitle":"CompositeStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"reference","isActive":true},{"type":"text","text":" - Composite strategy errors"}]}]}],"type":"unorderedList"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/unlock","kind":"article"},"doc://Lockman/documentation/Lockman":{"abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","title":"Dynamic Condition Evaluation","kind":"article","type":"topic","abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}]},"doc://Lockman/documentation/Lockman/GettingStarted":{"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"url":"\/documentation\/lockman\/gettingstarted","title":"Getting Started","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"doc://Lockman/documentation/Lockman/Lock":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","url":"\/documentation\/lockman\/lock","role":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"type":"topic","kind":"article","title":"Lock"},"doc://Lockman/documentation/Lockman/Configuration":{"url":"\/documentation\/lockman\/configuration","type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"kind":"article","url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","role":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"type":"topic","kind":"article","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"title":"Boundary","kind":"article","role":"article","url":"\/documentation\/lockman\/boundaryoverview","abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"url":"\/documentation\/lockman\/compositestrategy","kind":"article"}}}