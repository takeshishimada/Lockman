{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This wrapper enables different types of group identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}],"type":"paragraph"},{"level":2,"anchor":"Type-Erasure-Benefits","text":"Type Erasure Benefits","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Allows "},{"code":"Set<AnyLockmanGroupId>","type":"codeVoice"},{"type":"text","text":" with mixed group ID types"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maintains value semantics and equality comparison"}]}]},{"content":[{"inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Thread-Safety","text":"Thread Safety","type":"heading"},{"inlineContent":[{"text":"Marked as ","type":"text"},{"code":"@unchecked Sendable","type":"codeVoice"},{"text":" because ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Usage-Example","text":"Usage Example","type":"heading"},{"code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","interfaceLanguage":"swift"},"sections":[],"metadata":{"externalID":"s:7Lockman03AnyA7GroupIdV","symbolKind":"struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Lockman"}],"title":"AnyLockmanGroupId"},"topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"generated":true,"anchor":"Operators","title":"Operators"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"],"generated":true,"anchor":"Initializers","title":"Initializers"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmangroupid"]}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships","title":"Conforms To"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A7GroupIda","text":"LockmanGroupId","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","title":"init(_:)","abstract":[{"type":"text","text":"Creates a new "},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"code":"LockmanGroupId","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"kind":"symbol","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","title":"hash(into:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different group ID types with identical values from colliding.","type":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"title":"Equatable Implementations","kind":"article","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","abstract":[],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations","role":"collectionGroup","type":"topic"},"doc://Lockman/s8CopyableP":{"identifier":"doc:\/\/Lockman\/s8CopyableP","type":"unresolvable","title":"Swift.Copyable"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH","type":"unresolvable"},"doc://Lockman/SQ":{"identifier":"doc:\/\/Lockman\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","type":"topic","title":"CustomDebugStringConvertible Implementations","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"url":"\/documentation\/lockman\/anylockmangroupid","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"title":"AnyLockmanGroupId","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","role":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" instances for equality by comparing their underlying "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" values."}],"title":"==(_:_:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"AnyLockmanGroupId","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"AnyLockmanGroupId","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"}}}