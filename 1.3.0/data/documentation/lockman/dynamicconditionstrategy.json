{"abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","generated":true}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"DynamicConditionStrategy is a strategy that dynamically controls locks based on runtime state and conditions. Through condition evaluation with custom logic, it enables flexible exclusive control according to business rules."}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where complex business conditions that cannot be expressed with standard strategies or dynamic control based on application state is required.","type":"text"}]},{"text":"Condition Evaluation System","type":"heading","anchor":"Condition-Evaluation-System","level":2},{"text":"Basic Condition Specification","type":"heading","anchor":"Basic-Condition-Specification","level":3},{"code":["LockmanDynamicConditionInfo(","    actionId: \"payment\",","    condition: {","        \/\/ Custom condition logic","        guard userIsAuthenticated else {","            return .cancel(AuthenticationError.notLoggedIn)","        }","        guard accountBalance >= requiredAmount else {","            return .cancel(PaymentError.insufficientFunds)","        }","        return .success","    }",")"],"type":"codeListing","syntax":"swift"},{"text":"Advanced Control with Reducer.lock","type":"heading","anchor":"Advanced-Control-with-Reducerlock","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the method chain API enables more advanced condition evaluation based on current state and action:"}]},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .makePayment(let amount):","            \/\/ Create a temporary reducer with dynamic conditions","            let tempReducer = Reduce<State, Action> { _, _ in .none }","                .lock { state, _ in","                    \/\/ Reducer-level condition","                    guard state.isAuthenticated else {","                        return .cancel(AuthenticationError.notLoggedIn)","                    }","                    return .success","                }","            ","            return tempReducer.lock(","                state: state,","                action: action,","                operation: { send in","                    try await processPayment(amount)","                    await send(.paymentCompleted)","                },","                lockAction: PaymentAction(),","                boundaryId: CancelID.payment,","                lockCondition: { state, _ in","                    \/\/ Action-level condition","                    guard state.balance >= amount else {","                        return .cancel(PaymentError.insufficientFunds(","                            required: amount,","                            available: state.balance","                        ))","                    }","                    return .success","                }","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Usage","type":"heading","anchor":"Usage","level":2},{"text":"Basic Usage Example","type":"heading","anchor":"Basic-Usage-Example","level":3},{"code":["@LockmanDynamicCondition","enum ViewAction {","    case transfer(amount: Double)","    case withdraw(amount: Double)","    ","    var lockmanInfo: LockmanDynamicConditionInfo {","        switch self {","        case .transfer(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ Business hours check","                    guard BusinessHours.isOpen else {","                        return .cancel(BankError.outsideBusinessHours)","                    }","                    \/\/ Amount limit check","                    guard amount <= transferLimit else {","                        return .cancel(BankError.transferLimitExceeded)","                    }","                    return .success","                }","            )","        case .withdraw(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ ATM availability check","                    guard ATMService.isAvailable else {","                        return .cancel(BankError.atmUnavailable)","                    }","                    return .success","                }","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Multi-Stage Condition Evaluation","type":"heading","anchor":"Multi-Stage-Condition-Evaluation","level":3},{"type":"paragraph","inlineContent":[{"text":"The method chain API provides three stages of condition evaluation:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Action-level conditions"}]},{"type":"text","text":": Conditions for specific operations"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Reducer-level conditions","type":"text"}],"type":"strong"},{"type":"text","text":": Overall prerequisite conditions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Traditional lock strategies","type":"text"}],"type":"strong"},{"text":": Standard exclusive control","type":"text"}]}]}],"type":"orderedList"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .criticalOperation:","            let tempReducer = Reduce<State, Action> { _, _ in .none }","                .lock { state, _ in","                    \/\/ 2. Reducer-level condition","                    guard state.maintenanceMode == false else {","                        return .cancel(SystemError.maintenanceMode)","                    }","                    return .success","                }","            ","            return tempReducer.lock(","                state: state,","                action: action,","                operation: { send in","                    try await performCriticalOperation()","                    await send(.operationCompleted)","                },","                lockAction: CriticalAction(), \/\/ 3. Traditional strategy (SingleExecution, etc.)","                boundaryId: CancelID.critical,","                lockCondition: { state, _ in","                    \/\/ 1. Action-level condition","                    guard state.systemStatus == .ready else {","                        return .cancel(SystemError.notReady)","                    }","                    return .success","                }","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Operation Examples","type":"heading","anchor":"Operation-Examples","level":2},{"text":"Basic Condition Evaluation","type":"heading","anchor":"Basic-Condition-Evaluation","level":3},{"code":["Time: 9:00  - transfer($1000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ✅ Within limit","  Result: ✅ Execute","","Time: 18:00 - transfer($1000) request  ","  Condition 1: Business hours check → ❌ Outside hours","  Result: ❌ Reject (BankError.outsideBusinessHours)","","Time: 10:00 - transfer($50000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ❌ Exceeds limit","  Result: ❌ Reject (BankError.transferLimitExceeded)"],"type":"codeListing","syntax":null},{"text":"Multi-Stage Evaluation Operation","type":"heading","anchor":"Multi-Stage-Evaluation-Operation","level":3},{"code":["criticalOperation request:","","Step 1: Reducer-level condition","  maintenanceMode == false → ✅ Pass","","Step 2: Action-level condition  ","  systemStatus == .ready → ✅ Pass","","Step 3: Traditional strategy (e.g., SingleExecution)","  Duplicate execution check → ✅ Pass","","Result: ✅ All stages passed, start execution"],"type":"codeListing","syntax":null},{"text":"Error Handling","type":"heading","anchor":"Error-Handling","level":2},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with DynamicConditionStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"isActive":true,"type":"reference","overridingTitle":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"text":" page.","type":"text"}]},{"text":"Utilizing Custom Errors","type":"heading","anchor":"Utilizing-Custom-Errors","level":3},{"code":["enum BusinessError: Error {","    case insufficientFunds(required: Double, available: Double)","    case dailyLimitExceeded(limit: Double)","    case accountSuspended(reason: String)","    case outsideBusinessHours","}","","lockFailure: { error, send in","    switch error as? BusinessError {","    case .insufficientFunds(let required, let available):","        await send(.showError(\"Insufficient funds: Required ¥\\(required), Available ¥\\(available)\"))","        ","    case .dailyLimitExceeded(let limit):","        await send(.showError(\"Daily limit of ¥\\(limit) exceeded\"))","        ","    case .accountSuspended(let reason):","        await send(.showError(\"Account suspended: \\(reason)\"))","        ","    case .outsideBusinessHours:","        await send(.showError(\"Outside business hours (Weekdays 9:00-17:00)\"))","        ","    default:","        await send(.showError(\"Cannot perform operation\"))","    }","}"],"type":"codeListing","syntax":"swift"}]}],"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","interfaceLanguage":"swift"},"metadata":{"title":"DynamicConditionStrategy","role":"article","roleHeading":"Article","modules":[{"name":"Lockman"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/dynamicconditionstrategy"]}],"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"role":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"role":"article","title":"GroupCoordinationStrategy","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","kind":"article","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"kind":"article","role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy"}}}