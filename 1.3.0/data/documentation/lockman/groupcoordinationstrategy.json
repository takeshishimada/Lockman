{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}],"type":"paragraph"},{"text":"Group System","anchor":"Group-System","level":2,"type":"heading"},{"text":"Coordination Roles","anchor":"Coordination-Roles","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"none","type":"text"}],"type":"strong"},{"type":"text","text":" - Non-exclusive Participant"}],"type":"paragraph"},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate regardless of group state"}]}]},{"content":[{"inlineContent":[{"text":"Does not hinder execution of other participants","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Auxiliary processing such as UI updates or logging","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"leader"}],"type":"strong"},{"type":"text","text":" - Group Leader"}],"type":"paragraph"},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Role to start group activities"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enables member participation","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"type":"text","text":" - Group Member"}],"type":"paragraph"},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can only participate in active groups","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Executes when leader or other participants are present","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Responsible for coordinated processing","type":"text"}]}]}],"type":"unorderedList"},{"text":"Leader Entry Policy","anchor":"Leader-Entry-Policy","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"emptyGroup"}]},{"type":"text","text":" - Start only in empty group"}],"type":"paragraph"},{"syntax":"swift","code":[".leader(.emptyGroup)"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Starts new activity cycle","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Most strict control","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"withoutMembers"}],"type":"strong"},{"type":"text","text":" - Start without members"}],"type":"paragraph"},{"syntax":"swift","code":[".leader(.withoutMembers)"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no members are present"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Other leaders are allowed"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables coordination between leaders"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"withoutLeader"}],"type":"strong"},{"text":" - Start without leader","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".leader(.withoutLeader)"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate when no other leaders are present"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Members are allowed","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Exclusive control of leader authority","type":"text"}]}]}],"type":"unorderedList"},{"text":"Usage","anchor":"Usage","level":2,"type":"heading"},{"text":"Basic Usage Example","anchor":"Basic-Usage-Example","level":3,"type":"heading"},{"syntax":"swift","code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"type":"codeListing"},{"text":"Coordination with Multiple Groups","anchor":"Coordination-with-Multiple-Groups","level":3,"type":"heading"},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing"},{"text":"Operation Examples","anchor":"Operation-Examples","level":2,"type":"heading"},{"text":"Leader-Member Coordination","anchor":"Leader-Member-Coordination","level":3,"type":"heading"},{"syntax":null,"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing"},{"text":"Entry Policy Differences","anchor":"Entry-Policy-Differences","level":3,"type":"heading"},{"syntax":null,"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing"},{"text":"Error Handling","anchor":"Error-Handling","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"LockmanGroupCoordinationCancellationError","anchor":"LockmanGroupCoordinationCancellationError","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"This error conforms to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol and provides:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"cancelledInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"type":"text","text":": Where the cancellation occurred"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reason"},{"text":": Specific reason for cancellation","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyInGroup","type":"text"}]},{"type":"text","text":" - Action already in group"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}],"type":"strong"},{"type":"text","text":" - Leader cannot join non-empty group"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"memberCannotJoinEmptyGroup","type":"text"}],"type":"strong"},{"text":" - Member cannot join empty group","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"blockedByExclusiveLeader","type":"text"}],"type":"strong"},{"type":"text","text":" - Blocked by exclusive leader"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader: \\(leaderInfo.actionId)\"))","    }","}"],"type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"kind":"article","metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article","title":"GroupCoordinationStrategy"},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"title":"Strategies","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"kind":"article","role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"role":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy"}}}