{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/MigratingTo1.3","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/migratingto1.3"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"title":"Migrating to 1.3","role":"article","modules":[{"name":"Lockman"}],"roleHeading":"Article"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman 1.3 introduces a major API simplification by removing the "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" methods in favor of the more consistent "},{"type":"codeVoice","code":"Effect.lock"},{"type":"text","text":" method chain approach. This change eliminates API duplication and provides a cleaner, more maintainable codebase."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key improvements include:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Removal of "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" methods for API consistency"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Enhanced safety through automatic lock management","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Simplified learning curve with fewer API options","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Better integration with TCAâ€™s Effect patterns"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"Updating-dependencies","level":2,"text":"Updating dependencies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To upgrade to Lockman 1.3, update your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}]},{"syntax":"swift","type":"codeListing","code":["dependencies: [","  .package(","    url: \"https:\/\/github.com\/takeshishimada\/Lockman\",","    from: \"1.3.0\"","  )","]"]},{"type":"heading","anchor":"Breaking-changes","level":2,"text":"Breaking changes"},{"type":"heading","anchor":"Removal-of-withLock-methods","level":3,"text":"Removal of withLock methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" methods have been removed. Use "},{"code":"Effect.lock","type":"codeVoice"},{"type":"text","text":" method chain or "},{"code":"Reducer.lock","type":"codeVoice"},{"type":"text","text":" instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"syntax":"swift","type":"codeListing","code":["return .withLock(","  operation: { send in","    try await performWork()","    await send(.completed)","  },","  catch handler: { error, send in","    await send(.failed(error))","  },","  lockFailure: { error, send in","    await send(.lockFailed)","  },","  action: action,","  boundaryId: CancelID.operation",")"]},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .run { send in","  try await performWork()","  await send(.completed)","} catch: { error, send in","  await send(.failed(error))","}",".lock(","  action: action,","  boundaryId: CancelID.operation,","  lockFailure: { error, send in","    await send(.lockFailed)","  }",")"]},{"type":"heading","anchor":"Removal-of-withLockconcatenating","level":3,"text":"Removal of withLock(concatenating:)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"withLock(concatenating:)","type":"codeVoice"},{"type":"text","text":" method has been renamed to "},{"code":"Effect.lock(concatenating:)","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.2):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .withLock(","  concatenating: [","    .run { send in await step1() },","    .run { send in await step2() },","    .run { send in await step3() }","  ],","  action: action,","  boundaryId: CancelID.workflow",")"]},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .lock(","  concatenating: [","    .run { send in await step1() },","    .run { send in await step2() },","    .run { send in await step3() }","  ],","  action: action,","  boundaryId: CancelID.workflow",")"]},{"type":"heading","anchor":"Manual-unlock-functionality-removed","level":3,"text":"Manual unlock functionality removed"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Manual unlock functionality (unlock parameter in operation) has been removed. All locks are now automatically managed."}]},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.2):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .withLock(","  operation: { send, unlock in","    defer { unlock() }","    try await performWork()","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")"]},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .run { send in","  try await performWork()","  await send(.completed)","}",".lock(","  action: action,","  boundaryId: CancelID.operation,","  unlockOption: .immediate \/\/ Control timing instead",")"]},{"type":"heading","anchor":"Migration-strategy","level":2,"text":"Migration strategy"},{"type":"heading","anchor":"Step-1-Replace-withLock-with-Effectlock","level":3,"text":"Step 1: Replace withLock with Effect.lock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For each "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" call:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move the operation closure to a "},{"type":"codeVoice","code":".run { }"},{"type":"text","text":" effect"}]}]},{"content":[{"inlineContent":[{"text":"Move the catch handler to ","type":"text"},{"code":".catch { }","type":"codeVoice"},{"text":" if present","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Chain ","type":"text"},{"code":".lock()","type":"codeVoice"},{"text":" with the action and boundary parameters","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move lockFailure to the lock method"}]}]}],"type":"orderedList"},{"type":"heading","anchor":"Step-2-Replace-withLockconcatenating-calls","level":3,"text":"Step 2: Replace withLock(concatenating:) calls"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Change method name from "},{"code":".withLock(concatenating:","type":"codeVoice"},{"type":"text","text":" to "},{"code":".lock(concatenating:","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters remain the same"}]}]}],"type":"orderedList"},{"type":"heading","anchor":"Step-3-Remove-manual-unlock-usage","level":3,"text":"Step 3: Remove manual unlock usage"},{"items":[{"content":[{"inlineContent":[{"text":"Remove ","type":"text"},{"code":"unlock","type":"codeVoice"},{"text":" parameter from operation closures","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Remove manual "},{"code":"unlock()","type":"codeVoice"},{"type":"text","text":" calls"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"unlockOption"},{"text":" parameter to control timing if needed","type":"text"}]}]}],"type":"orderedList"},{"type":"heading","anchor":"Complete-migration-examples","level":2,"text":"Complete migration examples"},{"type":"heading","anchor":"Basic-operation-migration","level":3,"text":"Basic operation migration"},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.2):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["case .fetchData:","  return .withLock(","    operation: { send in","      let data = try await apiClient.fetchData()","      await send(.dataReceived(data))","    },","    catch handler: { error, send in","      await send(.fetchFailed(error))","    },","    lockFailure: { error, send in","      await send(.fetchBlocked)","    },","    action: action,","    boundaryId: CancelID.fetch","  )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.3):"}]},{"syntax":"swift","type":"codeListing","code":["case .fetchData:","  return .run { send in","    let data = try await apiClient.fetchData()","    await send(.dataReceived(data))","  } catch: { error, send in","    await send(.fetchFailed(error))","  }","  .lock(","    action: action,","    boundaryId: CancelID.fetch,","    lockFailure: { error, send in","      await send(.fetchBlocked)","    }","  )"]},{"type":"heading","anchor":"Concatenated-operations-migration","level":3,"text":"Concatenated operations migration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"syntax":"swift","type":"codeListing","code":["case .processWorkflow:","  return .withLock(","    concatenating: [","      .send(.workflowStarted),","      .run { send in await processStep1() },","      .run { send in await processStep2() },","      .send(.workflowCompleted)","    ],","    unlockOption: .transition,","    action: action,","    boundaryId: CancelID.workflow","  )"]},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["case .processWorkflow:","  return .lock(","    concatenating: [","      .send(.workflowStarted),","      .run { send in await processStep1() },","      .run { send in await processStep2() },","      .send(.workflowCompleted)","    ],","    unlockOption: .transition,","    action: action,","    boundaryId: CancelID.workflow","  )"]},{"type":"heading","anchor":"Complex-manual-unlock-migration","level":3,"text":"Complex manual unlock migration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"syntax":"swift","type":"codeListing","code":["case .complexOperation:","  return .withLock(","    operation: { send, unlock in","      try await phase1()","      ","      if shouldSkipPhase2 {","        unlock()","        await send(.skipped)","        return","      }","      ","      try await phase2()","      unlock()","      await send(.completed)","    },","    catch handler: { error, send, unlock in","      unlock()","      await send(.failed(error))","    },","    action: action,","    boundaryId: CancelID.complex","  )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.3):"}]},{"syntax":"swift","type":"codeListing","code":["case .complexOperation:","  return .run { send in","    try await phase1()","    ","    if shouldSkipPhase2 {","      await send(.skipped)","      return","    }","    ","    try await phase2()","    await send(.completed)","  } catch: { error, send in","    await send(.failed(error))","  }","  .lock(","    action: action,","    boundaryId: CancelID.complex,","    unlockOption: .immediate \/\/ Automatic timing control","  )"]},{"type":"heading","anchor":"Benefits-of-upgrading","level":2,"text":"Benefits of upgrading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Simplified API","type":"text"}]},{"type":"text","text":": Single consistent method chain approach"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Enhanced safety","type":"text"}],"type":"strong"},{"text":": Automatic lock management prevents lock leaks","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Better TCA integration"}]},{"type":"text","text":": Natural fit with Effect patterns"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Reduced learning curve","type":"text"}]},{"type":"text","text":": Fewer API variants to learn"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Improved maintainability","type":"text"}],"type":"strong"},{"type":"text","text":": Cleaner, more predictable code patterns"}]}]}],"type":"orderedList"},{"type":"heading","anchor":"API-mapping-reference","level":2,"text":"API mapping reference"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Old API (1.2)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"New API (1.3)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":".withLock(operation:...)","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":".run {...}.lock(...)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".withLock(concatenating:...)"}]}],[{"type":"paragraph","inlineContent":[{"code":".lock(concatenating:...)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"operation: { send, unlock in }","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":".run { send in }","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"unlockOption","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Manual "},{"code":"unlock()","type":"codeVoice"},{"type":"text","text":" calls"}]}],[{"type":"paragraph","inlineContent":[{"text":"Automatic with ","type":"text"},{"code":"unlockOption","type":"codeVoice"},{"text":" control","type":"text"}]}]]]},{"type":"heading","anchor":"Testing-your-migration","level":2,"text":"Testing your migration"},{"type":"paragraph","inlineContent":[{"text":"After migrating, verify that:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Lock behavior is maintained"}],"type":"strong"},{"text":": Operations are still properly locked","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Error handling works"}]},{"type":"text","text":": Both operation errors and lock failures are handled"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Timing is correct"}]},{"type":"text","text":": Use "},{"type":"codeVoice","code":"unlockOption"},{"type":"text","text":" to adjust timing if needed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performance is maintained"}]},{"type":"text","text":": No regression in lock performance"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"heading","anchor":"Summary","level":2,"text":"Summary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman 1.3 represents a significant API simplification while maintaining all the functionality and safety guarantees of previous versions. The migration primarily involves moving from "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Effect.lock"},{"type":"text","text":" method chains, which provides a cleaner and more consistent API surface."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Key takeaways:","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Breaking changes"}]},{"text":": ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" methods removed","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Consistent API","type":"text"}],"type":"strong"},{"type":"text","text":": Single method chain approach with "},{"code":"Effect.lock","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Enhanced safety","type":"text"}]},{"text":": Automatic lock management only","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Better integration"}]},{"type":"text","text":": Natural fit with TCA Effect patterns"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The new API eliminates confusion between different locking approaches and provides a more maintainable codebase going forward.","type":"text"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Update your code from Lockman 1.2 to take advantage of Lockman 1.3â€™s simplified API and enhanced safety features."}],"references":{"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"}}}