{"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true,"title":"Essentials","anchor":"Essentials"}],"abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature."}]},{"text":"Adding Lockman as a dependency","anchor":"Adding-Lockman-as-a-dependency","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" file:"}]},{"syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"x.x.x\")","]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And add "},{"type":"codeVoice","code":"Lockman"},{"type":"text","text":" as a dependency of your package’s target:"}]},{"syntax":"swift","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"type":"codeListing"},{"level":2,"text":"Writing your first feature","type":"heading","anchor":"Writing-your-first-feature"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","isActive":true,"overridingTitleInlineContent":[{"code":"@LockmanSingleExecution","type":"codeVoice"}],"overridingTitle":"@LockmanSingleExecution"},{"type":"text","text":" macro."}]},{"level":3,"text":"Step 1: Define the Reducer","type":"heading","anchor":"Step-1-Define-the-Reducer"},{"type":"paragraph","inlineContent":[{"text":"First, define the basic Reducer structure:","type":"text"}]},{"syntax":"swift","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"type":"codeListing"},{"level":3,"text":"Step 2: Define State and Action","type":"heading","anchor":"Step-2-Define-State-and-Action"},{"type":"paragraph","inlineContent":[{"text":"Define the State to manage the processing status and the available actions:","type":"text"}]},{"syntax":"swift","code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    enum Action: ViewAction {","        case view(View)","        case internal(Internal)","        ","        @LockmanSingleExecution","        enum View {","            case startProcessButtonTapped","            ","            var lockmanInfo: LockmanSingleExecutionInfo {","                return .init(actionId: actionName, mode: .boundary)","            }","        }","        ","        enum Internal {","            case processStart","            case processCompleted","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Key points:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This example uses TCA’s ViewAction pattern, where view-related actions are nested under the ","type":"text"},{"code":"view","type":"codeVoice"},{"text":" case","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitleInlineContent":[{"code":"@LockmanSingleExecution","type":"codeVoice"}],"type":"reference","overridingTitle":"@LockmanSingleExecution"},{"type":"text","text":" macro to the nested View enum makes it conform to the "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"},{"type":"text","text":" protocol"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property defines how each action is controlled for locking:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Action identification: Provides the action identifier within the lock management system"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies","type":"text"}]}]}]}]}],"type":"unorderedList"},{"level":3,"text":"Step 3: Define CancelID","type":"heading","anchor":"Step-3-Define-CancelID"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a "},{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" to use as the cancellation identifier for Effects:"}]},{"syntax":"swift","code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" is used for Effect cancellation and lock boundary identification."}]},{"level":3,"text":"Step 4: Implement the Reducer body","type":"heading","anchor":"Step-4-Implement-the-Reducer-body"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement processing with exclusive control using the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true,"overridingTitle":"Reducer.lock","overridingTitleInlineContent":[{"type":"codeVoice","code":"Reducer.lock"}]},{"type":"text","text":" modifier:"}]},{"syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .run { send in","                await send(.processStart)","                \/\/ Simulate heavy processing","                try await Task.sleep(nanoseconds: 3_000_000_000)","                await send(.processCompleted)","            }","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            if error is LockmanSingleExecutionCancellationError {","                await send(.internal(.updateMessage(\"Processing is already in progress\")))","            }","        },","        for: \\.view","    )","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Key points about the ","type":"text"},{"overridingTitle":"Reducer.lock","overridingTitleInlineContent":[{"code":"Reducer.lock","type":"codeVoice"}],"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock"},{"text":" modifier:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatically applies lock management to all actions that implement "},{"type":"codeVoice","code":"LockmanAction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"text":": Specifies the identifier for Effect cancellation and lock boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"lockFailure","type":"codeVoice"},{"text":": Common handler for lock acquisition failures across all actions","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"for"},{"type":"text","text":": Case paths to check for nested LockmanAction conformance (in this example, "},{"type":"codeVoice","code":"\\.view"},{"type":"text","text":" checks actions nested in the view case)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Effects from non-LockmanAction actions pass through unchanged"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this implementation, the "},{"type":"codeVoice","code":"startProcessButtonTapped"},{"type":"text","text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times."}]},{"level":2,"text":"Alternative APIs","type":"heading","anchor":"Alternative-APIs"},{"level":3,"text":"Using Effect.lock() Method Chain","type":"heading","anchor":"Using-Effectlock-Method-Chain"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For individual effects that need locking, you can use the method chain API:"}]},{"syntax":"swift","code":["case .startProcessButtonTapped:","    return .run { send in","        await send(.processStart)","        try await Task.sleep(nanoseconds: 3_000_000_000)","        await send(.processCompleted)","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ Handler for lock acquisition failure","            await send(.lockFailed)","        }","    )"],"type":"codeListing"},{"level":3,"text":"Using Effect.run with Lock","type":"heading","anchor":"Using-Effectrun-with-Lock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you need traditional Effect.run behavior with lock management:"}]},{"syntax":"swift","code":["case .startProcessButtonTapped:","    return .run { send in","        await send(.processStart)","        \/\/ Simulate heavy processing","        try await Task.sleep(nanoseconds: 3_000_000_000)","        await send(.processCompleted)","    } catch: { error, send in","        \/\/ Handle errors during operation","        await send(.processError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            await send(.internal(.updateMessage(\"Processing is already in progress\")))","        }","    )"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach provides:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard TCA error handling with catch"}]}]},{"content":[{"inlineContent":[{"text":"Separate lock failure handler","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clean method chain syntax"}]}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/gettingstarted"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"modules":[{"name":"Lockman"}],"title":"Getting Started","roleHeading":"Article","role":"article"},"references":{"doc://Lockman/documentation/Lockman/Configuration":{"title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","kind":"article","role":"article","type":"topic","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"kind":"article","role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"type":"topic","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","url":"\/documentation\/lockman\/choosingstrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","url":"\/documentation\/lockman\/boundaryoverview","title":"Boundary","role":"article"},"doc://Lockman/documentation/Lockman/Unlock":{"type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","url":"\/documentation\/lockman\/unlock"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","kind":"article","title":"Debugging Guide","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","kind":"article"}}}