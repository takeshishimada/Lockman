{"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","title":"Strategies"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article","title":"SingleExecutionStrategy"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}]},{"text":"Execution Modes","type":"heading","level":2,"anchor":"Execution-Modes"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}]},{"text":"none - No Control","type":"heading","level":3,"anchor":"none-No-Control"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Executes all processing without exclusive control","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Used when temporarily disabling lock functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}]},{"text":"boundary - Boundary-level Exclusive Control","type":"heading","level":3,"anchor":"boundary-Boundary-level-Exclusive-Control"},{"syntax":"swift","type":"codeListing","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only one process can execute within the same boundary"}]}]},{"content":[{"inlineContent":[{"text":"Exclusive control at screen or component level","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Applied when wanting to control entire UI operations","type":"text"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"action - Action-level Exclusive Control","anchor":"action-Action-level-Exclusive-Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Prevents only duplicate execution of the same action"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Usage","anchor":"Usage"},{"level":3,"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"]},{"level":3,"type":"heading","text":"Usage with Reducer.lock()","anchor":"Usage-with-Reducerlock"},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            }","            .catch { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionCancellationError,","               case .actionAlreadyRunning(let info) = singleError.reason {","                await send(.showBusyMessage(\"\\(info.actionId) is currently running\"))","            }","        }","    )","}"]},{"level":3,"type":"heading","text":"Advanced Usage with Effect.lock","anchor":"Advanced-Usage-with-Effectlock"},{"type":"paragraph","inlineContent":[{"text":"For cases requiring fine-grained control:","type":"text"}]},{"code":["case .saveButtonTapped:","    return .run { send in","        try await saveUserData()","        await send(.saveCompleted)","    } catch: { error, send in","        await send(.saveError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        }","    )"],"syntax":"swift","type":"codeListing"},{"text":"Operation Examples","level":2,"anchor":"Operation-Examples","type":"heading"},{"text":"action mode","level":3,"anchor":"action-mode","type":"heading"},{"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"syntax":null,"type":"codeListing"},{"text":"boundary mode","level":3,"anchor":"boundary-mode","type":"heading"},{"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"syntax":null,"type":"codeListing"},{"text":"Error Handling","level":2,"anchor":"Error-Handling","type":"heading"},{"inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"overridingTitle":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"LockmanSingleExecutionCancellationError","level":3,"anchor":"LockmanSingleExecutionCancellationError","type":"heading"},{"inlineContent":[{"text":"This error conforms to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol and provides:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"type":"text","text":": Information about the cancelled action"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": Where the cancellation occurred"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reason"},{"type":"text","text":": Specific reason for cancellation"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CancellationReason cases:"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"boundaryAlreadyLocked","type":"text"}]},{"type":"text","text":" - Boundary is already locked"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Existing lock information"}]}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyRunning"}]},{"type":"text","text":" - Same action is already running"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"type":"text","text":": Running action information"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionCancellationError {","        switch singleError.reason {","        case .boundaryAlreadyLocked(let existingInfo):","            send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","        case .actionAlreadyRunning(let existingInfo):","            send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","        }","    } else {","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"references":{"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"role":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"role":"article","title":"GroupCoordinationStrategy","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","kind":"article","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"}}}