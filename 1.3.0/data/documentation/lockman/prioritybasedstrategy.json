{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/prioritybasedstrategy"]}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"type":"text","text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority processing can interrupt low-priority processing to execute, allowing important processing to be handled preferentially."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This strategy is used in situations where high-urgency processing or control based on importance is required."}],"type":"paragraph"},{"type":"heading","text":"Priority System","anchor":"Priority-System","level":2},{"type":"heading","text":"Priority Levels","anchor":"Priority-Levels","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"high","type":"text"}]},{"type":"text","text":" - High Priority"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt all other priority processing","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"System-level emergency processing or important user operations"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"low"}],"type":"strong"},{"text":" - Low Priority","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can interrupt none priority processing"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Interrupted by high priority"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Regular background processing"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"type":"text","text":" - No Priority"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bypasses priority system"}]}]},{"content":[{"inlineContent":[{"text":"Not interrupted by other processing","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Basic processing or temporary disabling","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Exclusive Execution Control","anchor":"Exclusive-Execution-Control","level":3},{"inlineContent":[{"type":"text","text":"Within the same priority level, control is based on the exclusive execution behavior setting of existing processing:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"exclusive","type":"text"}],"type":"strong"},{"text":" - Exclusive Execution","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Rejects new processing of the same priority","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Protects important processing from interruption","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"replaceable"}]},{"type":"text","text":" - Replaceable Execution"}],"type":"paragraph"},{"syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can be interrupted by new processing of the same priority","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied to search or update processing","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example","level":3},{"syntax":"swift","code":["@LockmanPriorityBased","enum ViewAction {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"],"type":"codeListing"},{"type":"heading","text":"Operation Examples","anchor":"Operation-Examples","level":2},{"type":"heading","text":"Interruption by Priority","anchor":"Interruption-by-Priority","level":3},{"syntax":null,"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"],"type":"codeListing"},{"type":"heading","text":"Control at Same Priority","anchor":"Control-at-Same-Priority","level":3},{"syntax":null,"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"],"type":"codeListing"},{"type":"heading","text":"Error Handling","anchor":"Error-Handling","level":2},{"inlineContent":[{"text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"isActive":true,"overridingTitle":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"text":" page.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Error Types","anchor":"Error-Types","level":3},{"inlineContent":[{"type":"text","text":"PriorityBasedStrategy uses two error types, both conforming to "},{"code":"LockmanCancellationError","type":"codeVoice"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"type":"heading","text":"LockmanPriorityBasedBlockedError","anchor":"LockmanPriorityBasedBlockedError","level":4},{"inlineContent":[{"text":"Occurs when a new action is blocked due to priority conflicts.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"BlockedReason cases:"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"higherPriorityExists","type":"text"}]},{"type":"text","text":" - Higher priority is running"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"samePriorityConflict"}],"type":"strong"},{"type":"text","text":" - Conflict at same priority"}]}]}]},{"type":"codeListing","code":["lockFailure: { error, send in","    if let blockedError = error as? LockmanPriorityBasedBlockedError {","        switch blockedError.reason {","        case .higherPriorityExists(let requested, let current):","            await send(.priorityConflict(\"Waiting due to high priority process running\"))","        case .samePriorityConflict(let priority):","            await send(.busyMessage(\"Process with same priority is running\"))","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"LockmanPriorityBasedCancellationError","level":4,"anchor":"LockmanPriorityBasedCancellationError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Occurs when an existing action is cancelled by preemption."}]},{"type":"codeListing","code":["catch handler: { error, send in","    if let cancellationError = error as? LockmanPriorityBasedCancellationError {","        await send(.processCancelled(\"Interrupted by high priority process: \\(cancellationError.cancelledInfo.actionId)\"))","    }","}"],"syntax":"swift"}]}],"metadata":{"roleHeading":"Article","role":"article","title":"PriorityBasedStrategy","modules":[{"name":"Lockman"}]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"title":"Strategies","anchor":"Strategies"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"kind":"article","role":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"title":"ConcurrencyLimitedStrategy","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","kind":"article","type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","kind":"article","role":"article"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"role":"article","title":"GroupCoordinationStrategy","abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","kind":"article","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"}}}