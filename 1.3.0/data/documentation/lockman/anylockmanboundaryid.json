{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"This wrapper enables different types of boundary identifiers to coexist in the same","type":"text"},{"text":" ","type":"text"},{"text":"collection while maintaining type safety for hashing and equality operations.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Type-Erasure-Benefits","type":"heading","text":"Type Erasure Benefits"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"type":"codeVoice","code":"Dictionary<AnyLockmanBoundaryId, Value>"},{"type":"text","text":" with mixed key types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Thread-Safety","type":"heading","text":"Thread Safety"},{"inlineContent":[{"type":"text","text":"Marked as "},{"code":"@unchecked Sendable","type":"codeVoice"},{"type":"text","text":" because "},{"code":"AnyHashable","type":"codeVoice"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}],"type":"paragraph"},{"level":2,"anchor":"Usage-Example","type":"heading","text":"Usage Example"},{"syntax":"swift","code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"],"type":"codeListing"}]}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"anchor":"Operators","generated":true,"title":"Operators"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"anchor":"Initializers","generated":true,"title":"Initializers"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"anchor":"Instance-Methods","generated":true,"title":"Instance Methods"},{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"symbolKind":"struct","modules":[{"name":"Lockman"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"role":"symbol","roleHeading":"Structure","externalID":"s:7Lockman03AnyA10BoundaryIdV","title":"AnyLockmanBoundaryId"},"variants":[{"paths":["\/documentation\/lockman\/anylockmanboundaryid"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"url":"\/documentation\/lockman\/anylockmanboundaryid","kind":"symbol","title":"AnyLockmanBoundaryId","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}]},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/SQ":{"identifier":"doc:\/\/Lockman\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"role":"symbol","title":"hash(into:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","type":"topic","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"different boundary ID types with identical values from colliding."}],"url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","kind":"symbol","title":"==(_:_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","abstract":[{"type":"text","text":"Compares two "},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"type":"text","text":" instances for equality by comparing their underlying "},{"code":"AnyHashable","type":"codeVoice"},{"text":" values.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":", ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"kind":"article","abstract":[],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","role":"collectionGroup","title":"Equatable Implementations","type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"LockmanBoundaryId","preciseIdentifier":"s:7Lockman0A10BoundaryIda"},{"kind":"text","text":")"}],"url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","title":"init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","type":"topic","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol"},"doc://Lockman/SH":{"identifier":"doc:\/\/Lockman\/SH","type":"unresolvable","title":"Swift.Hashable"}}}