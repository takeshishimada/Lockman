{"seeAlsoSections":[{"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/boundaryoverview"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A Boundary is the ","type":"text"},{"inlineContent":[{"type":"text","text":"exclusive control boundary"}],"type":"strong"},{"text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution.","type":"text"}]},{"type":"codeListing","code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using CancelID as a boundary provides the following benefits:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Natural integration with TCA","type":"text"}]},{"type":"text","text":" - Leverages existing TCA mechanisms"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Clear boundary definition"}]},{"type":"text","text":" - CancelID clearly defines the scope of exclusive control"}]}]}]},{"type":"heading","text":"Boundary Specifications","level":2,"anchor":"Boundary-Specifications"},{"type":"heading","text":"1. No exclusive control across boundaries","level":3,"anchor":"1-No-exclusive-control-across-boundaries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control between different Boundaries is not possible:"}]},{"type":"codeListing","code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Since these are treated as separate boundaries, load can be executed even while save is running.","type":"text"}]},{"type":"heading","text":"2. Only one Boundary per reducer","level":3,"anchor":"2-Only-one-Boundary-per-reducer"},{"inlineContent":[{"type":"text","text":"You cannot specify multiple Boundaries for a single reducer:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"],"type":"codeListing"},{"inlineContent":[{"text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"],"type":"codeListing"},{"level":2,"text":"Summary","anchor":"Summary","type":"heading"},{"inlineContent":[{"type":"text","text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness."}],"type":"paragraph"}]}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article","title":"Boundary"},"kind":"article","references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/lockman\/errorhandling","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/Unlock":{"type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","url":"\/documentation\/lockman\/unlock"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"type":"topic","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","url":"\/documentation\/lockman\/choosingstrategy"},"doc://Lockman/documentation/Lockman/GettingStarted":{"type":"topic","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","title":"Getting Started","url":"\/documentation\/lockman\/gettingstarted"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/Configuration":{"title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","kind":"article","role":"article","type":"topic","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","kind":"article","title":"Debugging Guide","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","kind":"article"}}}