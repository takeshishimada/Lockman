{"sections":[],"variants":[{"paths":["\/documentation\/lockman\/lockmandynamiccondition()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"title":"LockmanDynamicCondition()","externalID":"s:7Lockman0A16DynamicConditionyycfm","modules":[{"name":"Lockman"}],"role":"symbol","roleHeading":"Macro","symbolKind":"macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}]},"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","text":"LockmanDynamicConditionAction","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"Apply this macro to an enum declaration to automatically generate:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanDynamicConditionAction"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"actionName","type":"codeVoice"},{"text":" property that returns the enum case name as a String","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"extractMetadata()","type":"codeVoice"},{"type":"text","text":" method that extracts enum associated values as metadata"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property with default condition (always success)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The macro enables you to define custom locking conditions at runtime based on:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Current state values","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Other locks in the same boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Time-based conditions"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Any custom logic"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Example usage with TCA:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          return .run { send in","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","          .lock(action: lockInfo, boundaryId: CancelID.fetch)","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          return .run { send in","            try await processTask(size: size)","            await send(.taskCompleted)","          }","          .lock(action: lockInfo, boundaryId: CancelID.process)","          }","        }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"}]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"url":"\/documentation\/lockman\/lockmandynamiccondition()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"kind":"symbol","title":"LockmanDynamicCondition()"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"url":"\/documentation\/lockman\/lockmandynamicconditionaction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"kind":"symbol","title":"LockmanDynamicConditionAction","role":"symbol","abstract":[{"text":"A protocol for actions that support dynamic condition-based locking.","type":"text"}]}}}