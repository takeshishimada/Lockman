{"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials","anchor":"Essentials"}],"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article","title":"Error Handling"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"anchor":"Common-Error-Handling-Patterns","level":2,"type":"heading","text":"Common Error Handling Patterns"},{"anchor":"lockFailure-Handler-with-Reducerlock","level":3,"type":"heading","text":"lockFailure Handler with Reducer.lock()"},{"inlineContent":[{"text":"Basic lockFailure handler structure used in all strategies:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"Benefits of centralized error handling:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Consistent error handling across all actions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Single place to update error messages"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Easier to maintain and test"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Parameters:"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"error"},{"type":"text","text":": The error that occurred (strategy-specific error type)"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"send"},{"type":"text","text":": Function for sending feedback to the user"}],"type":"paragraph"}]}]},{"anchor":"catch-handler-Pattern","level":3,"type":"heading","text":"catch handler Pattern"},{"inlineContent":[{"text":"Handling general errors that occur during processing:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"],"type":"codeListing"},{"inlineContent":[{"text":"This handler catches errors thrown within the operation and appropriately notifies the user.","type":"text"}],"type":"paragraph"},{"anchor":"Types-of-Errors-and-Solutions","level":2,"type":"heading","text":"Types of Errors and Solutions"},{"anchor":"1-Lock-Acquisition-Failure-Already-Locked","level":3,"type":"heading","text":"1. Lock Acquisition Failure (Already Locked)"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": Occurs when the same processing or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    await send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"],"type":"codeListing"},{"anchor":"2-PermissionPriority-Conflicts","level":3,"type":"heading","text":"2. Permission\/Priority Conflicts"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": Occurs due to higher priority processing or group rule constraints"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"type":"codeListing"},{"anchor":"3-Cancellation-Notification","level":3,"type":"heading","text":"3. Cancellation Notification"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"],"type":"codeListing"},{"anchor":"Best-Practices","level":2,"type":"heading","text":"Best Practices"},{"anchor":"1-Proper-Error-Type-Casting","level":3,"type":"heading","text":"1. Proper Error Type Casting"},{"syntax":"swift","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"type":"codeListing"},{"anchor":"2-User-Friendly-Messages","level":3,"type":"heading","text":"2. User-Friendly Messages"},{"syntax":"swift","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"],"type":"codeListing"},{"anchor":"3-Utilizing-Additional-Information","level":3,"type":"heading","text":"3. Utilizing Additional Information"},{"inlineContent":[{"type":"text","text":"Many errors contain additional information:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start processing\"))","        }","    }",")"],"type":"codeListing"},{"anchor":"Strategy-Specific-Errors","level":2,"type":"heading","text":"Strategy-Specific Errors"},{"inlineContent":[{"type":"text","text":"All strategy errors now conform to "},{"code":"LockmanCancellationError","type":"codeVoice"},{"type":"text","text":" protocol, providing consistent access to:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"errorDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Localized error descriptions"}]}]}]},{"anchor":"Error-Types-by-Strategy","level":3,"type":"heading","text":"Error Types by Strategy:"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"SingleExecutionStrategy"}],"type":"strong"},{"text":": ","type":"text"},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"text":" - Duplicate execution prevention","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"PriorityBasedStrategy","type":"text"}]},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedBlockedError","type":"codeVoice"},{"type":"text","text":" - New action blocked by priority"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedCancellationError"},{"type":"text","text":" - Existing action cancelled by preemption"}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy"}]},{"text":": ","type":"text"},{"code":"LockmanGroupCoordinationCancellationError","type":"codeVoice"},{"text":" - Group rule violations","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"ConcurrencyLimitedStrategy","type":"text"}],"type":"strong"},{"text":": ","type":"text"},{"type":"codeVoice","code":"LockmanConcurrencyLimitedCancellationError"},{"text":" - Concurrent execution limit exceeded","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","overridingTitle":"DynamicConditionStrategy","overridingTitleInlineContent":[{"text":"DynamicConditionStrategy","type":"text"}]},{"type":"text","text":" - Condition mismatch errors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"overridingTitle":"CompositeStrategy","overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},{"type":"text","text":" - Composite strategy errors"}]}]}]}],"kind":"content"}],"references":{"doc://Lockman/documentation/Lockman/Configuration":{"title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","kind":"article","role":"article","type":"topic","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"url":"\/documentation\/lockman\/configuration"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"type":"topic","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","url":"\/documentation\/lockman\/choosingstrategy"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","url":"\/documentation\/lockman\/boundaryoverview","title":"Boundary","role":"article"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","kind":"article","title":"Debugging Guide","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/GettingStarted":{"type":"topic","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","title":"Getting Started","url":"\/documentation\/lockman\/gettingstarted"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/Unlock":{"type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","url":"\/documentation\/lockman\/unlock"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"title":"DynamicConditionStrategy","type":"topic","kind":"article","role":"article"}}}