{"includedArchiveIdentifiers":["Lockman"],"interfaceLanguages":{"swift":[{"children":[{"title":"Essentials","type":"groupMarker"},{"path":"\/documentation\/lockman\/gettingstarted","title":"Getting Started","type":"article"},{"path":"\/documentation\/lockman\/boundaryoverview","title":"Boundary","type":"article"},{"path":"\/documentation\/lockman\/lock","title":"Lock","type":"article"},{"path":"\/documentation\/lockman\/unlock","title":"Unlock","type":"article"},{"path":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","type":"article"},{"path":"\/documentation\/lockman\/configuration","title":"Configuration","type":"article"},{"path":"\/documentation\/lockman\/errorhandling","title":"Error Handling","type":"article"},{"path":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","type":"article"},{"title":"Strategies","type":"groupMarker"},{"path":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","type":"article"},{"path":"\/documentation\/lockman\/prioritybasedstrategy","title":"PriorityBasedStrategy","type":"article"},{"path":"\/documentation\/lockman\/concurrencylimitedstrategy","title":"ConcurrencyLimitedStrategy","type":"article"},{"path":"\/documentation\/lockman\/groupcoordinationstrategy","title":"GroupCoordinationStrategy","type":"article"},{"path":"\/documentation\/lockman\/dynamicconditionstrategy","title":"DynamicConditionStrategy","type":"article"},{"path":"\/documentation\/lockman\/compositestrategy","title":"CompositeStrategy","type":"article"},{"title":"Articles","type":"groupMarker"},{"children":[{"title":"Migration Guides","type":"groupMarker"},{"path":"\/documentation\/lockman\/migratingto1.2","title":"Migrating to 1.2","type":"article"},{"path":"\/documentation\/lockman\/migratingto1.1","title":"Migrating to 1.1","type":"article"},{"path":"\/documentation\/lockman\/migratingto1.0","title":"Migrating to 1.0","type":"article"}],"path":"\/documentation\/lockman\/migrationguides","title":"Migration Guides","type":"symbol"},{"path":"\/documentation\/lockman\/migratingto1.0","title":"Migrating to 1.0","type":"article"},{"path":"\/documentation\/lockman\/migratingto1.1","title":"Migrating to 1.1","type":"article"},{"path":"\/documentation\/lockman\/migratingto1.2","title":"Migrating to 1.2","type":"article"},{"path":"\/documentation\/lockman\/migratingto1.3","title":"Migrating to 1.3","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanautounlock\/init(unlocktoken:)","title":"init(unlockToken: LockmanUnlock<B, I>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanautounlock\/islocked","title":"var isLocked: Bool","type":"property"},{"path":"\/documentation\/lockman\/lockmanautounlock\/token","title":"var token: LockmanUnlock<B, I>?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanautounlock\/manualunlock()","title":"func manualUnlock()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanautounlock\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/lockman\/lockmanautounlock\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/lockman\/lockmanautounlock\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/lockman\/lockmanautounlock\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanautounlock","title":"LockmanAutoUnlock","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/init(strategy1:strategy2:)","title":"init(strategy1: S1, strategy2: S2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanCompositeInfo2<I1, I2>) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanCompositeInfo2<I1, I2>)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanCompositeInfo2<I1, I2>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/i","title":"LockmanCompositeStrategy2.I","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy2\/makestrategyid(strategy1:strategy2:)","title":"static func makeStrategyId(strategy1: S1, strategy2: S2) -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositestrategy2","title":"LockmanCompositeStrategy2","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/init(strategy1:strategy2:strategy3:)","title":"init(strategy1: S1, strategy2: S2, strategy3: S3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanCompositeInfo3<I1, I2, I3>) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanCompositeInfo3<I1, I2, I3>)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanCompositeInfo3<I1, I2, I3>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/i","title":"LockmanCompositeStrategy3.I","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy3\/makestrategyid(strategy1:strategy2:strategy3:)","title":"static func makeStrategyId(strategy1: S1, strategy2: S2, strategy3: S3) -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositestrategy3","title":"LockmanCompositeStrategy3","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/init(strategy1:strategy2:strategy3:strategy4:)","title":"init(strategy1: S1, strategy2: S2, strategy3: S3, strategy4: S4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanCompositeInfo4<I1, I2, I3, I4>) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanCompositeInfo4<I1, I2, I3, I4>)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanCompositeInfo4<I1, I2, I3, I4>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/i","title":"LockmanCompositeStrategy4.I","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy4\/makestrategyid(strategy1:strategy2:strategy3:strategy4:)","title":"static func makeStrategyId(strategy1: S1, strategy2: S2, strategy3: S3, strategy4: S4) -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositestrategy4","title":"LockmanCompositeStrategy4","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/init(strategy1:strategy2:strategy3:strategy4:strategy5:)","title":"init(strategy1: S1, strategy2: S2, strategy3: S3, strategy4: S4, strategy5: S5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanCompositeInfo5<I1, I2, I3, I4, I5>) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanCompositeInfo5<I1, I2, I3, I4, I5>)","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanCompositeInfo5<I1, I2, I3, I4, I5>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/i","title":"LockmanCompositeStrategy5.I","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"},{"path":"\/documentation\/lockman\/lockmancompositestrategy5\/makestrategyid(strategy1:strategy2:strategy3:strategy4:strategy5:)","title":"static func makeStrategyId(strategy1: S1, strategy2: S2, strategy3: S3, strategy4: S4, strategy5: S5) -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositestrategy5","title":"LockmanCompositeStrategy5","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanConcurrencyLimitedInfo) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanConcurrencyLimitedInfo)","type":"method"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanConcurrencyLimitedInfo)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/i","title":"LockmanConcurrencyLimitedStrategy.I","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/shared","title":"static let shared: LockmanConcurrencyLimitedStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitedstrategy","title":"LockmanConcurrencyLimitedStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanDynamicConditionInfo) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanDynamicConditionInfo)","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanDynamicConditionInfo)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/i","title":"LockmanDynamicConditionStrategy.I","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/shared","title":"static let shared: LockmanDynamicConditionStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmandynamicconditionstrategy","title":"LockmanDynamicConditionStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanGroupCoordinatedInfo) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanGroupCoordinatedInfo)","type":"method"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanGroupCoordinatedInfo)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/i","title":"LockmanGroupCoordinationStrategy.I","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/shared","title":"static let shared: LockmanGroupCoordinationStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationstrategy","title":"LockmanGroupCoordinationStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanPriorityBasedInfo) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanPriorityBasedInfo)","type":"method"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanPriorityBasedInfo)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/i","title":"LockmanPriorityBasedStrategy.I","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/shared","title":"static let shared: LockmanPriorityBasedStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmanprioritybasedstrategy","title":"LockmanPriorityBasedStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: LockmanSingleExecutionInfo) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: LockmanSingleExecutionInfo)","type":"method"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: LockmanSingleExecutionInfo)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/i","title":"LockmanSingleExecutionStrategy.I","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/shared","title":"static let shared: LockmanSingleExecutionStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/executionmode\/action","title":"case action","type":"case"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/executionmode\/boundary","title":"case boundary","type":"case"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/executionmode\/none","title":"case none","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/executionmode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/executionmode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy\/executionmode","title":"LockmanSingleExecutionStrategy.ExecutionMode","type":"enum"}],"path":"\/documentation\/lockman\/lockmansingleexecutionstrategy","title":"LockmanSingleExecutionStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/isregistered(_:)","title":"func isRegistered<S>(S.Type) -> Bool","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/isregistered(id:)","title":"func isRegistered(id: LockmanStrategyId) -> Bool","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/register(_:)","title":"func register<S>(S) throws","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/register(id:strategy:)","title":"func register<S>(id: LockmanStrategyId, strategy: S) throws","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/registerall(_:)-3qht0","title":"func registerAll<S>([(LockmanStrategyId, S)]) throws","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/registerall(_:)-8911m","title":"func registerAll<S>([S]) throws","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/registeredstrategyids()","title":"func registeredStrategyIds() -> [LockmanStrategyId]","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/registeredstrategyinfo()","title":"func registeredStrategyInfo() -> [(id: LockmanStrategyId, typeName: String, registeredAt: Date)]","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/removeallstrategies()","title":"func removeAllStrategies()","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/resolve(_:)","title":"func resolve<S>(S.Type) throws -> AnyLockmanStrategy<S.I>","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/resolve(id:expecting:)","title":"func resolve<I>(id: LockmanStrategyId, expecting: I.Type) throws -> AnyLockmanStrategy<I>","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/strategycount()","title":"func strategyCount() -> Int","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/unregister(_:)","title":"func unregister<S>(S.Type) -> Bool","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategycontainer\/unregister(id:)","title":"func unregister(id: LockmanStrategyId) -> Bool","type":"method"}],"path":"\/documentation\/lockman\/lockmanstrategycontainer","title":"LockmanStrategyContainer","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanaction\/i","title":"I","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/lockman\/lockmanaction\/lockmaninfo-6h945","title":"var lockmanInfo: LockmanDynamicConditionInfo","type":"property"}],"title":"LockmanAction Implementations","type":"groupMarker"}],"path":"\/documentation\/lockman\/lockmanaction\/lockmaninfo-1c2mk","title":"var lockmanInfo: Self.I","type":"property"},{"children":[{"children":[{"path":"\/documentation\/lockman\/lockmanaction\/unlockoption-4mrjj","title":"var unlockOption: LockmanUnlockOption","type":"property"}],"title":"LockmanAction Implementations","type":"groupMarker"}],"path":"\/documentation\/lockman\/lockmanaction\/unlockoption-2j8sw","title":"var unlockOption: LockmanUnlockOption","type":"property"}],"path":"\/documentation\/lockman\/lockmanaction","title":"LockmanAction","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction2\/i1","title":"I1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction2\/i2","title":"I2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction2\/s1","title":"S1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction2\/s2","title":"S2","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction2\/lockmaninfo","title":"var lockmanInfo: LockmanCompositeInfo2<Self.I1, Self.I2>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction2\/makecompositestrategy(strategy1:strategy2:)","title":"func makeCompositeStrategy(strategy1: Self.S1, strategy2: Self.S2) -> AnyLockmanStrategy<LockmanCompositeInfo2<Self.I1, Self.I2>>","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositeaction2","title":"LockmanCompositeAction2","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/i1","title":"I1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/i2","title":"I2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/i3","title":"I3","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/s1","title":"S1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/s2","title":"S2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/s3","title":"S3","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/lockmaninfo","title":"var lockmanInfo: LockmanCompositeInfo3<Self.I1, Self.I2, Self.I3>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction3\/makecompositestrategy(strategy1:strategy2:strategy3:)","title":"func makeCompositeStrategy(strategy1: Self.S1, strategy2: Self.S2, strategy3: Self.S3) -> AnyLockmanStrategy<LockmanCompositeInfo3<Self.I1, Self.I2, Self.I3>>","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositeaction3","title":"LockmanCompositeAction3","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/i1","title":"I1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/i2","title":"I2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/i3","title":"I3","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/i4","title":"I4","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/s1","title":"S1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/s2","title":"S2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/s3","title":"S3","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/s4","title":"S4","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/lockmaninfo","title":"var lockmanInfo: LockmanCompositeInfo4<Self.I1, Self.I2, Self.I3, Self.I4>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction4\/makecompositestrategy(strategy1:strategy2:strategy3:strategy4:)","title":"func makeCompositeStrategy(strategy1: Self.S1, strategy2: Self.S2, strategy3: Self.S3, strategy4: Self.S4) -> AnyLockmanStrategy<LockmanCompositeInfo4<Self.I1, Self.I2, Self.I3, Self.I4>>","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositeaction4","title":"LockmanCompositeAction4","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/i1","title":"I1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/i2","title":"I2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/i3","title":"I3","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/i4","title":"I4","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/i5","title":"I5","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/s1","title":"S1","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/s2","title":"S2","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/s3","title":"S3","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/s4","title":"S4","type":"associatedtype"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/s5","title":"S5","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/lockmaninfo","title":"var lockmanInfo: LockmanCompositeInfo5<Self.I1, Self.I2, Self.I3, Self.I4, Self.I5>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeaction5\/makecompositestrategy(strategy1:strategy2:strategy3:strategy4:strategy5:)","title":"func makeCompositeStrategy(strategy1: Self.S1, strategy2: Self.S2, strategy3: Self.S3, strategy4: Self.S4, strategy5: Self.S5) -> AnyLockmanStrategy<LockmanCompositeInfo5<Self.I1, Self.I2, Self.I3, Self.I4, Self.I5>>","type":"method"}],"path":"\/documentation\/lockman\/lockmancompositeaction5","title":"LockmanCompositeAction5","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencygroup\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencygroup\/limit","title":"var limit: LockmanConcurrencyLimit","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencygroup","title":"LockmanConcurrencyGroup","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedaction\/actionname","title":"var actionName: String","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitedaction","title":"LockmanConcurrencyLimitedAction","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionaction\/actionname","title":"var actionName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/lockman\/lockmandynamicconditionaction\/with(condition:)-3mp75","title":"func with(condition: () -> LockmanResult) -> LockmanDynamicConditionInfo","type":"method"}],"title":"LockmanDynamicConditionAction Implementations","type":"groupMarker"}],"path":"\/documentation\/lockman\/lockmandynamicconditionaction\/with(condition:)-9p83x","title":"func with(condition: () -> LockmanResult) -> LockmanDynamicConditionInfo","type":"method"}],"path":"\/documentation\/lockman\/lockmandynamicconditionaction","title":"LockmanDynamicConditionAction","type":"protocol"},{"path":"\/documentation\/lockman\/lockmanerror","title":"LockmanError","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedaction\/actionname","title":"var actionName: String","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedaction\/lockmaninfo","title":"var lockmanInfo: LockmanGroupCoordinatedInfo","type":"property"}],"path":"\/documentation\/lockman\/lockmangroupcoordinatedaction","title":"LockmanGroupCoordinatedAction","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmaninfo\/actionid","title":"var actionId: LockmanActionId","type":"property"},{"children":[{"children":[{"path":"\/documentation\/lockman\/lockmaninfo\/debugadditionalinfo-gf82","title":"var debugAdditionalInfo: String","type":"property"}],"title":"LockmanInfo Implementations","type":"groupMarker"}],"path":"\/documentation\/lockman\/lockmaninfo\/debugadditionalinfo-1q31t","title":"var debugAdditionalInfo: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/lockman\/lockmaninfo\/iscancellationtarget-6bx8d","title":"var isCancellationTarget: Bool","type":"property"}],"title":"LockmanInfo Implementations","type":"groupMarker"}],"path":"\/documentation\/lockman\/lockmaninfo\/iscancellationtarget-6acnl","title":"var isCancellationTarget: Bool","type":"property"},{"path":"\/documentation\/lockman\/lockmaninfo\/strategyid","title":"var strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmaninfo\/uniqueid","title":"var uniqueId: UUID","type":"property"}],"path":"\/documentation\/lockman\/lockmaninfo","title":"LockmanInfo","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanissuereporter\/reportissue(_:file:line:)","title":"static func reportIssue(String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/lockman\/lockmanissuereporter","title":"LockmanIssueReporter","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprecedingcancellationerror\/boundaryid","title":"var boundaryId: any LockmanBoundaryId","type":"property"},{"path":"\/documentation\/lockman\/lockmanprecedingcancellationerror\/lockmaninfo","title":"var lockmanInfo: any LockmanInfo","type":"property"}],"path":"\/documentation\/lockman\/lockmanprecedingcancellationerror","title":"LockmanPrecedingCancellationError","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedaction\/actionname","title":"var actionName: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedaction\/lockmaninfo","title":"var lockmanInfo: LockmanPriorityBasedInfo","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedaction\/priority(_:)","title":"func priority(LockmanPriorityBasedInfo.Priority) -> LockmanPriorityBasedInfo","type":"method"},{"path":"\/documentation\/lockman\/lockmanprioritybasedaction\/priority(_:_:)","title":"func priority(String, LockmanPriorityBasedInfo.Priority) -> LockmanPriorityBasedInfo","type":"method"}],"path":"\/documentation\/lockman\/lockmanprioritybasedaction","title":"LockmanPriorityBasedAction","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionaction\/actionname","title":"var actionName: String","type":"property"}],"path":"\/documentation\/lockman\/lockmansingleexecutionaction","title":"LockmanSingleExecutionAction","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategy\/i","title":"I","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategy\/strategyid","title":"var strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: Self.I) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: Self.I)","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: Self.I)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/lockmanstrategy","title":"LockmanStrategy","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","title":"static func == (AnyLockmanBoundaryId, AnyLockmanBoundaryId) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","title":"init(any LockmanBoundaryId)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanboundaryid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/anylockmanboundaryid","title":"AnyLockmanBoundaryId","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","title":"static func == (AnyLockmanGroupId, AnyLockmanGroupId) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","title":"init(any LockmanGroupId)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmangroupid\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmangroupid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/anylockmangroupid","title":"AnyLockmanGroupId","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","title":"init<S>(S)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/strategyid","title":"var strategyId: LockmanStrategyId","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/canlock(boundaryid:info:)","title":"func canLock<B>(boundaryId: B, info: I) -> LockmanResult","type":"method"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","title":"func cleanUp()","type":"method"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(boundaryid:)","title":"func cleanUp<B>(boundaryId: B)","type":"method"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","title":"func getCurrentLocks() -> [AnyLockmanBoundaryId : [any LockmanInfo]]","type":"method"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/lock(boundaryid:info:)","title":"func lock<B>(boundaryId: B, info: I)","type":"method"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/unlock(boundaryid:info:)","title":"func unlock<B>(boundaryId: B, info: I)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","title":"static func makeStrategyId() -> LockmanStrategyId","type":"method"}],"path":"\/documentation\/lockman\/anylockmanstrategy","title":"AnyLockmanStrategy","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/init(action:boundaryid:reason:)","title":"init(action: any LockmanAction, boundaryId: any LockmanBoundaryId, reason: any LockmanError)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/action","title":"let action: any LockmanAction","type":"property"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/boundaryid","title":"let boundaryId: any LockmanBoundaryId","type":"property"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/reason","title":"let reason: any LockmanError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmancancellationerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmancancellationerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/lockman\/lockmancancellationerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmancancellationerror","title":"LockmanCancellationError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/init(strategyid:actionid:lockmaninfoforstrategy1:lockmaninfoforstrategy2:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, lockmanInfoForStrategy1: I1, lockmanInfoForStrategy2: I2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/lockmaninfoforstrategy1","title":"let lockmanInfoForStrategy1: I1","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/lockmaninfoforstrategy2","title":"let lockmanInfoForStrategy2: I2","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo2\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo2\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo2\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmancompositeinfo2","title":"LockmanCompositeInfo2","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/init(strategyid:actionid:lockmaninfoforstrategy1:lockmaninfoforstrategy2:lockmaninfoforstrategy3:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, lockmanInfoForStrategy1: I1, lockmanInfoForStrategy2: I2, lockmanInfoForStrategy3: I3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/lockmaninfoforstrategy1","title":"let lockmanInfoForStrategy1: I1","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/lockmaninfoforstrategy2","title":"let lockmanInfoForStrategy2: I2","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/lockmaninfoforstrategy3","title":"let lockmanInfoForStrategy3: I3","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo3\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo3\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo3\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmancompositeinfo3","title":"LockmanCompositeInfo3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/init(strategyid:actionid:lockmaninfoforstrategy1:lockmaninfoforstrategy2:lockmaninfoforstrategy3:lockmaninfoforstrategy4:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, lockmanInfoForStrategy1: I1, lockmanInfoForStrategy2: I2, lockmanInfoForStrategy3: I3, lockmanInfoForStrategy4: I4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/lockmaninfoforstrategy1","title":"let lockmanInfoForStrategy1: I1","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/lockmaninfoforstrategy2","title":"let lockmanInfoForStrategy2: I2","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/lockmaninfoforstrategy3","title":"let lockmanInfoForStrategy3: I3","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/lockmaninfoforstrategy4","title":"let lockmanInfoForStrategy4: I4","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo4\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo4\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo4\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmancompositeinfo4","title":"LockmanCompositeInfo4","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/init(strategyid:actionid:lockmaninfoforstrategy1:lockmaninfoforstrategy2:lockmaninfoforstrategy3:lockmaninfoforstrategy4:lockmaninfoforstrategy5:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, lockmanInfoForStrategy1: I1, lockmanInfoForStrategy2: I2, lockmanInfoForStrategy3: I3, lockmanInfoForStrategy4: I4, lockmanInfoForStrategy5: I5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/lockmaninfoforstrategy1","title":"let lockmanInfoForStrategy1: I1","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/lockmaninfoforstrategy2","title":"let lockmanInfoForStrategy2: I2","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/lockmaninfoforstrategy3","title":"let lockmanInfoForStrategy3: I3","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/lockmaninfoforstrategy4","title":"let lockmanInfoForStrategy4: I4","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/lockmaninfoforstrategy5","title":"let lockmanInfoForStrategy5: I5","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo5\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmancompositeinfo5\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmancompositeinfo5\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmancompositeinfo5","title":"LockmanCompositeInfo5","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/init(strategyid:actionid:_:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, LockmanConcurrencyLimit)","type":"init"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/init(strategyid:actionid:group:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, group: any LockmanConcurrencyGroup)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/concurrencyid","title":"let concurrencyId: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/limit","title":"let limit: LockmanConcurrencyLimit","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitedinfo","title":"LockmanConcurrencyLimitedInfo","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/==(_:_:)","title":"static func == (LockmanDynamicConditionInfo, LockmanDynamicConditionInfo) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/init(strategyid:actionid:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId)","type":"init"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/init(strategyid:actionid:condition:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, condition: () -> LockmanResult)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/condition","title":"let condition: () -> LockmanResult","type":"property"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmandynamicconditioninfo\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmandynamicconditioninfo","title":"LockmanDynamicConditionInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/init(_:lockcondition:)","title":"init((inout State, Action) -> Effect<Action>, lockCondition: ((State, Action) -> LockmanResult)?)","type":"init"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/init(base:lockcondition:)","title":"init(base: Reduce<State, Action>, lockCondition: ((State, Action) -> LockmanResult)?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(state:action:priority:unlockoption:handlecancellationerrors:operation:catch:lockfailure:lockaction:boundaryid:lockcondition:fileid:filepath:line:column:)","title":"func lock<B, LA>(state: State, action: Action, priority: TaskPriority?, unlockOption: LockmanUnlockOption?, handleCancellationErrors: Bool?, operation: (Send<Action>) async throws -> Void, catch: ((any Error, Send<Action>) async -> Void)?, lockFailure: ((any Error, Send<Action>) async -> Void)?, lockAction: LA, boundaryId: B, lockCondition: ((State, Action) -> LockmanResult)?, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> Effect<Action>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/reduce(into:action:)","title":"func reduce(into: inout State, action: Action) -> Effect<Action>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/body","title":"var body: Never","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/_printchanges(_:)","title":"func _printChanges(_ReducerPrinter<Self.State, Self.Action>?) -> _PrintChangesReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/dependency(_:)","title":"func dependency<Value>(Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/dependency(_:_:)","title":"func dependency<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/foreach(_:action:)","title":"func forEach<DestinationState, DestinationAction>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/foreach(_:action:destination:fileid:filepath:line:column:)-2q4d5","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: AnyCasePath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/foreach(_:action:destination:fileid:filepath:line:column:)-5eb0b","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/foreach(_:action:element:fileid:filepath:line:column:)-26766","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: AnyCasePath<Self.Action, (ID, ElementAction)>, element: () -> Element, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/foreach(_:action:element:fileid:filepath:line:column:)-2kpo7","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: CaseKeyPath<Self.Action, IdentifiedAction<ID, ElementAction>>, element: () -> Element, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-1ppfa","title":"func ifCaseLet<CaseState, CaseAction, Case>(AnyCasePath<Self.State, CaseState>, action: AnyCasePath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-5ul2q","title":"func ifCaseLet<CaseState, CaseAction, Case>(CaseKeyPath<Self.State, CaseState>, action: CaseKeyPath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> _IfCaseLetReducer<Self, Case>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:)","title":"func ifLet<ChildState, ChildAction>(WritableKeyPath<Self.State, PresentationState<ChildState>>, action: CaseKeyPath<Self.Action, PresentationAction<ChildAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:destination:fileid:filepath:line:column:)-2gvha","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:destination:fileid:filepath:line:column:)-jm6y","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:fileid:filepath:line:column:)-1mn5t","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:fileid:filepath:line:column:)-7o00w","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:fileid:filepath:line:column:)-8oecq","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:fileid:filepath:line:column:)-8yaje","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> _IfLetReducer<Self, EmptyReducer<WrappedState, WrappedAction>>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:then:fileid:filepath:line:column:)-6dlf6","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/iflet(_:action:then:fileid:filepath:line:column:)-78jox","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(boundaryid:unlockoption:lockfailure:)","title":"func lock(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(boundaryid:unlockoption:lockfailure:for:)","title":"func lock<Value1>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:)","title":"func lock<Value1, Value2>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:_:)","title":"func lock<Value1, Value2, Value3>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>, CaseKeyPath<Self.Action, Value3>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:_:_:)","title":"func lock<Value1, Value2, Value3, Value4>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>, CaseKeyPath<Self.Action, Value3>, CaseKeyPath<Self.Action, Value4>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:_:_:_:)","title":"func lock<Value1, Value2, Value3, Value4, Value5>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>, CaseKeyPath<Self.Action, Value3>, CaseKeyPath<Self.Action, Value4>, CaseKeyPath<Self.Action, Value5>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/lock(condition:)","title":"func lock(condition: (Self.State, Self.Action) -> LockmanResult) -> LockmanDynamicConditionReducer<Self.State, Self.Action>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/onchange(of:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/onchange(of:removeduplicates:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, removeDuplicates: (V, V) -> Bool, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/signpost(_:log:)","title":"func signpost(String, log: OSLog) -> _SignpostReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/transformdependency(_:transform:)","title":"func transformDependency<V>(WritableKeyPath<DependencyValues, V>, transform: (inout V) -> Void) -> _DependencyKeyWritingReducer<Self>","type":"method"}],"path":"\/documentation\/lockman\/lockmandynamicconditionreducer\/reducer-implementations","title":"Reducer Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmandynamicconditionreducer","title":"LockmanDynamicConditionReducer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/init(strategyid:actionid:groupid:coordinationrole:)","title":"init<G>(strategyId: LockmanStrategyId, actionId: LockmanActionId, groupId: G, coordinationRole: LockmanGroupCoordinationRole)","type":"init"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/init(strategyid:actionid:groupids:coordinationrole:)","title":"init<G>(strategyId: LockmanStrategyId, actionId: LockmanActionId, groupIds: Set<G>, coordinationRole: LockmanGroupCoordinationRole)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/coordinationrole","title":"let coordinationRole: LockmanGroupCoordinationRole","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/groupids","title":"let groupIds: Set<AnyLockmanGroupId>","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/==(_:_:)","title":"static func == (LockmanGroupCoordinatedInfo, LockmanGroupCoordinatedInfo) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo\/lockmaninfo-implementations","title":"LockmanInfo Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmangroupcoordinatedinfo","title":"LockmanGroupCoordinatedInfo","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/==(_:_:)","title":"static func == (LockmanPriorityBasedInfo, LockmanPriorityBasedInfo) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/init(strategyid:actionid:priority:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, priority: LockmanPriorityBasedInfo.Priority)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.property","title":"let priority: LockmanPriorityBasedInfo.Priority","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/concurrencybehavior\/exclusive","title":"case exclusive","type":"case"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/concurrencybehavior\/replaceable","title":"case replaceable","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/concurrencybehavior\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/concurrencybehavior\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/concurrencybehavior","title":"LockmanPriorityBasedInfo.ConcurrencyBehavior","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/high(_:)","title":"case high(LockmanPriorityBasedInfo.ConcurrencyBehavior)","type":"case"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/low(_:)","title":"case low(LockmanPriorityBasedInfo.ConcurrencyBehavior)","type":"case"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/none","title":"case none","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/behavior","title":"var behavior: LockmanPriorityBasedInfo.ConcurrencyBehavior?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/'...(_:)-20a1y","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/'...(_:)-4i580","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/_(_:_:)-2vn62","title":"static func < (LockmanPriorityBasedInfo.Priority, LockmanPriorityBasedInfo.Priority) -> Bool","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/_(_:_:)-3u49e","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/_=(_:_:)-4rn4w","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/_=(_:_:)-6yy3y","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/==(_:_:)","title":"static func == (LockmanPriorityBasedInfo.Priority, LockmanPriorityBasedInfo.Priority) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/priority-swift.enum","title":"LockmanPriorityBasedInfo.Priority","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanprioritybasedinfo","title":"LockmanPriorityBasedInfo","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanreducer\/body","title":"var body: some Reducer<Base.State, Base.Action>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanreducer\/action","title":"LockmanReducer.Action","type":"typealias"},{"path":"\/documentation\/lockman\/lockmanreducer\/state","title":"LockmanReducer.State","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanreducer\/_printchanges(_:)","title":"func _printChanges(_ReducerPrinter<Self.State, Self.Action>?) -> _PrintChangesReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/dependency(_:)","title":"func dependency<Value>(Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/dependency(_:_:)","title":"func dependency<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> _DependencyKeyWritingReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/foreach(_:action:)","title":"func forEach<DestinationState, DestinationAction>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/foreach(_:action:destination:fileid:filepath:line:column:)-4t60n","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: AnyCasePath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9u060","title":"func forEach<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, StackState<DestinationState>>, action: CaseKeyPath<Self.Action, StackAction<DestinationState, DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/foreach(_:action:element:fileid:filepath:line:column:)-1e0h4","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: CaseKeyPath<Self.Action, IdentifiedAction<ID, ElementAction>>, element: () -> Element, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/foreach(_:action:element:fileid:filepath:line:column:)-2j6lh","title":"func forEach<ElementState, ElementAction, ID, Element>(WritableKeyPath<Self.State, IdentifiedArray<ID, ElementState>>, action: AnyCasePath<Self.Action, (ID, ElementAction)>, element: () -> Element, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-699nk","title":"func ifCaseLet<CaseState, CaseAction, Case>(CaseKeyPath<Self.State, CaseState>, action: CaseKeyPath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> _IfCaseLetReducer<Self, Case>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-s8ss","title":"func ifCaseLet<CaseState, CaseAction, Case>(AnyCasePath<Self.State, CaseState>, action: AnyCasePath<Self.Action, CaseAction>, then: () -> Case, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:)","title":"func ifLet<ChildState, ChildAction>(WritableKeyPath<Self.State, PresentationState<ChildState>>, action: CaseKeyPath<Self.Action, PresentationAction<ChildAction>>) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:destination:fileid:filepath:line:column:)-5x0yg","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:destination:fileid:filepath:line:column:)-hn9","title":"func ifLet<DestinationState, DestinationAction, Destination>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, destination: () -> Destination, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:fileid:filepath:line:column:)-2gadq","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> _IfLetReducer<Self, EmptyReducer<WrappedState, WrappedAction>>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:fileid:filepath:line:column:)-2i5jw","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: CaseKeyPath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:fileid:filepath:line:column:)-5i2gc","title":"func ifLet<WrappedState, WrappedAction>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:fileid:filepath:line:column:)-7uz4n","title":"func ifLet<DestinationState, DestinationAction>(WritableKeyPath<Self.State, PresentationState<DestinationState>>, action: AnyCasePath<Self.Action, PresentationAction<DestinationAction>>, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:then:fileid:filepath:line:column:)-35swc","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: AnyCasePath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/iflet(_:action:then:fileid:filepath:line:column:)-7z47p","title":"func ifLet<WrappedState, WrappedAction, Wrapped>(WritableKeyPath<Self.State, WrappedState?>, action: CaseKeyPath<Self.Action, WrappedAction>, then: () -> Wrapped, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> some Reducer<Self.State, Self.Action>\n","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(boundaryid:unlockoption:lockfailure:)","title":"func lock(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(boundaryid:unlockoption:lockfailure:for:)","title":"func lock<Value1>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:)","title":"func lock<Value1, Value2>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:_:)","title":"func lock<Value1, Value2, Value3>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>, CaseKeyPath<Self.Action, Value3>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:_:_:)","title":"func lock<Value1, Value2, Value3, Value4>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>, CaseKeyPath<Self.Action, Value3>, CaseKeyPath<Self.Action, Value4>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(boundaryid:unlockoption:lockfailure:for:_:_:_:_:)","title":"func lock<Value1, Value2, Value3, Value4, Value5>(boundaryId: any LockmanBoundaryId, unlockOption: LockmanUnlockOption, lockFailure: ((any Error, Send<Self.Action>) async -> Void)?, for: CaseKeyPath<Self.Action, Value1>, CaseKeyPath<Self.Action, Value2>, CaseKeyPath<Self.Action, Value3>, CaseKeyPath<Self.Action, Value4>, CaseKeyPath<Self.Action, Value5>) -> LockmanReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/lock(condition:)","title":"func lock(condition: (Self.State, Self.Action) -> LockmanResult) -> LockmanDynamicConditionReducer<Self.State, Self.Action>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/onchange(of:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/onchange(of:removeduplicates:_:)","title":"func onChange<V, R>(of: (Self.State) -> V, removeDuplicates: (V, V) -> Bool, (V, V) -> R) -> _OnChangeReducer<Self, V, R>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/reduce(into:action:)","title":"func reduce(into: inout Self.Body.State, action: Self.Body.Action) -> Effect<Self.Body.Action>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/signpost(_:log:)","title":"func signpost(String, log: OSLog) -> _SignpostReducer<Self>","type":"method"},{"path":"\/documentation\/lockman\/lockmanreducer\/transformdependency(_:transform:)","title":"func transformDependency<V>(WritableKeyPath<DependencyValues, V>, transform: (inout V) -> Void) -> _DependencyKeyWritingReducer<Self>","type":"method"}],"path":"\/documentation\/lockman\/lockmanreducer\/reducer-implementations","title":"Reducer Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanreducer","title":"LockmanReducer","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/==(_:_:)","title":"static func == (LockmanSingleExecutionInfo, LockmanSingleExecutionInfo) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/init(strategyid:actionid:mode:)","title":"init(strategyId: LockmanStrategyId, actionId: LockmanActionId, mode: LockmanSingleExecutionStrategy.ExecutionMode)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/actionid","title":"let actionId: LockmanActionId","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/debugadditionalinfo","title":"var debugAdditionalInfo: String","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/iscancellationtarget","title":"var isCancellationTarget: Bool","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/mode","title":"let mode: LockmanSingleExecutionStrategy.ExecutionMode","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/strategyid","title":"let strategyId: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/uniqueid","title":"let uniqueId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmansingleexecutioninfo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmansingleexecutioninfo","title":"LockmanSingleExecutionInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/init(name:configuration:)","title":"init(name: String, configuration: String?)","type":"init"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/init(type:identifier:)","title":"init<S>(type: S.Type, identifier: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/value","title":"let value: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/dynamiccondition","title":"static let dynamicCondition: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/groupcoordination","title":"static let groupCoordination: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/prioritybased","title":"static let priorityBased: LockmanStrategyId","type":"property"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/singleexecution","title":"static let singleExecution: LockmanStrategyId","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/from(_:)","title":"static func from<S>(S.Type) -> LockmanStrategyId","type":"method"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/from(_:identifier:)","title":"static func from<S>(S.Type, identifier: String) -> LockmanStrategyId","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanstrategyid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/lockman\/lockmanstrategyid\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanstrategyid\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/lockman\/lockmanstrategyid\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanstrategyid","title":"LockmanStrategyId","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanunlock\/init(id:info:strategy:unlockoption:)","title":"init(id: B, info: I, strategy: AnyLockmanStrategy<I>, unlockOption: LockmanUnlockOption)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanunlock\/callasfunction()","title":"func callAsFunction()","type":"method"}],"path":"\/documentation\/lockman\/lockmanunlock","title":"LockmanUnlock","type":"struct"},{"title":"Macros","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancompositestrategy(_:_:)","title":"macro LockmanCompositeStrategy<S1, S2>(S1.Type, S2.Type)","type":"macro"},{"path":"\/documentation\/lockman\/lockmancompositestrategy(_:_:_:)","title":"macro LockmanCompositeStrategy<S1, S2, S3>(S1.Type, S2.Type, S3.Type)","type":"macro"},{"path":"\/documentation\/lockman\/lockmancompositestrategy(_:_:_:_:)","title":"macro LockmanCompositeStrategy<S1, S2, S3, S4>(S1.Type, S2.Type, S3.Type, S4.Type)","type":"macro"},{"path":"\/documentation\/lockman\/lockmancompositestrategy(_:_:_:_:_:)","title":"macro LockmanCompositeStrategy<S1, S2, S3, S4, S5>(S1.Type, S2.Type, S3.Type, S4.Type, S5.Type)","type":"macro"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimited()","title":"macro LockmanConcurrencyLimited()","type":"macro"},{"path":"\/documentation\/lockman\/lockmandynamiccondition()","title":"macro LockmanDynamicCondition()","type":"macro"},{"path":"\/documentation\/lockman\/lockmangroupcoordination()","title":"macro LockmanGroupCoordination()","type":"macro"},{"path":"\/documentation\/lockman\/lockmanprioritybased()","title":"macro LockmanPriorityBased()","type":"macro"},{"path":"\/documentation\/lockman\/lockmansingleexecution()","title":"macro LockmanSingleExecution()","type":"macro"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanactionid","title":"LockmanActionId","type":"typealias"},{"path":"\/documentation\/lockman\/lockmanboundaryid","title":"LockmanBoundaryId","type":"typealias"},{"path":"\/documentation\/lockman\/lockmangroupid","title":"LockmanGroupId","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmancomposableissuereporter\/reportissue(_:file:line:)","title":"static func reportIssue(String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/lockman\/lockmancomposableissuereporter","title":"LockmanComposableIssueReporter","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/limited(_:)","title":"case limited(Int)","type":"case"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/unlimited","title":"case unlimited","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/maxconcurrency","title":"var maxConcurrency: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/isexceeded(currentcount:)","title":"func isExceeded(currentCount: Int) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimit","title":"LockmanConcurrencyLimit","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/concurrencylimitreached(requestedinfo:existinginfos:currentcount:)","title":"case concurrencyLimitReached(requestedInfo: LockmanConcurrencyLimitedInfo, existingInfos: [LockmanConcurrencyLimitedInfo], currentCount: Int)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanconcurrencylimitederror","title":"LockmanConcurrencyLimitedError","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmandefaultissuereporter\/reportissue(_:file:line:)","title":"static func reportIssue(String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/lockman\/lockmandefaultissuereporter","title":"LockmanDefaultIssueReporter","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/actionalreadyingroup(existinginfo:groupids:)","title":"case actionAlreadyInGroup(existingInfo: LockmanGroupCoordinatedInfo, groupIds: Set<AnyLockmanGroupId>)","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/blockedbyexclusiveleader(leaderinfo:groupid:entrypolicy:)","title":"case blockedByExclusiveLeader(leaderInfo: LockmanGroupCoordinatedInfo, groupId: AnyLockmanGroupId, entryPolicy: LockmanGroupCoordinationRole.LeaderEntryPolicy)","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/leadercannotjoinnonemptygroup(groupids:)","title":"case leaderCannotJoinNonEmptyGroup(groupIds: Set<AnyLockmanGroupId>)","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/membercannotjoinemptygroup(groupids:)","title":"case memberCannotJoinEmptyGroup(groupIds: Set<AnyLockmanGroupId>)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationerror","title":"LockmanGroupCoordinationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leader(_:)","title":"case leader(LockmanGroupCoordinationRole.LeaderEntryPolicy)","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/member","title":"case member","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/none","title":"case none","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/emptygroup","title":"case emptyGroup","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/withoutleader","title":"case withoutLeader","type":"case"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/withoutmembers","title":"case withoutMembers","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/leaderentrypolicy","title":"LockmanGroupCoordinationRole.LeaderEntryPolicy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationrole\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmangroupcoordinationrole","title":"LockmanGroupCoordinationRole","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanissuereporting\/reporter","title":"static var reporter: any LockmanIssueReporter.Type","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanissuereporting\/configurecomposablereporting()","title":"static func configureComposableReporting()","type":"method"},{"path":"\/documentation\/lockman\/lockmanissuereporting\/reportissue(_:file:line:)","title":"static func reportIssue(String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/lockman\/lockmanissuereporting","title":"LockmanIssueReporting","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/container","title":"static var container: LockmanStrategyContainer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/withboundarylock(for:operation:)","title":"static func withBoundaryLock<B, T>(for: B, operation: () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/lockman\/lockmanmanager\/withtestcontainer(_:operation:)","title":"static func withTestContainer<T>(LockmanStrategyContainer, operation: () async throws -> T) async rethrows -> T","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/cleanup\/all()","title":"static func all()","type":"method"},{"path":"\/documentation\/lockman\/lockmanmanager\/cleanup\/boundary(_:)","title":"static func boundary<B>(B)","type":"method"}],"path":"\/documentation\/lockman\/lockmanmanager\/cleanup","title":"LockmanManager.cleanup","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/config\/defaultunlockoption","title":"static var defaultUnlockOption: LockmanUnlockOption","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/config\/handlecancellationerrors","title":"static var handleCancellationErrors: Bool","type":"property"}],"path":"\/documentation\/lockman\/lockmanmanager\/config","title":"LockmanManager.config","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/maxactionidwidth","title":"var maxActionIdWidth: Int","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/maxadditionalwidth","title":"var maxAdditionalWidth: Int","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/maxboundarywidth","title":"var maxBoundaryWidth: Int","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/maxstrategywidth","title":"var maxStrategyWidth: Int","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/simplifyboundaryids","title":"var simplifyBoundaryIds: Bool","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/useshortstrategynames","title":"var useShortStrategyNames: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/compact","title":"static let compact: LockmanManager.debug.FormatOptions","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/default","title":"static let `default`: LockmanManager.debug.FormatOptions","type":"property"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions\/detailed","title":"static let detailed: LockmanManager.debug.FormatOptions","type":"property"}],"path":"\/documentation\/lockman\/lockmanmanager\/debug\/formatoptions","title":"LockmanManager.debug.FormatOptions","type":"struct"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/isloggingenabled","title":"static var isLoggingEnabled: Bool","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/printcurrentlocks()","title":"static func printCurrentLocks()","type":"method"},{"path":"\/documentation\/lockman\/lockmanmanager\/debug\/printcurrentlocks(options:)","title":"static func printCurrentLocks(options: LockmanManager.debug.FormatOptions)","type":"method"}],"path":"\/documentation\/lockman\/lockmanmanager\/debug","title":"LockmanManager.debug","type":"enum"}],"path":"\/documentation\/lockman\/lockmanmanager","title":"LockmanManager","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/higherpriorityexists(requestedinfo:existinginfo:boundaryid:)","title":"case higherPriorityExists(requestedInfo: LockmanPriorityBasedInfo, existingInfo: LockmanPriorityBasedInfo, boundaryId: any LockmanBoundaryId)","type":"case"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/precedingactioncancelled(cancelledinfo:boundaryid:)","title":"case precedingActionCancelled(cancelledInfo: LockmanPriorityBasedInfo, boundaryId: any LockmanBoundaryId)","type":"case"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/samepriorityconflict(requestedinfo:existinginfo:boundaryid:)","title":"case samePriorityConflict(requestedInfo: LockmanPriorityBasedInfo, existingInfo: LockmanPriorityBasedInfo, boundaryId: any LockmanBoundaryId)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmanprioritybasederror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/lockman\/lockmanprioritybasederror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/boundaryid","title":"var boundaryId: any LockmanBoundaryId","type":"property"},{"path":"\/documentation\/lockman\/lockmanprioritybasederror\/lockmaninfo","title":"var lockmanInfo: any LockmanInfo","type":"property"}],"path":"\/documentation\/lockman\/lockmanprioritybasederror\/lockmanprecedingcancellationerror-implementations","title":"LockmanPrecedingCancellationError Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanprioritybasederror","title":"LockmanPriorityBasedError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/strategyalreadyregistered(_:)","title":"case strategyAlreadyRegistered(String)","type":"case"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/strategynotregistered(_:)","title":"case strategyNotRegistered(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanregistrationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmanregistrationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanregistrationerror","title":"LockmanRegistrationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanresult\/cancel(_:)","title":"case cancel(any LockmanError)","type":"case"},{"path":"\/documentation\/lockman\/lockmanresult\/success","title":"case success","type":"case"},{"path":"\/documentation\/lockman\/lockmanresult\/successwithprecedingcancellation(error:)","title":"case successWithPrecedingCancellation(error: any LockmanPrecedingCancellationError)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/lockman\/lockmanresult\/==(_:_:)","title":"static func == (LockmanResult, LockmanResult) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanresult","title":"LockmanResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/actionalreadyrunning(existinginfo:)","title":"case actionAlreadyRunning(existingInfo: LockmanSingleExecutionInfo)","type":"case"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/boundaryalreadylocked(boundaryid:existinginfo:)","title":"case boundaryAlreadyLocked(boundaryId: any LockmanBoundaryId, existingInfo: LockmanSingleExecutionInfo)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/lockman\/lockmansingleexecutionerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmansingleexecutionerror","title":"LockmanSingleExecutionError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanunlockoption\/delayed(_:)","title":"case delayed(TimeInterval)","type":"case"},{"path":"\/documentation\/lockman\/lockmanunlockoption\/immediate","title":"case immediate","type":"case"},{"path":"\/documentation\/lockman\/lockmanunlockoption\/mainrunloop","title":"case mainRunLoop","type":"case"},{"path":"\/documentation\/lockman\/lockmanunlockoption\/transition","title":"case transition","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lockman\/lockmanunlockoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lockman\/lockmanunlockoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lockman\/lockmanunlockoption","title":"LockmanUnlockOption","type":"enum"}],"path":"\/documentation\/lockman","title":"Lockman","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}