{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"A macro that generates protocol conformance and required members for single execution locking behavior.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"preciseIdentifier":"s:7Lockman0A21SingleExecutionActionP","text":"LockmanSingleExecutionAction","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Protocol conformance to ","type":"text"},{"code":"LockmanSingleExecutionAction","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"text":" property that returns the enum case name as a String","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Important","type":"text"}],"type":"strong"},{"text":": You must implement the ","type":"text"},{"type":"codeVoice","code":"lockmanInfo"},{"text":" property to specify the execution mode:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":".none"},{"type":"text","text":": No exclusive execution (always allows locks)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".boundary"},{"type":"text","text":": Only one action per boundary at a time (default behavior)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".action"},{"text":": Only one instance of the same actionId at a time","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Example usage with TCA:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct MyFeature {","  @LockmanSingleExecution","  enum Action {","    case login","    case logout","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .login:","        return .init(actionId: actionName, mode: .boundary)","      case .logout:","        return .init(actionId: actionName, mode: .action)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .login:","        return .withLock(","          operation: { send in","            \/\/ async work","          },","          action: .login,","          cancelID: \"login-operation\"","        )","      \/\/ ...","      }","    }","  }","}"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","variants":[{"paths":["\/documentation\/lockman\/lockmansingleexecution()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"modules":[{"name":"Lockman"}],"externalID":"s:7Lockman0A15SingleExecutionyycfm","symbolKind":"macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","title":"LockmanSingleExecution()","roleHeading":"Macro"},"references":{"doc://Lockman/documentation/Lockman":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"images":[{"type":"icon","identifier":"Lockman.png"}],"role":"collection","url":"\/documentation\/lockman"},"doc://Lockman/documentation/Lockman/LockmanSingleExecution()":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecution"},{"kind":"text","text":"()"}],"url":"\/documentation\/lockman\/lockmansingleexecution()","type":"topic","abstract":[{"text":"A macro that generates protocol conformance and required members for single execution locking behavior.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","kind":"symbol","title":"LockmanSingleExecution()","role":"symbol"},"Lockman.png":{"type":"image","identifier":"Lockman.png","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo"},"doc://Lockman/documentation/Lockman/LockmanSingleExecutionAction":{"navigatorTitle":[{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","abstract":[{"text":"A specialized ","type":"text"},{"code":"LockmanAction","type":"codeVoice"},{"text":" for single-execution locking semantics.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"LockmanSingleExecutionAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"url":"\/documentation\/lockman\/lockmansingleexecutionaction"}}}