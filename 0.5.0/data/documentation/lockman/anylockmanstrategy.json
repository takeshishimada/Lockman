{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Lockman0A4InfoP","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","text":"LockmanInfo"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","text":"Purpose","level":2,"anchor":"Purpose"},{"type":"paragraph","inlineContent":[{"code":"AnyLockmanStrategy","type":"codeVoice"},{"text":" solves the fundamental problem of storing different concrete","type":"text"},{"text":" ","type":"text"},{"text":"strategy implementations in the same collection. Without type erasure, you cannot","type":"text"},{"text":" ","type":"text"},{"text":"store ","type":"text"},{"code":"LockmanSingleExecutionStrategy","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"LockmanPriorityBasedStrategy","type":"codeVoice"},{"text":" in the","type":"text"},{"text":" ","type":"text"},{"text":"same array, even though they both conform to ","type":"text"},{"code":"LockmanStrategy","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","text":"Key Benefits","level":2,"anchor":"Key-Benefits"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Heterogeneous Collections"}],"type":"strong"},{"text":": Store different strategy implementations together","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}]},{"type":"text","text":": Choose strategies dynamically based on conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"API Boundaries","type":"text"}]},{"type":"text","text":": Hide concrete strategy types from public interfaces"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Dependency Injection"}]},{"type":"text","text":": Enable flexible strategy registration and resolution"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Universal Compatibility","type":"text"}],"type":"strong"},{"text":": Support both class and struct strategy implementations","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Type Safety Guarantees","level":2,"anchor":"Type-Safety-Guarantees"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the concrete strategy type is erased, type safety for lock information "},{"code":"I","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is preserved at the "},{"code":"AnyLockmanStrategy","type":"codeVoice"},{"type":"text","text":" level. This means you cannot accidentally"},{"type":"text","text":" "},{"type":"text","text":"use "},{"code":"LockmanSingleExecutionInfo","type":"codeVoice"},{"type":"text","text":" with a priority-based strategy wrapper."}]},{"type":"heading","text":"Performance Considerations","level":2,"anchor":"Performance-Considerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type erasure introduces a small runtime overhead due to function pointer indirection."},{"type":"text","text":" "},{"type":"text","text":"However, this cost is typically negligible compared to the actual locking operations"},{"type":"text","text":" "},{"type":"text","text":"and is justified by the flexibility gained."}]}]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"],"anchor":"Initializers","generated":true},{"title":"Instance Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"],"anchor":"Instance-Properties","generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)"],"anchor":"Instance-Methods","generated":true},{"title":"Type Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"],"anchor":"Type-Methods","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy"]}],"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"kind":"symbol","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","interfaceLanguage":"swift"},"sections":[],"metadata":{"modules":[{"name":"Lockman"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"role":"symbol","title":"AnyLockmanStrategy","externalID":"s:7Lockman03AnyA8StrategyV","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo"}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":" : [any ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP"},{"text":"]]","kind":"text"}],"abstract":[{"type":"text","text":"Returns current locks information for debugging."}],"title":"getCurrentLocks()"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"strategyId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"kind":"symbol","title":"strategyId","abstract":[{"type":"text","text":"The identifier for this type-erased strategy."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId","type":"topic"},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/LockmanInfo":{"abstract":[{"text":"Represents information required by Lockman locking strategies.","type":"text"}],"title":"LockmanInfo","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","url":"\/documentation\/lockman\/lockmaninfo"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"role":"symbol","type":"topic","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"url":"\/documentation\/lockman\/anylockmanstrategy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","title":"AnyLockmanStrategy"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"kind":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"title":"unlock(id:info:)","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)"},"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image","identifier":"Lockman.png","alt":"Lockman logo"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"title":"makeStrategyId()","type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStrategyId"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"abstract":[{"type":"text","text":"Creates a strategy identifier for the type-erased strategy."}],"role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(id:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(id:)","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","title":"cleanUp(id:)","role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"abstract":[{"text":"Checks if a lock can be acquired for the given boundary and information.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"canLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","title":"canLock(id:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(id:info:)":{"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Attempts to acquire a lock for the given boundary and information."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)","title":"lock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"role":"symbol","type":"topic","title":"init(_:)","url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","abstract":[{"type":"text","text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation."}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}]},"doc://Lockman/documentation/Lockman":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"images":[{"type":"icon","identifier":"Lockman.png"}],"role":"collection","url":"\/documentation\/lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","title":"cleanUp()","type":"topic","abstract":[{"text":"Removes all lock information across all boundaries.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"title":"LockmanStrategy","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","url":"\/documentation\/lockman\/lockmanstrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}]}}}