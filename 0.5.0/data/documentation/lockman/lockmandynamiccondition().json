{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmandynamiccondition()"]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","kind":"typeIdentifier","text":"LockmanDynamicConditionAction"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Apply this macro to an enum declaration to automatically generate:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanDynamicConditionAction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"inlineContent":[{"code":"extractMetadata()","type":"codeVoice"},{"type":"text","text":" method that extracts enum associated values as metadata"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property with default condition (always success)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro enables you to define custom locking conditions at runtime based on:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Current state values","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Other locks in the same boundary"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Time-based conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any custom logic"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Example usage with TCA:","type":"text"}]},{"code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            try await processTask(size: size)","            await send(.taskCompleted)","          }","        }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"symbolKind":"macro","title":"LockmanDynamicCondition()","externalID":"s:7Lockman0A16DynamicConditionyycfm","modules":[{"name":"Lockman"}],"roleHeading":"Macro","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}]},"references":{"doc://Lockman/documentation/Lockman":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"images":[{"type":"icon","identifier":"Lockman.png"}],"role":"collection","url":"\/documentation\/lockman"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"url":"\/documentation\/lockman\/lockmandynamicconditionaction","abstract":[{"type":"text","text":"A protocol for actions that support dynamic condition-based locking."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"title":"LockmanDynamicConditionAction","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction"},"Lockman.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"alt":"Lockman logo","type":"image","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"title":"LockmanDynamicCondition()","type":"topic","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","url":"\/documentation\/lockman\/lockmandynamiccondition()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"role":"symbol"}}}