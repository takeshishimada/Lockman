{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmangroupid"]}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"externalID":"s:7Lockman03AnyA7GroupIdV","modules":[{"name":"Lockman"}],"role":"symbol","roleHeading":"Structure","title":"AnyLockmanGroupId","symbolKind":"struct"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"topicSections":[{"anchor":"Operators","generated":true,"title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"]},{"anchor":"Initializers","generated":true,"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"]},{"anchor":"Instance-Methods","generated":true,"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"]},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"]}],"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper enables different types of group identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}]},{"type":"heading","text":"Type Erasure Benefits","level":2,"anchor":"Type-Erasure-Benefits"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"type":"codeVoice","code":"Set<AnyLockmanGroupId>"},{"type":"text","text":" with mixed group ID types"}]}]},{"content":[{"inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Thread Safety","level":2,"anchor":"Thread-Safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Marked as "},{"code":"@unchecked Sendable","type":"codeVoice"},{"type":"text","text":" because "},{"code":"AnyHashable","type":"codeVoice"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}]},{"type":"heading","text":"Usage Example","level":2,"anchor":"Usage-Example"},{"syntax":"swift","type":"codeListing","code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"]}],"kind":"content"}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","abstract":[],"kind":"article","title":"CustomDebugStringConvertible Implementations"},"doc://Lockman/documentation/Lockman":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"images":[{"type":"icon","identifier":"Lockman.png"}],"role":"collection","url":"\/documentation\/lockman"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible"},"doc://Lockman/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8CopyableP","title":"Swift.Copyable"},"doc://Lockman/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable"},"doc://Lockman/SQ":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"role":"collectionGroup","kind":"article","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations","type":"topic","title":"Equatable Implementations","abstract":[]},"doc://Lockman/SH":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/SH","title":"Swift.Hashable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"url":"\/documentation\/lockman\/anylockmangroupid","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","kind":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":", allowing heterogeneous group IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"title":"AnyLockmanGroupId","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"type":"codeVoice","code":"AnyHashable"},{"text":" values.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"AnyLockmanGroupId","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"AnyLockmanGroupId","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"==(_:_:)"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","kind":"symbol","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different group ID types with identical values from colliding.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV"},{"text":")","kind":"text"}],"title":"hash(into:)","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","type":"topic"},"Lockman.png":{"type":"image","identifier":"Lockman.png","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":"."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","type":"topic","role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A7GroupIda","text":"LockmanGroupId"},{"kind":"text","text":")"}]}}}