{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method provides a global reset mechanism by clearing all internal lock state","type":"text"},{"text":" ","type":"text"},{"text":"from the underlying strategy. Itâ€™s typically used during:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Application shutdown sequences"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Test suite cleanup between test cases"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emergency reset scenarios during development"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory pressure response"}]}]}]},{"text":"Scope of Operation","type":"heading","level":2,"anchor":"Scope-of-Operation"},{"type":"paragraph","inlineContent":[{"text":"This method affects ","type":"text"},{"inlineContent":[{"type":"text","text":"all boundaries"}],"type":"strong"},{"text":" managed by the underlying strategy,","type":"text"},{"text":" ","type":"text"},{"text":"not just those accessed through this particular wrapper instance.","type":"text"}]},{"text":"Thread Safety","type":"heading","level":2,"anchor":"Thread-Safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The operation is atomic with respect to other strategy operations, but"},{"type":"text","text":" "},{"type":"text","text":"callers should be aware that concurrent operations may be affected."}]},{"text":"Side Effects","type":"heading","level":2,"anchor":"Side-Effects"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"All active locks are immediately released"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Lock state tracking is reset to initial conditions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pending operations may receive unexpected unlock notifications","type":"text"}]}]}]}]}],"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy\/cleanup()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Lockman"}],"symbolKind":"method","externalID":"s:7Lockman03AnyA8StrategyV7cleanUpyyF","role":"symbol","title":"cleanUp()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}]},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","title":"cleanUp()","type":"topic","abstract":[{"text":"Removes all lock information across all boundaries.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","role":"symbol"},"Lockman.png":{"identifier":"Lockman.png","alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"type":"image"},"doc://Lockman/documentation/Lockman":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","kind":"symbol","abstract":[{"type":"text","text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind."}],"images":[{"type":"icon","identifier":"Lockman.png"}],"role":"collection","url":"\/documentation\/lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"role":"symbol","type":"topic","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"url":"\/documentation\/lockman\/anylockmanstrategy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","title":"AnyLockmanStrategy"}}}