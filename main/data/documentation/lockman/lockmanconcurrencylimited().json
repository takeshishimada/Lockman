{"kind":"symbol","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for concurrency-limited locking behavior."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimited()"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"text":"LockmanConcurrencyLimitedAction","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimitedAction","preciseIdentifier":"s:7Lockman0A24ConcurrencyLimitedActionP"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanConcurrencyLimited","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol conformance to "},{"code":"LockmanConcurrencyLimitedAction","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"inlineContent":[{"text":"Default ","type":"text"},{"code":"strategyId","type":"codeVoice"},{"text":" implementation is provided by the protocol","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Important","type":"text"}]},{"type":"text","text":": You must implement the "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property to specify concurrency limits:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a predefined concurrency group: "},{"code":".init(actionId: actionName, group: MyConcurrencyGroup.apiRequests)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using direct limit: "},{"type":"codeVoice","code":".init(actionId: actionName, .limited(3))"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using unlimited: "},{"code":".init(actionId: actionName, .unlimited)","type":"codeVoice"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example usage with TCA:"}]},{"type":"codeListing","code":["\/\/ Define your concurrency groups","enum MyConcurrencyGroup: LockmanConcurrencyGroup {","  case apiRequests","  case fileOperations","  case uiUpdates","","  var id: String {","    switch self {","    case .apiRequests: return \"api_requests\"","    case .fileOperations: return \"file_operations\"","    case .uiUpdates: return \"ui_updates\"","    }","  }","","  var limit: LockmanConcurrencyLimit {","    switch self {","    case .apiRequests: return .limited(3)","    case .fileOperations: return .limited(2)","    case .uiUpdates: return .unlimited","    }","  }","}","","@Reducer","struct MyFeature {","  @LockmanConcurrencyLimited","  enum Action {","    case fetchUserProfile(User.ID)","    case uploadFile(File)","    case refreshUI","","    var lockmanInfo: LockmanConcurrencyLimitedInfo {","      switch self {","      case .fetchUserProfile:","        \/\/ Use predefined group","        return .init(actionId: actionName, group: MyConcurrencyGroup.apiRequests)","      case .uploadFile:","        \/\/ Use predefined group","        return .init(actionId: actionName, group: MyConcurrencyGroup.fileOperations)","      case .refreshUI:","        \/\/ Direct unlimited","        return .init(actionId: actionName, .unlimited)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchUserProfile(let userId):","        return .run { send in","          \/\/ Only 3 concurrent API requests allowed","          let profile = try await api.fetchProfile(userId)","          await send(.profileFetched(profile))","        }","        .lock(","          action: .fetchUserProfile(userId),","          boundaryId: \"fetch-profile-\\(userId)\"","        )","      \/\/ ...","      }","    }","  }","}"],"syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmanconcurrencylimited()"]}],"metadata":{"title":"LockmanConcurrencyLimited()","modules":[{"name":"Lockman"}],"externalID":"s:7Lockman0A18ConcurrencyLimitedyycfm","roleHeading":"Macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanConcurrencyLimited","kind":"identifier"},{"text":"()","kind":"text"}],"symbolKind":"macro","role":"symbol"},"references":{"doc://Lockman/documentation/Lockman/LockmanConcurrencyLimited()":{"title":"LockmanConcurrencyLimited()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimited()","kind":"symbol","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for concurrency-limited locking behavior."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanConcurrencyLimited"},{"kind":"text","text":"()"}],"type":"topic","url":"\/documentation\/lockman\/lockmanconcurrencylimited()","role":"symbol"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"},"doc://Lockman/documentation/Lockman/LockmanConcurrencyLimitedAction":{"kind":"symbol","url":"\/documentation\/lockman\/lockmanconcurrencylimitedaction","title":"LockmanConcurrencyLimitedAction","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LockmanConcurrencyLimitedAction"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanConcurrencyLimitedAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanConcurrencyLimitedAction"}],"role":"symbol","abstract":[{"text":"Protocol for actions that support concurrency limiting.","type":"text"}]}}}