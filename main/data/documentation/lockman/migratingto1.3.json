{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"Migrating to 1.3","role":"article"},"abstract":[{"type":"text","text":"Update your code from Lockman 1.2 to take advantage of Lockman 1.3â€™s simplified API and enhanced safety features."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman 1.3 introduces a major API simplification by removing the "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" methods in favor of the more consistent "},{"code":"Effect.lock","type":"codeVoice"},{"type":"text","text":" method chain approach. This change eliminates API duplication and provides a cleaner, more maintainable codebase."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key improvements include:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Removal of ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" methods for API consistency","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enhanced safety through automatic lock management"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Simplified learning curve with fewer API options"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Better integration with TCAâ€™s Effect patterns"}],"type":"paragraph"}]}]},{"text":"Updating dependencies","type":"heading","anchor":"Updating-dependencies","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To upgrade to Lockman 1.3, update your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}]},{"type":"codeListing","code":["dependencies: [","  .package(","    url: \"https:\/\/github.com\/takeshishimada\/Lockman\",","    from: \"1.3.0\"","  )","]"],"syntax":"swift"},{"text":"Breaking changes","type":"heading","anchor":"Breaking-changes","level":2},{"text":"Removal of withLock methods","type":"heading","anchor":"Removal-of-withLock-methods","level":3},{"type":"paragraph","inlineContent":[{"text":"All ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" methods have been removed. Use ","type":"text"},{"code":"Effect.lock","type":"codeVoice"},{"text":" method chain or ","type":"text"},{"code":"Reducer.lock","type":"codeVoice"},{"text":" instead.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"type":"codeListing","code":["return .withLock(","  operation: { send in","    try await performWork()","    await send(.completed)","  },","  catch handler: { error, send in","    await send(.failed(error))","  },","  lockFailure: { error, send in","    await send(.lockFailed)","  },","  action: action,","  boundaryId: CancelID.operation",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.3):"}]},{"type":"codeListing","code":["return .run { send in","  try await performWork()","  await send(.completed)","} catch: { error, send in","  await send(.failed(error))","}",".lock(","  action: action,","  boundaryId: CancelID.operation,","  lockFailure: { error, send in","    await send(.lockFailed)","  }",")"],"syntax":"swift"},{"text":"Removal of withLock(concatenating:)","type":"heading","anchor":"Removal-of-withLockconcatenating","level":3},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"withLock(concatenating:)"},{"text":" method has been renamed to ","type":"text"},{"type":"codeVoice","code":"Effect.lock(concatenating:)"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"type":"codeListing","code":["return .withLock(","  concatenating: [","    .run { send in await step1() },","    .run { send in await step2() },","    .run { send in await step3() }","  ],","  action: action,","  boundaryId: CancelID.workflow",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"type":"codeListing","code":["return .lock(","  concatenating: [","    .run { send in await step1() },","    .run { send in await step2() },","    .run { send in await step3() }","  ],","  action: action,","  boundaryId: CancelID.workflow",")"],"syntax":"swift"},{"text":"Manual unlock functionality removed","type":"heading","anchor":"Manual-unlock-functionality-removed","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Manual unlock functionality (unlock parameter in operation) has been removed. All locks are now automatically managed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"type":"codeListing","code":["return .withLock(","  operation: { send, unlock in","    defer { unlock() }","    try await performWork()","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"type":"codeListing","code":["return .run { send in","  try await performWork()","  await send(.completed)","}",".lock(","  action: action,","  boundaryId: CancelID.operation,","  unlockOption: .immediate \/\/ Control timing instead",")"],"syntax":"swift"},{"text":"Migration strategy","type":"heading","anchor":"Migration-strategy","level":2},{"text":"Step 1: Replace withLock with Effect.lock","type":"heading","anchor":"Step-1-Replace-withLock-with-Effectlock","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"For each "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" call:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Move the operation closure to a ","type":"text"},{"type":"codeVoice","code":".run { }"},{"text":" effect","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move the catch handler to "},{"type":"codeVoice","code":".catch { }"},{"type":"text","text":" if present"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Chain "},{"type":"codeVoice","code":".lock()"},{"type":"text","text":" with the action and boundary parameters"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move lockFailure to the lock method"}]}]}]},{"text":"Step 2: Replace withLock(concatenating:) calls","type":"heading","anchor":"Step-2-Replace-withLockconcatenating-calls","level":3},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Change method name from "},{"type":"codeVoice","code":".withLock(concatenating:"},{"type":"text","text":" to "},{"type":"codeVoice","code":".lock(concatenating:"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Parameters remain the same","type":"text"}],"type":"paragraph"}]}]},{"text":"Step 3: Remove manual unlock usage","type":"heading","anchor":"Step-3-Remove-manual-unlock-usage","level":3},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Remove "},{"code":"unlock","type":"codeVoice"},{"type":"text","text":" parameter from operation closures"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Remove manual "},{"type":"codeVoice","code":"unlock()"},{"type":"text","text":" calls"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"unlockOption","type":"codeVoice"},{"type":"text","text":" parameter to control timing if needed"}],"type":"paragraph"}]}]},{"text":"Complete migration examples","type":"heading","anchor":"Complete-migration-examples","level":2},{"text":"Basic operation migration","type":"heading","anchor":"Basic-operation-migration","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.2):"}]},{"type":"codeListing","code":["case .fetchData:","  return .withLock(","    operation: { send in","      let data = try await apiClient.fetchData()","      await send(.dataReceived(data))","    },","    catch handler: { error, send in","      await send(.fetchFailed(error))","    },","    lockFailure: { error, send in","      await send(.fetchBlocked)","    },","    action: action,","    boundaryId: CancelID.fetch","  )"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.3):"}]},{"type":"codeListing","code":["case .fetchData:","  return .run { send in","    let data = try await apiClient.fetchData()","    await send(.dataReceived(data))","  } catch: { error, send in","    await send(.fetchFailed(error))","  }","  .lock(","    action: action,","    boundaryId: CancelID.fetch,","    lockFailure: { error, send in","      await send(.fetchBlocked)","    }","  )"],"syntax":"swift"},{"text":"Concatenated operations migration","type":"heading","anchor":"Concatenated-operations-migration","level":3},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.2):","type":"text"}]},{"type":"codeListing","code":["case .processWorkflow:","  return .withLock(","    concatenating: [","      .send(.workflowStarted),","      .run { send in await processStep1() },","      .run { send in await processStep2() },","      .send(.workflowCompleted)","    ],","    unlockOption: .transition,","    action: action,","    boundaryId: CancelID.workflow","  )"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.3):","type":"text"}]},{"type":"codeListing","code":["case .processWorkflow:","  return .lock(","    concatenating: [","      .send(.workflowStarted),","      .run { send in await processStep1() },","      .run { send in await processStep2() },","      .send(.workflowCompleted)","    ],","    unlockOption: .transition,","    action: action,","    boundaryId: CancelID.workflow","  )"],"syntax":"swift"},{"text":"Complex manual unlock migration","type":"heading","anchor":"Complex-manual-unlock-migration","level":3},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.2):","type":"text"}]},{"type":"codeListing","code":["case .complexOperation:","  return .withLock(","    operation: { send, unlock in","      try await phase1()","      ","      if shouldSkipPhase2 {","        unlock()","        await send(.skipped)","        return","      }","      ","      try await phase2()","      unlock()","      await send(.completed)","    },","    catch handler: { error, send, unlock in","      unlock()","      await send(.failed(error))","    },","    action: action,","    boundaryId: CancelID.complex","  )"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.3):"}]},{"type":"codeListing","code":["case .complexOperation:","  return .run { send in","    try await phase1()","    ","    if shouldSkipPhase2 {","      await send(.skipped)","      return","    }","    ","    try await phase2()","    await send(.completed)","  } catch: { error, send in","    await send(.failed(error))","  }","  .lock(","    action: action,","    boundaryId: CancelID.complex,","    unlockOption: .immediate \/\/ Automatic timing control","  )"],"syntax":"swift"},{"text":"Benefits of upgrading","type":"heading","anchor":"Benefits-of-upgrading","level":2},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Simplified API","type":"text"}]},{"type":"text","text":": Single consistent method chain approach"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Enhanced safety","type":"text"}]},{"text":": Automatic lock management prevents lock leaks","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Better TCA integration","type":"text"}]},{"type":"text","text":": Natural fit with Effect patterns"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Reduced learning curve"}],"type":"strong"},{"type":"text","text":": Fewer API variants to learn"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Improved maintainability"}],"type":"strong"},{"text":": Cleaner, more predictable code patterns","type":"text"}],"type":"paragraph"}]}]},{"text":"API mapping reference","type":"heading","anchor":"API-mapping-reference","level":2},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Old API (1.2)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"New API (1.3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".withLock(operation:...)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".run {...}.lock(...)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".withLock(concatenating:...)"}]}],[{"type":"paragraph","inlineContent":[{"code":".lock(concatenating:...)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"operation: { send, unlock in }"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".run { send in }"},{"type":"text","text":" with "},{"type":"codeVoice","code":"unlockOption"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Manual "},{"code":"unlock()","type":"codeVoice"},{"type":"text","text":" calls"}]}],[{"type":"paragraph","inlineContent":[{"text":"Automatic with ","type":"text"},{"type":"codeVoice","code":"unlockOption"},{"text":" control","type":"text"}]}]]],"header":"row"},{"text":"Testing your migration","type":"heading","anchor":"Testing-your-migration","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"After migrating, verify that:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lock behavior is maintained"}]},{"type":"text","text":": Operations are still properly locked"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Error handling works","type":"text"}]},{"type":"text","text":": Both operation errors and lock failures are handled"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Timing is correct","type":"text"}],"type":"strong"},{"text":": Use ","type":"text"},{"code":"unlockOption","type":"codeVoice"},{"text":" to adjust timing if needed","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Performance is maintained","type":"text"}],"type":"strong"},{"text":": No regression in lock performance","type":"text"}]}]}]},{"text":"Summary","type":"heading","anchor":"Summary","level":2},{"type":"paragraph","inlineContent":[{"text":"Lockman 1.3 represents a significant API simplification while maintaining all the functionality and safety guarantees of previous versions. The migration primarily involves moving from ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"Effect.lock","type":"codeVoice"},{"text":" method chains, which provides a cleaner and more consistent API surface.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Key takeaways:","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Breaking changes"}],"type":"strong"},{"text":": ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" methods removed","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Consistent API"}],"type":"strong"},{"type":"text","text":": Single method chain approach with "},{"type":"codeVoice","code":"Effect.lock"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Enhanced safety"}],"type":"strong"},{"type":"text","text":": Automatic lock management only"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Better integration","type":"text"}]},{"type":"text","text":": Natural fit with TCA Effect patterns"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new API eliminates confusion between different locking approaches and provides a more maintainable codebase going forward."}]}]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/migratingto1.3"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/MigratingTo1.3"},"kind":"article","references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"}}}