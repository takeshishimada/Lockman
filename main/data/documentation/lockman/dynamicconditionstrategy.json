{"sections":[],"kind":"article","metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"Dynamic Condition Evaluation","role":"article"},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The LockmanDynamicConditionReducer provides unified condition evaluation for both reducer-level and action-level exclusive processing. This enables flexible control over when actions should be executed based on dynamic runtime conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike traditional strategies that use fixed rules, dynamic condition evaluation allows you to implement complex business logic that evaluates state and actions at runtime to determine whether exclusive processing should be applied."}]},{"level":2,"type":"heading","text":"Two-Level Processing Architecture","anchor":"Two-Level-Processing-Architecture"},{"level":3,"type":"heading","text":"Reducer-Level Processing","anchor":"Reducer-Level-Processing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic condition evaluation that applies to all actions processed by the reducer. This level is ideal for global constraints like authentication checks or system status validation."}]},{"level":3,"type":"heading","text":"Action-Level Processing","anchor":"Action-Level-Processing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Independent condition evaluation for specific actions using the "},{"code":"lock","type":"codeVoice"},{"type":"text","text":" method. This level is perfect for operation-specific constraints like balance checks or business hour validation."}]},{"level":2,"type":"heading","text":"Basic Usage","anchor":"Basic-Usage"},{"level":3,"type":"heading","text":"Simple Reducer-Level Condition","anchor":"Simple-Reducer-Level-Condition"},{"syntax":"swift","type":"codeListing","code":["var body: some ReducerOf<Self> {","  Reduce { state, action in","    switch action {","    case .transfer(let amount):","      state.balance -= amount","      return .run { send in","        await send(.transferCompleted)","      }","    case .withdraw(let amount):","      state.balance -= amount","      return .run { send in","        await send(.withdrawCompleted)","      }","    default:","      return .none","    }","  }","  .lock(","    condition: { state, action in","      \/\/ Reducer-level condition: Check authentication for financial operations","      switch action {","      case .transfer, .withdraw:","        return state.isAuthenticated ? .success : .cancel(AuthError.notAuthenticated)","      default:","        return .success  \/\/ Allow other actions","      }","    },","    boundaryId: CancelID.authentication,","    lockFailure: { error, send in","      await send(.showError(error.localizedDescription))","    }","  )","}"]},{"anchor":"Action-Level-Condition-Evaluation","type":"heading","text":"Action-Level Condition Evaluation","level":3},{"code":["let reducer = LockmanDynamicConditionReducer<State, Action>(","  { state, action in","    \/\/ Base reducer implementation","    switch action {","    case .transfer(let amount):","      return .run { send in","        await processTransfer(amount)","        await send(.transferCompleted)","      }","    default:","      return .none","    }","  },","  condition: { _, _ in .success },  \/\/ Allow all actions at reducer level","  boundaryId: CancelID.operations",")","","\/\/ Use action-level conditions for specific operations","func handleTransfer(amount: Double, state: State) -> Effect<Action> {","  return reducer.lock(","    state: state,","    action: .transfer(amount),","    operation: { send in","      await processTransfer(amount)","      await send(.transferCompleted)","    },","    lockFailure: { error, send in","      await send(.showError(error.localizedDescription))","    },","    boundaryId: CancelID.transfer,","    lockCondition: { state, _ in","      \/\/ Action-level condition: Check balance","      guard state.balance >= amount else {","        return .cancel(TransferError.insufficientFunds(","          required: amount,","          available: state.balance","        ))","      }","      return .success","    }","  )","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Independent-Level-Processing","type":"heading","text":"Independent Level Processing","level":2},{"inlineContent":[{"type":"text","text":"Both levels operate independently, allowing you to combine global and specific constraints:"}],"type":"paragraph"},{"syntax":"swift","code":["let reducer = LockmanDynamicConditionReducer<State, Action>(","  { state, action in","    switch action {","    case .performOperation:","      return .run { send in","        await send(.operationCompleted)","      }","    default:","      return .none","    }","  },","  condition: { state, action in","    \/\/ Reducer-level: Global authentication check","    switch action {","    case .performOperation:","      return state.isAuthenticated ? .success : .cancel(AuthError.notAuthenticated)","    default:","      return .success","    }","  },","  boundaryId: CancelID.auth,","  lockFailure: { error, send in","    await send(.showError(\"Auth failed: \\(error.localizedDescription)\"))","  }",")","","\/\/ Action-level processing with different conditions","func handleSecureOperation(state: State) -> Effect<Action> {","  return reducer.lock(","    state: state,","    action: .performOperation,","    operation: { send in","      await performSecureOperation()","      await send(.operationCompleted)","    },","    lockFailure: { error, send in","      await send(.showError(\"Operation failed: \\(error.localizedDescription)\"))","    },","    boundaryId: CancelID.secureOp,","    lockCondition: { state, _ in","      \/\/ Action-level: Additional security checks","      guard state.securityLevel >= .high else {","        return .cancel(SecurityError.insufficientPermissions)","      }","      return .success","    }","  )","}"],"type":"codeListing"},{"text":"Cancellable Effect Control","level":2,"anchor":"Cancellable-Effect-Control","type":"heading"},{"inlineContent":[{"type":"text","text":"Both levels use cancellable effects to ensure proper resource management:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Reducer-level cancellation",".lock(","  condition: { _, _ in .success },","  boundaryId: CancelID.operations  \/\/ Effects cancelled by this boundary",")","","\/\/ Action-level cancellation  ","reducer.lock(","  \/\/ ...","  boundaryId: CancelID.specificOperation  \/\/ Independent cancellation boundary",")"],"type":"codeListing"},{"inlineContent":[{"text":"When multiple operations use the same boundary ID, newer operations will cancel previous ones automatically.","type":"text"}],"type":"paragraph"},{"text":"Condition Evaluation Results","level":2,"anchor":"Condition-Evaluation-Results","type":"heading"},{"inlineContent":[{"text":"All conditions must return a ","type":"text"},{"code":"LockmanResult","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Allow exclusive processing","return .success","","\/\/ Skip exclusive processing with error","return .cancel(MyError.conditionNotMet)","","\/\/ Allow with preceding cancellation (advanced usage)","return .successWithPrecedingCancellation(cancellationError)"],"type":"codeListing"},{"text":"Practical Examples","level":2,"anchor":"Practical-Examples","type":"heading"},{"text":"Business Hours Control","level":3,"anchor":"Business-Hours-Control","type":"heading"},{"syntax":"swift","code":[".lock(","  condition: { state, action in","    switch action {","    case .makeTransaction:","      let currentHour = Calendar.current.component(.hour, from: Date())","      guard (9...17).contains(currentHour) else {","        return .cancel(BusinessError.outsideBusinessHours)","      }","      return .success","    default:","      return .success","    }","  },","  boundaryId: CancelID.businessHours",")"],"type":"codeListing"},{"text":"Multi-Condition Validation","level":3,"anchor":"Multi-Condition-Validation","type":"heading"},{"syntax":"swift","code":["reducer.lock(","  state: state,","  action: action,","  operation: { send in","    await performComplexOperation()","    await send(.completed)","  },","  boundaryId: CancelID.complexOp,","  lockCondition: { state, action in","    \/\/ Multiple validation checks","    guard state.systemStatus == .ready else {","      return .cancel(SystemError.notReady)","    }","    ","    guard state.userPermissions.contains(.execute) else {","      return .cancel(PermissionError.insufficientRights)","    }","    ","    if case .processLargeData(let size) = action {","      guard size <= state.maxAllowedSize else {","        return .cancel(DataError.sizeExceeded)","      }","    }","    ","    return .success","  }",")"],"type":"codeListing"},{"text":"Error Handling","level":2,"anchor":"Error-Handling","type":"heading"},{"text":"Custom Error Types","level":3,"anchor":"Custom-Error-Types","type":"heading"},{"syntax":"swift","code":["enum BusinessError: Error, LocalizedError {","  case outsideBusinessHours","  case insufficientFunds(required: Double, available: Double)","  case dailyLimitExceeded(limit: Double)","  ","  var errorDescription: String? {","    switch self {","    case .outsideBusinessHours:","      return \"Operations only allowed during business hours (9:00-17:00)\"","    case .insufficientFunds(let required, let available):","      return \"Insufficient funds: Required $\\(required), Available $\\(available)\"","    case .dailyLimitExceeded(let limit):","      return \"Daily transaction limit of $\\(limit) exceeded\"","    }","  }","}"],"type":"codeListing"},{"text":"Structured Error Handling","level":3,"anchor":"Structured-Error-Handling","type":"heading"},{"syntax":"swift","code":["lockFailure: { error, send in","  switch error {","  case let businessError as BusinessError:","    switch businessError {","    case .outsideBusinessHours:","      await send(.showBusinessHoursMessage)","    case .insufficientFunds(let required, let available):","      await send(.showInsufficientFundsDialog(required: required, available: available))","    case .dailyLimitExceeded(let limit):","      await send(.showDailyLimitWarning(limit: limit))","    }","  default:","    await send(.showGenericError(error.localizedDescription))","  }","}"],"type":"codeListing"},{"text":"Migration from Strategy-Based Approach","level":2,"anchor":"Migration-from-Strategy-Based-Approach","type":"heading"},{"inlineContent":[{"type":"text","text":"If you were previously using the strategy-based DynamicConditionStrategy:"}],"type":"paragraph"},{"text":"Before (Strategy-Based)","level":3,"anchor":"Before-Strategy-Based","type":"heading"},{"syntax":"swift","code":["\/\/ Old approach - no longer available","@LockmanDynamicCondition","enum Action {","  \/\/ ...","}"],"type":"codeListing"},{"text":"After (Unified Condition Evaluation)","level":3,"anchor":"After-Unified-Condition-Evaluation","type":"heading"},{"syntax":"swift","code":["\/\/ New approach - unified API",".lock(","  condition: { state, action in","    \/\/ Your condition logic here","    return .success","  },","  boundaryId: YourBoundaryId.dynamicConditions",")"],"type":"codeListing"},{"inlineContent":[{"text":"The new approach provides the same flexibility with a cleaner, more predictable API that separates reducer-level and action-level concerns.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/dynamicconditionstrategy"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"title":"Strategies","generated":true,"anchor":"Strategies"}],"references":{"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"type":"topic","title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic","title":"ConcurrencyLimitedStrategy","kind":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"role":"article","kind":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"title":"PriorityBasedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","title":"CompositeStrategy","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/compositestrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article"}}}