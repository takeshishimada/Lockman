{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority operations can interrupt low-priority operations to execute, allowing important operations to be handled preferentially.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This strategy is used in situations where high-urgency operations or control based on importance is required.","type":"text"}],"type":"paragraph"},{"text":"Priority System","level":2,"type":"heading","anchor":"Priority-System"},{"text":"Priority Levels","level":3,"type":"heading","anchor":"Priority-Levels"},{"inlineContent":[{"inlineContent":[{"text":"high","type":"text"}],"type":"strong"},{"text":" - High Priority","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can interrupt all other priority operations","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"System-level emergency operations or important user operations","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"low","type":"text"}]},{"text":" - Low Priority","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt none priority operations","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Interrupted by high priority","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Regular background operations","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"text":" - No Priority","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bypasses priority system"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Not interrupted by other operations","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Basic operations or temporary disabling"}]}]}]},{"text":"Exclusive Execution Control","level":3,"type":"heading","anchor":"Exclusive-Execution-Control"},{"inlineContent":[{"text":"Within the same priority level, control is based on the exclusive execution behavior setting of existing operations:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"exclusive"}],"type":"strong"},{"type":"text","text":" - Exclusive Execution"}],"type":"paragraph"},{"code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"],"syntax":"swift","type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Rejects new operations of the same priority"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Protects important operations from interruption","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"replaceable","type":"text"}]},{"type":"text","text":" - Replaceable Execution"}],"type":"paragraph"},{"code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"],"syntax":"swift","type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can be interrupted by new operations of the same priority","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied to search or update operations"}]}]}]},{"text":"Usage","level":2,"type":"heading","anchor":"Usage"},{"text":"Basic Usage Example","level":3,"type":"heading","anchor":"Basic-Usage-Example"},{"code":["@LockmanPriorityBased","enum ViewAction {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Operation Examples","level":2,"type":"heading","anchor":"Operation-Examples"},{"text":"Interruption by Priority","level":3,"type":"heading","anchor":"Interruption-by-Priority"},{"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"],"syntax":null,"type":"codeListing"},{"text":"Control at Same Priority","level":3,"type":"heading","anchor":"Control-at-Same-Priority"},{"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"],"syntax":null,"type":"codeListing"},{"text":"Error Handling","level":2,"type":"heading","anchor":"Error-Handling"},{"inlineContent":[{"type":"text","text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the "},{"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference","overridingTitle":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"Error Types","level":3,"type":"heading","anchor":"Error-Types"},{"inlineContent":[{"text":"PriorityBasedStrategy uses two error types, both conforming to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol:","type":"text"}],"type":"paragraph"},{"text":"LockmanPriorityBasedBlockedError","level":4,"type":"heading","anchor":"LockmanPriorityBasedBlockedError"},{"inlineContent":[{"type":"text","text":"Occurs when a new action is blocked due to priority conflicts."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"BlockedReason cases:","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"higherPriorityExists","type":"text"}]},{"type":"text","text":" - Higher priority is running"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"samePriorityConflict"}]},{"type":"text","text":" - Conflict at same priority"}]}]}]},{"syntax":"swift","code":["lockFailure: { error, send in","    if let blockedError = error as? LockmanPriorityBasedBlockedError {","        switch blockedError.reason {","        case .higherPriorityExists(let requested, let current):","            await send(.priorityConflict(\"Waiting due to high priority process running\"))","        case .samePriorityConflict(let priority):","            await send(.busyMessage(\"Process with same priority is running\"))","        }","    }","}"],"type":"codeListing"},{"level":4,"anchor":"LockmanPriorityBasedCancellationError","text":"LockmanPriorityBasedCancellationError","type":"heading"},{"inlineContent":[{"type":"text","text":"Occurs when an existing action is cancelled by preemption."}],"type":"paragraph"},{"syntax":"swift","code":["catch handler: { error, send in","    if let cancellationError = error as? LockmanPriorityBasedCancellationError {","        await send(.processCancelled(\"Interrupted by high priority process: \\(cancellationError.cancelledInfo.actionId)\"))","    }","}"],"type":"codeListing"}]}],"sections":[],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","interfaceLanguage":"swift"},"metadata":{"title":"PriorityBasedStrategy","roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/prioritybasedstrategy"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies"}],"references":{"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","role":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","title":"Error Handling"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","title":"CompositeStrategy","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/compositestrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic","title":"ConcurrencyLimitedStrategy","kind":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"type":"topic","title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","kind":"article","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article"}}}