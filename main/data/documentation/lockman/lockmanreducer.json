{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanReducer"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Base"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Base"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","text":"Reducer"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"anchor":"Lock-First-Behavior","type":"heading","level":2,"text":"Lock-First Behavior"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"This reducer implements true lock-first behavior"}]},{"type":"text","text":": Lock acquisition feasibility is checked"},{"type":"text","text":" "},{"type":"text","text":"BEFORE the base reducer executes, preventing state mutations when locks cannot be acquired."},{"type":"text","text":" "},{"type":"text","text":"This ensures complete exclusive control over both state changes and effects."}],"type":"paragraph"},{"anchor":"Lock-Execution-Flow--UniqueId-Consistency","type":"heading","level":2,"text":"Lock Execution Flow & UniqueId Consistency"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"LockmanInfo Capture","type":"text"}],"type":"strong"},{"text":": Capture action’s lockmanInfo once to ensure consistent uniqueId","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Lock Feasibility Check","type":"text"}],"type":"strong"},{"type":"text","text":": Determine if lock can be acquired using strategy’s "},{"type":"codeVoice","code":"canLock"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Conditional State Mutation","type":"text"}],"type":"strong"},{"text":": Base reducer executes ONLY if lock acquisition succeeded","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Effect Execution"}]},{"text":": Run effects with the already-acquired lock using same lockmanInfo","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Guaranteed Unlock"}]},{"type":"text","text":": Release lock when effects complete using matching uniqueId"}]}]}]},{"anchor":"When-Lock-Fails","type":"heading","level":2,"text":"When Lock Fails"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"No state mutations occur (true lock-first behavior)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Base reducer is never called","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Lock failure handler is invoked if provided","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Effect returns ","type":"text"},{"type":"codeVoice","code":".none"},{"text":" (operation is completely cancelled)","type":"text"}]}]}]},{"anchor":"Strategy-Resolution","type":"heading","level":2,"text":"Strategy Resolution"},{"inlineContent":[{"type":"text","text":"The reducer uses Effect-based strategy resolution to work around Swift’s existential type"},{"type":"text","text":" "},{"type":"text","text":"limitations, allowing type-safe strategy resolution before reducer execution."}],"type":"paragraph"},{"anchor":"Example","type":"heading","level":2,"text":"Example"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State: Equatable {","    var counter = 0  \/\/ ✅ Only mutated when lock can be acquired","  }","","  enum Action: LockmanSingleExecutionAction {","    case increment","    case decrement","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .increment, .decrement:","        return LockmanSingleExecutionInfo(actionId: \"counter\", mode: .boundary)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .increment:","        state.counter += 1  \/\/ ✅ Executes ONLY after lock feasibility check","        return .run { send in","          \/\/ This effect executes with the acquired lock","          await performSideEffect()","        }","      case .decrement:","        state.counter -= 1  \/\/ ✅ Executes ONLY after lock feasibility check","        return .none","      }","    }","    .lock(boundaryId: CancelID.feature)","  }","}"]}],"kind":"content"}],"topicSections":[{"title":"Instance Properties","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/body"],"anchor":"Instance-Properties"},{"title":"Type Aliases","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Action","doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/State"],"anchor":"Type-Aliases"},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Reducer-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Reducer-Implementations"],"anchor":"Default-Implementations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmanreducer"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer"},"metadata":{"title":"LockmanReducer","navigatorTitle":[{"text":"LockmanReducer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanReducer","kind":"identifier"}],"symbolKind":"struct","roleHeading":"Structure","role":"symbol","modules":[{"name":"Lockman"}],"externalID":"s:7Lockman0A7ReducerV"},"abstract":[{"text":"A reducer wrapper that applies Lockman locking with true lock-first behavior.","type":"text"}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/Lockman\/22ComposableArchitecture7ReducerP"],"kind":"relationships"}],"kind":"symbol","references":{"doc://Lockman/documentation/Lockman/LockmanReducer/State":{"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"navigatorTitle":[{"kind":"identifier","text":"State"}],"abstract":[],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/State","url":"\/documentation\/lockman\/lockmanreducer\/state","type":"topic","title":"LockmanReducer.State"},"doc://Lockman/documentation/Lockman/LockmanReducer/body":{"kind":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Base"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Base"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","url":"\/documentation\/lockman\/lockmanreducer\/body","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/body","abstract":[]},"doc://Lockman/documentation/Lockman/LockmanReducer/Reducer-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Reducer-Implementations","title":"Reducer Implementations","url":"\/documentation\/lockman\/lockmanreducer\/reducer-implementations"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"},"doc://Lockman/documentation/Lockman/LockmanReducer/Action":{"navigatorTitle":[{"text":"Action","kind":"identifier"}],"url":"\/documentation\/lockman\/lockmanreducer\/action","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Action","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}],"title":"LockmanReducer.Action","abstract":[]},"doc://Lockman/22ComposableArchitecture7ReducerP":{"title":"ComposableArchitecture.Reducer","identifier":"doc:\/\/Lockman\/22ComposableArchitecture7ReducerP","type":"unresolvable"},"doc://Lockman/documentation/Lockman/LockmanReducer":{"type":"topic","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer","abstract":[{"type":"text","text":"A reducer wrapper that applies Lockman locking with true lock-first behavior."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanReducer"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanReducer"}],"title":"LockmanReducer","url":"\/documentation\/lockman\/lockmanreducer"}}}