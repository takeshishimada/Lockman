{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"GroupCoordinationStrategy is a strategy that coordinates related operations as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where multiple related processes need to work cooperatively.","type":"text"}]},{"type":"heading","text":"Group System","level":2,"anchor":"Group-System"},{"type":"heading","text":"Coordination Roles","level":3,"anchor":"Coordination-Roles"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Group coordination uses roles to define how actions participate in group operations:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"none","type":"text"}],"type":"strong"},{"text":" - Non-exclusive Participant","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate regardless of group state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Auxiliary operations such as UI updates or logging","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"leader","type":"text"}],"type":"strong"},{"text":" - Group Leader","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Role to start group activities","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables member participation"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"text":" - Group Member","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Can only participate in active groups","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Executes when leader or other participants are present"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Responsible for coordinated operations"}],"type":"paragraph"}]}]},{"type":"heading","text":"Leader Entry Policy","level":3,"anchor":"Leader-Entry-Policy"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"emptyGroup","type":"text"}],"type":"strong"},{"text":" - Start only in empty group","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.emptyGroup)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Starts new activity cycle"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Most strict control","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutMembers"}]},{"type":"text","text":" - Start without members"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.withoutMembers)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no members are present"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Other leaders are allowed"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables coordination between leaders"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutLeader"}]},{"type":"text","text":" - Start without leader"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.withoutLeader)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no other leaders are present"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Members are allowed","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Exclusive control of leader authority","type":"text"}]}]}]},{"type":"heading","text":"Usage","level":2,"anchor":"Usage"},{"type":"heading","text":"Basic Usage Example","level":3,"anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"]},{"type":"heading","text":"Coordination with Multiple Groups","level":3,"anchor":"Coordination-with-Multiple-Groups"},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"type":"heading","text":"Operation Examples","level":2,"anchor":"Operation-Examples"},{"type":"heading","text":"Leader-Member Coordination","level":3,"anchor":"Leader-Member-Coordination"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"]},{"type":"heading","text":"Entry Policy Differences","level":3,"anchor":"Entry-Policy-Differences"},{"type":"codeListing","syntax":null,"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"]},{"type":"heading","text":"Error Handling","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"type":"text","text":" page."}]},{"type":"heading","text":"LockmanGroupCoordinationCancellationError","level":3,"anchor":"LockmanGroupCoordinationCancellationError"},{"type":"paragraph","inlineContent":[{"text":"This error conforms to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol and provides:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"reason","type":"codeVoice"},{"text":": Specific reason for cancellation","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"CancellationReason cases:","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}]},{"type":"text","text":" - Action already in group"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}]},{"text":" - Leader cannot join non-empty group","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other operations are running\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"memberCannotJoinEmptyGroup","type":"text"}]},{"type":"text","text":" - Member cannot join empty group"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"blockedByExclusiveLeader","type":"text"}]},{"type":"text","text":" - Blocked by exclusive leader"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader operation: \\(leaderInfo.actionId)\"))","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"seeAlsoSections":[{"generated":true,"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"sections":[],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"role":"article","title":"GroupCoordinationStrategy"},"kind":"article","references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","role":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","title":"Error Handling"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}]},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","title":"CompositeStrategy","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/compositestrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"topic","title":"ConcurrencyLimitedStrategy","kind":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"role":"article","kind":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"title":"PriorityBasedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","type":"topic"}}}