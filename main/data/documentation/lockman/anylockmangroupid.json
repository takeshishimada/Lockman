{"topicSections":[{"generated":true,"anchor":"Operators","title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"]},{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"]},{"generated":true,"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"]},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"]}],"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"symbolKind":"struct","modules":[{"name":"Lockman"}],"role":"symbol","externalID":"s:7Lockman03AnyA7GroupIdV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"title":"AnyLockmanGroupId"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"text":"This wrapper enables different types of group identifiers to coexist in the same","type":"text"},{"text":" ","type":"text"},{"text":"collection while maintaining type safety for hashing and equality operations.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Type Erasure Benefits","type":"heading","anchor":"Type-Erasure-Benefits"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows "},{"code":"Set<AnyLockmanGroupId>","type":"codeVoice"},{"type":"text","text":" with mixed group ID types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Thread Safety","type":"heading","anchor":"Thread-Safety"},{"inlineContent":[{"type":"text","text":"Marked as "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" because "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}],"type":"paragraph"},{"level":2,"text":"Usage Example","type":"heading","anchor":"Usage-Example"},{"syntax":"swift","type":"codeListing","code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"]}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"paths":["\/documentation\/lockman\/anylockmangroupid"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","abstract":[],"kind":"article","title":"Equatable Implementations"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","type":"unresolvable","title":"Swift.CustomDebugStringConvertible"},"doc://Lockman/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/Lockman\/SQ"},"doc://Lockman/SH":{"identifier":"doc:\/\/Lockman\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://Lockman/s8CopyableP":{"title":"Swift.Copyable","type":"unresolvable","identifier":"doc:\/\/Lockman\/s8CopyableP"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"kind":"symbol","title":"==(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Compares two "},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"type":"text","text":" instances for equality."}],"type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"abstract":[{"type":"text","text":"Generates a hash value for this group ID."}],"role":"symbol","title":"hash(into:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","abstract":[{"text":"Creates a new ","type":"text"},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":"."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A7GroupIda","text":"LockmanGroupId"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"title":"AnyLockmanGroupId","url":"\/documentation\/lockman\/anylockmangroupid","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","abstract":[],"kind":"article"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"}}}