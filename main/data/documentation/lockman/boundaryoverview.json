{"metadata":{"roleHeading":"Article","role":"article","title":"Boundary","modules":[{"name":"Lockman"}]},"seeAlsoSections":[{"title":"Essentials","generated":true,"anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","interfaceLanguage":"swift"},"abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/lockman\/boundaryoverview"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boundary is the "},{"type":"strong","inlineContent":[{"type":"text","text":"exclusive control boundary"}]},{"type":"text","text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"]},{"type":"paragraph","inlineContent":[{"text":"Using CancelID as a boundary provides the following benefits:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Natural integration with TCA"}]},{"text":" - Leverages existing TCA mechanisms","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Clear boundary definition"}],"type":"strong"},{"text":" - CancelID clearly defines the scope of exclusive control","type":"text"}]}]}],"type":"orderedList"},{"level":2,"type":"heading","text":"Boundary Specifications","anchor":"Boundary-Specifications"},{"level":3,"type":"heading","text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries"},{"type":"paragraph","inlineContent":[{"text":"Exclusive control between different Boundaries is not possible:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Since these are treated as separate boundaries, load can be executed even while save is running.","type":"text"}]},{"level":3,"type":"heading","text":"2. Only one Boundary per reducer","anchor":"2-Only-one-Boundary-per-reducer"},{"inlineContent":[{"text":"You cannot specify multiple Boundaries for a single reducer:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"]},{"inlineContent":[{"type":"text","text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:"}],"type":"paragraph"},{"code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"],"type":"codeListing","syntax":"swift"},{"text":"Summary","type":"heading","anchor":"Summary","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness."}]}],"kind":"content"}],"kind":"article","sections":[],"references":{"doc://Lockman/documentation/Lockman/Configuration":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"type":"topic","role":"article","title":"Configuration"},"doc://Lockman/documentation/Lockman/Unlock":{"title":"Unlock","kind":"article","type":"topic","url":"\/documentation\/lockman\/unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","role":"article","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}]},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","title":"Debugging Guide","role":"article","type":"topic","url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}]},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"kind":"article","title":"Choosing a Strategy","role":"article","type":"topic","url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","url":"\/documentation\/lockman\/errorhandling","role":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","title":"Error Handling"},"doc://Lockman/documentation/Lockman/Lock":{"abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","url":"\/documentation\/lockman\/lock","type":"topic","title":"Lock","kind":"article"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","kind":"article","type":"topic","url":"\/documentation\/lockman\/gettingstarted","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","role":"article","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}]},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"}}}