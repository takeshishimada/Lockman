{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true,"title":"Essentials","anchor":"Essentials"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"Error Handling","role":"article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"text":"Common Error Handling Patterns","level":2,"type":"heading","anchor":"Common-Error-Handling-Patterns"},{"text":"lockFailure Handler with Reducer.lock()","level":3,"type":"heading","anchor":"lockFailure-Handler-with-Reducerlock"},{"inlineContent":[{"text":"Basic lockFailure handler structure used in all strategies:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Benefits of centralized error handling:"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Consistent error handling across all actions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Single place to update error messages"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Easier to maintain and test"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Parameters:"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"error"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"send","type":"codeVoice"},{"type":"text","text":": Function for sending feedback to the user"}]}]}],"type":"unorderedList"},{"text":"catch handler Pattern","level":3,"type":"heading","anchor":"catch-handler-Pattern"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Handling general errors that occur during processing:"}]},{"syntax":"swift","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}]},{"anchor":"Types-of-Errors-and-Solutions","type":"heading","text":"Types of Errors and Solutions","level":2},{"type":"heading","level":3,"anchor":"1-Lock-Acquisition-Failure-Already-Locked","text":"1. Lock Acquisition Failure (Already Locked)"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"type":"text","text":": Occurs when the same operation or boundary is already running"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Notify user that operation is in progress","    await send(.showMessage(\"Operation is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"]},{"type":"heading","level":3,"anchor":"2-PermissionPriority-Conflicts","text":"2. Permission\/Priority Conflicts"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"text":": Occurs due to higher priority operations or group rule constraints","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"]},{"type":"heading","level":3,"anchor":"3-Cancellation-Notification","text":"3. Cancellation Notification"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"type":"text","text":": When existing operations are cancelled by higher priority operations"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"]},{"type":"heading","level":2,"anchor":"Best-Practices","text":"Best Practices"},{"type":"heading","level":3,"anchor":"1-Proper-Error-Type-Casting","text":"1. Proper Error Type Casting"},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"]},{"type":"heading","level":3,"anchor":"2-User-Friendly-Messages","text":"2. User-Friendly Messages"},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"]},{"type":"heading","level":3,"anchor":"3-Utilizing-Additional-Information","text":"3. Utilizing Additional Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many errors contain additional information:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start operation\"))","        }","    }",")"]},{"type":"heading","level":2,"anchor":"Strategy-Specific-Errors","text":"Strategy-Specific Errors"},{"type":"paragraph","inlineContent":[{"text":"All strategy errors now conform to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol, providing consistent access to:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"type":"text","text":": Where the cancellation occurred"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"errorDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Localized error descriptions"}]}]}]},{"type":"heading","level":3,"anchor":"Error-Types-by-Strategy","text":"Error Types by Strategy:"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SingleExecutionStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"PriorityBasedStrategy"}]},{"type":"text","text":":"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedBlockedError","type":"codeVoice"},{"text":" - New action blocked by priority","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedCancellationError"},{"type":"text","text":" - Existing action cancelled by preemption"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"GroupCoordinationStrategy","type":"text"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"},{"type":"text","text":" - Group rule violations"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"ConcurrencyLimitedStrategy","type":"text"}],"type":"strong"},{"text":": ","type":"text"},{"code":"LockmanConcurrencyLimitedCancellationError","type":"codeVoice"},{"text":" - Concurrent execution limit exceeded","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","type":"reference","overridingTitle":"DynamicConditionStrategy","overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}],"isActive":true},{"type":"text","text":" - Condition mismatch errors"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"reference","isActive":true,"overridingTitle":"CompositeStrategy"},{"type":"text","text":" - Composite strategy errors"}],"type":"paragraph"}]}]}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","interfaceLanguage":"swift"},"references":{"doc://Lockman/documentation/Lockman/Unlock":{"title":"Unlock","kind":"article","type":"topic","url":"\/documentation\/lockman\/unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","role":"article","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}]},"doc://Lockman/documentation/Lockman/Lock":{"abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","url":"\/documentation\/lockman\/lock","type":"topic","title":"Lock","kind":"article"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","kind":"article","type":"topic","url":"\/documentation\/lockman\/gettingstarted","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","role":"article","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}]},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"kind":"article","title":"Choosing a Strategy","role":"article","type":"topic","url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}]},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","title":"Debugging Guide","role":"article","type":"topic","url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}]},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","url":"\/documentation\/lockman\/boundaryoverview","kind":"article","type":"topic","title":"Boundary","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"role":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","title":"CompositeStrategy","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/compositestrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},"doc://Lockman/documentation/Lockman/Configuration":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"type":"topic","role":"article","title":"Configuration"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","kind":"symbol","role":"collection"}}}