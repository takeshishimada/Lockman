{"metadata":{"roleHeading":"Article","role":"article","title":"PriorityBasedStrategy","modules":[{"name":"Lockman"}]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PriorityBasedStrategy is a strategy that performs execution control based on priority. High-priority processing can interrupt low-priority processing to execute, allowing important processing to be handled preferentially."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where high-urgency processing or control based on importance is required."}]},{"level":2,"anchor":"Priority-System","type":"heading","text":"Priority System"},{"level":3,"anchor":"Priority-Levels","type":"heading","text":"Priority Levels"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"high","type":"text"}]},{"type":"text","text":" - High Priority"}]},{"items":[{"content":[{"inlineContent":[{"text":"Can interrupt all other priority processing","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"System-level emergency processing or important user operations"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"low","type":"text"}]},{"type":"text","text":" - Low Priority"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can interrupt none priority processing","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Interrupted by high priority","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Regular background processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"type":"text","text":" - No Priority"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bypasses priority system"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Not interrupted by other processing"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Basic processing or temporary disabling"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Concurrent-Execution-Control","type":"heading","text":"Concurrent Execution Control"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within the same priority level, control is based on the concurrent execution behavior setting of existing processing:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"exclusive"}],"type":"strong"},{"text":" - Exclusive Execution","type":"text"}]},{"syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"payment\",","    priority: .high(.exclusive)",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Rejects new processing of the same priority"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Protects important processing from interruption","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"replaceable"}]},{"text":" - Replaceable Execution","type":"text"}]},{"syntax":"swift","code":["LockmanPriorityBasedInfo(","    actionId: \"search\", ","    priority: .high(.replaceable)",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can be interrupted by new processing of the same priority","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied to search or update processing"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"Usage","type":"heading","text":"Usage"},{"level":3,"anchor":"Basic-Usage-Example","type":"heading","text":"Basic Usage Example"},{"syntax":"swift","code":["@LockmanPriorityBased","enum Action {","    case emergencySync","    case normalSync","    case backgroundTask","    ","    var lockmanInfo: LockmanPriorityBasedInfo {","        switch self {","        case .emergencySync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSync:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        case .backgroundTask:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .none","            )","        }","    }","}"],"type":"codeListing"},{"level":2,"anchor":"Operation-Examples","type":"heading","text":"Operation Examples"},{"level":3,"anchor":"Interruption-by-Priority","type":"heading","text":"Interruption by Priority"},{"syntax":null,"code":["Time: 0s  - Low priority process starts    ‚Üí ‚úÖ Execute","Time: 2s  - High priority process request  ‚Üí ‚úÖ Execute (interrupts low process)","Time: 2s  - Low priority process           ‚Üí üõë Cancel","Time: 5s  - High priority process complete ‚Üí ‚úÖ Complete"],"type":"codeListing"},{"level":3,"anchor":"Control-at-Same-Priority","type":"heading","text":"Control at Same Priority"},{"syntax":null,"code":["\/\/ Exclusive setting case","Time: 0s  - high(.exclusive) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.exclusive) request ‚Üí ‚ùå Reject","Time: 3s  - First process completes  ‚Üí ‚úÖ Complete","Time: 4s  - high(.exclusive) request ‚Üí ‚úÖ Execute","","\/\/ Replaceable setting case","Time: 0s  - high(.replaceable) starts  ‚Üí ‚úÖ Execute","Time: 1s  - high(.replaceable) request ‚Üí ‚úÖ Execute (interrupts previous)","Time: 1s  - First process              ‚Üí üõë Cancel"],"type":"codeListing"},{"level":2,"anchor":"Error-Handling","type":"heading","text":"Error Handling"},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with PriorityBasedStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitle":"Error Handling","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}]},{"text":" page.","type":"text"}]},{"anchor":"LockmanPriorityBasedError","text":"LockmanPriorityBasedError","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"higherPriorityExists"}]},{"type":"text","text":" - Higher priority is running"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if case .higherPriorityExists(let requested, let current) = error as? LockmanPriorityBasedError {","        send(.priorityConflict(\"Waiting due to high priority process running\"))","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"samePriorityConflict","type":"text"}]},{"text":" - Conflict at same priority","type":"text"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if case .samePriorityConflict(let priority) = error as? LockmanPriorityBasedError {","        send(.busyMessage(\"Process with same priority is running\"))","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"precedingActionCancelled","type":"text"}]},{"type":"text","text":" - Preceding action cancelled"}],"type":"paragraph"},{"code":["catch handler: { error, send in","    if case .precedingActionCancelled(let cancelledInfo) = error as? LockmanPriorityBasedError {","        send(.processCancelled(\"Interrupted by high priority process\"))","    }","}"],"syntax":"swift","type":"codeListing"}]}],"seeAlsoSections":[{"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"title":"Strategies"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/prioritybasedstrategy"]}],"references":{"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"title":"SingleExecutionStrategy","kind":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"}}}