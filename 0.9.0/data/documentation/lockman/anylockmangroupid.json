{"topicSections":[{"generated":true,"anchor":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"title":"Operators"},{"generated":true,"anchor":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"],"title":"Initializers"},{"generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"],"title":"Instance Methods"},{"generated":true,"anchor":"Default-Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"],"title":"Default Implementations"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"text":"This wrapper enables different types of group identifiers to coexist in the same","type":"text"},{"text":" ","type":"text"},{"text":"collection while maintaining type safety for hashing and equality operations.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Type Erasure Benefits","anchor":"Type-Erasure-Benefits"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Allows "},{"type":"codeVoice","code":"Set<AnyLockmanGroupId>"},{"type":"text","text":" with mixed group ID types"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Thread Safety","anchor":"Thread-Safety"},{"inlineContent":[{"type":"text","text":"Marked as "},{"code":"@unchecked Sendable","type":"codeVoice"},{"type":"text","text":" because "},{"code":"AnyHashable","type":"codeVoice"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Usage Example","anchor":"Usage-Example"},{"code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"metadata":{"title":"AnyLockmanGroupId","modules":[{"name":"Lockman"}],"role":"symbol","symbolKind":"struct","externalID":"s:7Lockman03AnyA7GroupIdV","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"roleHeading":"Structure"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships"}],"sections":[],"variants":[{"paths":["\/documentation\/lockman\/anylockmangroupid"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"kind":"symbol","title":"AnyLockmanGroupId","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","url":"\/documentation\/lockman\/anylockmangroupid","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":", allowing heterogeneous group IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","abstract":[{"text":"Creates a new ","type":"text"},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanGroupId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A7GroupIda"},{"text":")","kind":"text"}],"title":"init(_:)"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"role":"symbol","title":"hash(into:)","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different group ID types with identical values from colliding.","type":"text"}],"url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","type":"topic","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV"},{"text":")","kind":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"title":"CustomDebugStringConvertible Implementations","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","abstract":[{"text":"Compares two ","type":"text"},{"code":"AnyLockmanGroupId","type":"codeVoice"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","title":"==(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV","text":"AnyLockmanGroupId"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"},"doc://Lockman/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP"},"doc://Lockman/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH"},"doc://Lockman/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/Lockman\/SQ"},"doc://Lockman/s8CopyableP":{"type":"unresolvable","title":"Swift.Copyable","identifier":"doc:\/\/Lockman\/s8CopyableP"}}}