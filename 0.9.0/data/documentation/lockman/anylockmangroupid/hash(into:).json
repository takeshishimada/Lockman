{"kind":"symbol","metadata":{"title":"hash(into:)","externalID":"s:7Lockman03AnyA7GroupIdV4hash4intoys6HasherVz_tF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier","text":"Hasher"},{"kind":"text","text":")"}],"modules":[{"name":"Lockman"}],"role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Generates hash values that include type information to prevent"},{"type":"text","text":" "},{"type":"text","text":"different group ID types with identical values from colliding."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"kind":"internalParam","text":"hasher"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"hasher","content":[{"type":"paragraph","inlineContent":[{"text":"The hasher to use when combining the components of this instance","type":"text"}]}]}],"kind":"parameters"},{"content":[{"text":"Hash Collision Prevention","type":"heading","level":2,"anchor":"Hash-Collision-Prevention"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" includes type information in its hash, two different"},{"type":"text","text":" "},{"type":"text","text":"types with the same value will produce different hash values, preventing"},{"type":"text","text":" "},{"type":"text","text":"unintended collisions in hash-based collections."}]}],"kind":"content"}],"sections":[],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmangroupid\/hash(into:)"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"]]},"references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"role":"symbol","title":"hash(into:)","abstract":[{"text":"Generates hash values that include type information to prevent","type":"text"},{"text":" ","type":"text"},{"text":"different group ID types with identical values from colliding.","type":"text"}],"url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","type":"topic","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV"},{"text":")","kind":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"kind":"symbol","title":"AnyLockmanGroupId","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","url":"\/documentation\/lockman\/anylockmangroupid","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"code":"LockmanGroupId","type":"codeVoice"},{"text":", allowing heterogeneous group IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"type":"topic"}}}