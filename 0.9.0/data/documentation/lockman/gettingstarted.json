{"seeAlsoSections":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"anchor":"Essentials"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature.","type":"text"}]},{"level":2,"text":"Adding Lockman as a dependency","type":"heading","anchor":"Adding-Lockman-as-a-dependency"},{"type":"paragraph","inlineContent":[{"text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" file:","type":"text"}]},{"code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"0.9.0\")","]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And add ","type":"text"},{"code":"Lockman","type":"codeVoice"},{"text":" as a dependency of your package’s target:","type":"text"}]},{"code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Writing your first feature","type":"heading","anchor":"Writing-your-first-feature"},{"type":"paragraph","inlineContent":[{"text":"Let’s implement a feature that prevents duplicate execution of processes using the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","overridingTitle":"@LockmanSingleExecution","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}],"isActive":true,"type":"reference"},{"text":" macro.","type":"text"}]},{"level":3,"text":"Step 1: Define the Reducer","type":"heading","anchor":"Step-1-Define-the-Reducer"},{"type":"paragraph","inlineContent":[{"text":"First, define the basic Reducer structure:","type":"text"}]},{"code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"type":"codeListing","syntax":"swift"},{"text":"Step 2: Define State and Action","type":"heading","level":3,"anchor":"Step-2-Define-State-and-Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the State to manage the processing status and the available actions:"}]},{"code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    @LockmanSingleExecution","    enum Action {","        case startProcessButtonTapped","        case processStart","        case processCompleted","        ","        var lockmanInfo: LockmanSingleExecutionInfo {","            switch self {","            case .startProcessButtonTapped:","                return .init(actionId: actionName, mode: .boundary)","            case .processStart, .processCompleted:","                return .init(actionId: actionName, mode: .none)","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Key points:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"reference","isActive":true,"overridingTitle":"@LockmanSingleExecution","overridingTitleInlineContent":[{"code":"@LockmanSingleExecution","type":"codeVoice"}]},{"type":"text","text":" macro to the Action enum makes it conform to the "},{"code":"LockmanSingleExecutionAction","type":"codeVoice"},{"type":"text","text":" protocol"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property defines how each action is controlled for locking:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Action identification: Provides the action identifier within the lock management system"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies","type":"text"}]}]}]}]}]},{"text":"Step 3: Define CancelID","type":"heading","level":3,"anchor":"Step-3-Define-CancelID"},{"type":"paragraph","inlineContent":[{"text":"Define a ","type":"text"},{"type":"codeVoice","code":"CancelID"},{"text":" to use as the cancellation identifier for Effects:","type":"text"}]},{"code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"CancelID","type":"codeVoice"},{"type":"text","text":" is used for Effect cancellation and lock boundary identification."}]},{"type":"heading","anchor":"Step-4-Implement-the-Reducer-body","level":3,"text":"Step 4: Implement the Reducer body"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement processing with exclusive control using the "},{"type":"reference","overridingTitle":"withLock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitleInlineContent":[{"type":"codeVoice","code":"withLock"}],"isActive":true},{"type":"text","text":" method:"}]},{"type":"codeListing","code":["var body: some Reducer<State, Action> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .withLock(","                operation: { send in","                    await send(.processStart)","                    \/\/ Simulate heavy processing","                    try await Task.sleep(nanoseconds: 3_000_000_000)","                    await send(.processCompleted)","                },","                lockFailure: { error, send in","                    \/\/ When processing is already in progress","                    state.message = \"Processing is already in progress\"","                },","                action: action,","                cancelID: CancelID.userAction","            )","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Key points about the ","type":"text"},{"overridingTitle":"withLock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","overridingTitleInlineContent":[{"code":"withLock","type":"codeVoice"}],"type":"reference","isActive":true},{"text":" method:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"operation","type":"codeVoice"},{"type":"text","text":": Defines the processing to be executed under exclusive control"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lockFailure"},{"type":"text","text":": Handler called when the same processing is already in progress"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"action"},{"type":"text","text":": Passes the currently processing action"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"cancelID"},{"text":": Specifies the identifier for Effect cancellation and lock boundary","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"With this implementation, the ","type":"text"},{"type":"codeVoice","code":"startProcessButtonTapped"},{"text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/gettingstarted"]}],"kind":"article","metadata":{"title":"Getting Started","modules":[{"name":"Lockman"}],"role":"article","roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"references":{"doc://Lockman/documentation/Lockman/Configuration":{"title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration","role":"article","kind":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"title":"Boundary","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","role":"article","type":"topic","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"kind":"article","url":"\/documentation\/lockman\/boundaryoverview"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"title":"SingleExecutionStrategy","kind":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","title":"Lock","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"url":"\/documentation\/lockman\/lock","role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock"},"doc://Lockman/documentation/Lockman/Unlock":{"url":"\/documentation\/lockman\/unlock","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"kind":"article","role":"article","title":"Unlock"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","title":"Debugging Guide","url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","role":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}]}}}