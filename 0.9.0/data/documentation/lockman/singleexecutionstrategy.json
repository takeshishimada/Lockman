{"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}]},{"type":"heading","level":2,"anchor":"Execution-Modes","text":"Execution Modes"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}]},{"type":"heading","level":3,"anchor":"none-No-Control","text":"none - No Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Executes all processing concurrently without exclusive control"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Used when temporarily disabling lock functionality"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}],"type":"paragraph"}]}]},{"type":"heading","level":3,"anchor":"boundary-Boundary-level-Exclusive-Control","text":"boundary - Boundary-level Exclusive Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"action - Action-level Exclusive Control","anchor":"action-Action-level-Exclusive-Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","text":"Usage","anchor":"Usage"},{"level":3,"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanSingleExecution","enum Action {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"]},{"level":3,"type":"heading","text":"Usage within Effects","anchor":"Usage-within-Effects"},{"type":"codeListing","syntax":"swift","code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            send(.saveCompleted)","        },","        catch handler: { error, send in","            send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            send(.saveBusy(\"Save process is currently running\"))","        },","        action: .save,","        cancelID: CancelID.userAction","    )"]},{"level":2,"type":"heading","text":"Operation Examples","anchor":"Operation-Examples"},{"level":3,"type":"heading","text":"action mode","anchor":"action-mode"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"type":"codeListing"},{"text":"boundary mode","anchor":"boundary-mode","level":3,"type":"heading"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"type":"codeListing"},{"text":"Error Handling","anchor":"Error-Handling","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true,"overridingTitle":"Error Handling"},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"LockmanSingleExecutionError","anchor":"LockmanSingleExecutionError","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"boundaryAlreadyLocked","type":"text"}]},{"type":"text","text":" - Boundary is already locked"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": ID of the locked boundary"}]}]},{"content":[{"inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Existing lock information","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyRunning","type":"text"}]},{"text":" - Same action is already running","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Running action information","type":"text"}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["lockFailure: { error, send in","    switch error as? LockmanSingleExecutionError {","    case .boundaryAlreadyLocked(_, let existingInfo):","        send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","    case .actionAlreadyRunning(let existingInfo):","        send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","    default:","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"],"type":"codeListing"}],"kind":"content"}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"SingleExecutionStrategy"},"sections":[],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"seeAlsoSections":[{"anchor":"Strategies","title":"Strategies","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","role":"article"}}}