{"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Common-Error-Handling-Patterns","text":"Common Error Handling Patterns"},{"level":3,"type":"heading","anchor":"lockFailure-Handler","text":"lockFailure Handler"},{"inlineContent":[{"text":"Basic lockFailure handler structure used in all strategies:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".withLock(","    operation: { send in","        \/\/ Execute processing","    },","    lockFailure: { error, send in","        \/\/ Error handling","        if case .specificError(let info) = error as? StrategySpecificError {","            send(.userFriendlyMessage(\"Error message\"))","        }","    },","    action: action,","    cancelID: cancelID",")"],"type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Parameters:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"error","type":"codeVoice"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"send"},{"type":"text","text":": Function for sending feedback to the user"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","anchor":"catch-handler-Pattern","text":"catch handler Pattern"},{"inlineContent":[{"text":"Handling general errors that occur during processing:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["catch handler: { error, send in","    send(.operationError(error.localizedDescription))","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Types-of-Errors-and-Solutions","text":"Types of Errors and Solutions"},{"level":3,"type":"heading","anchor":"1-Lock-Acquisition-Failure-Already-Locked","text":"1. Lock Acquisition Failure (Already Locked)"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"type":"text","text":": Occurs when the same processing or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    send(.setButtonState(.loading))","}"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"2-PermissionPriority-Conflicts","text":"2. Permission\/Priority Conflicts"},{"inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"text":": Occurs due to higher priority processing or group rule constraints","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"3-Cancellation-Notification","text":"3. Cancellation Notification"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["catch handler: { error, send in","    if error is CancellationError {","        send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        send(.processError(error.localizedDescription))","    }","}"],"type":"codeListing"},{"level":2,"type":"heading","anchor":"Best-Practices","text":"Best Practices"},{"level":3,"type":"heading","anchor":"1-Proper-Error-Type-Casting","text":"1. Proper Error Type Casting"},{"syntax":"swift","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if case .actionAlreadyRunning(let existingInfo) = error as? LockmanSingleExecutionError {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"2-User-Friendly-Messages","text":"2. User-Friendly Messages"},{"syntax":"swift","code":["\/\/ ✅ Good example: Specific and easy to understand message","send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","send(.showMessage(\"LockmanError: boundary locked\"))"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"3-Utilizing-Additional-Information","text":"3. Utilizing Additional Information"},{"inlineContent":[{"text":"Many errors contain additional information:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["lockFailure: { error, send in","    switch error as? LockmanConcurrencyLimitedError {","    case .concurrencyLimitReached(let current, let limit, _):","        send(.showMessage(\"Concurrent execution limit (\\(limit)) reached (current: \\(current))\"))","    default:","        send(.showMessage(\"Cannot start processing\"))","    }","}"],"type":"codeListing"},{"level":2,"type":"heading","anchor":"Strategy-Specific-Errors","text":"Strategy-Specific Errors"},{"inlineContent":[{"text":"For detailed error information for each strategy, please refer to their respective documentation:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"SingleExecutionStrategy"}],"isActive":true,"overridingTitle":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"reference"},{"text":" - Duplicate execution errors","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"reference","isActive":true,"overridingTitle":"PriorityBasedStrategy","overridingTitleInlineContent":[{"type":"text","text":"PriorityBasedStrategy"}]},{"type":"text","text":" - Priority conflict errors"}]}]},{"content":[{"inlineContent":[{"type":"reference","overridingTitleInlineContent":[{"text":"GroupCoordinationStrategy","type":"text"}],"isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","overridingTitle":"GroupCoordinationStrategy"},{"type":"text","text":" - Group rule violation errors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitle":"ConcurrencyLimitedStrategy","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","type":"reference"},{"text":" - Concurrent execution limit exceeded errors","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","isActive":true,"type":"reference","overridingTitle":"DynamicConditionStrategy","overridingTitleInlineContent":[{"text":"DynamicConditionStrategy","type":"text"}]},{"type":"text","text":" - Condition mismatch errors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","overridingTitle":"CompositeStrategy","overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}]},{"type":"text","text":" - Composite strategy errors"}]}]}],"type":"unorderedList"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"kind":"article","sections":[],"metadata":{"roleHeading":"Article","role":"article","title":"Error Handling","modules":[{"name":"Lockman"}]},"references":{"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"title":"SingleExecutionStrategy","kind":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","title":"Lock","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"url":"\/documentation\/lockman\/lock","role":"article","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock"},"doc://Lockman/documentation/Lockman/Configuration":{"title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration","role":"article","kind":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"kind":"article","title":"Debugging Guide","url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","role":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}]},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"title":"Boundary","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","role":"article","type":"topic","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"kind":"article","url":"\/documentation\/lockman\/boundaryoverview"},"doc://Lockman/documentation/Lockman/Unlock":{"url":"\/documentation\/lockman\/unlock","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"kind":"article","role":"article","title":"Unlock"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","kind":"article","url":"\/documentation\/lockman\/gettingstarted","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","role":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}]}}}