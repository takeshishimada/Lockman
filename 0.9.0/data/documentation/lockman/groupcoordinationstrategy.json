{"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"GroupCoordinationStrategy","role":"article"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"title":"Strategies","generated":true,"anchor":"Strategies"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}]},{"type":"heading","text":"Group System","anchor":"Group-System","level":2},{"type":"heading","text":"Coordination Roles","anchor":"Coordination-Roles","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"none"}]},{"type":"text","text":" - Non-exclusive Participant"}]},{"type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate regardless of group state"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Auxiliary processing such as UI updates or logging"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leader"}]},{"type":"text","text":" - Group Leader"}]},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Role to start group activities","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Controls participation conditions according to entry policy","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables member participation"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"text":" - Group Member","type":"text"}]},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can only participate in active groups","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes when leader or other participants are present"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responsible for coordinated processing"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Leader-Entry-Policy","text":"Leader Entry Policy","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"emptyGroup","type":"text"}]},{"type":"text","text":" - Start only in empty group"}]},{"syntax":"swift","code":[".leader(.emptyGroup)"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Starts new activity cycle","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Most strict control"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"withoutMembers"}],"type":"strong"},{"type":"text","text":" - Start without members"}]},{"syntax":"swift","code":[".leader(.withoutMembers)"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Can participate when no members are present","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Other leaders are allowed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables coordination between leaders"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutLeader"}]},{"type":"text","text":" - Start without leader"}]},{"syntax":"swift","code":[".leader(.withoutLeader)"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Can participate when no other leaders are present","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Members are allowed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Usage","text":"Usage","type":"heading"},{"level":3,"anchor":"Basic-Usage-Example","text":"Basic Usage Example","type":"heading"},{"syntax":"swift","code":["@LockmanGroupCoordination","enum Action {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Coordination-with-Multiple-Groups","text":"Coordination with Multiple Groups","type":"heading"},{"syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing"},{"level":2,"anchor":"Operation-Examples","text":"Operation Examples","type":"heading"},{"level":3,"anchor":"Leader-Member-Coordination","text":"Leader-Member Coordination","type":"heading"},{"syntax":null,"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing"},{"level":3,"anchor":"Entry-Policy-Differences","text":"Entry Policy Differences","type":"heading"},{"syntax":null,"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing"},{"level":2,"anchor":"Error-Handling","text":"Error Handling","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","isActive":true,"type":"reference"},{"text":" page.","type":"text"}]},{"level":3,"anchor":"LockmanGroupCoordinationError","text":"LockmanGroupCoordinationError","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"actionAlreadyInGroup","type":"text"}],"type":"strong"},{"text":" - Action already in group","type":"text"}]},{"syntax":"swift","code":["lockFailure: { error, send in","    if case .actionAlreadyInGroup(let existingInfo, let groupIds) = error as? LockmanGroupCoordinationError {","        send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}],"type":"strong"},{"text":" - Leader cannot join non-empty group","type":"text"}]},{"syntax":"swift","code":["lockFailure: { error, send in","    if case .leaderCannotJoinNonEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"memberCannotJoinEmptyGroup","type":"text"}]},{"type":"text","text":" - Member cannot join empty group"}]},{"syntax":"swift","code":["lockFailure: { error, send in","    if case .memberCannotJoinEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"sections":[],"kind":"article","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"title":"SingleExecutionStrategy","kind":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy","kind":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"}}}