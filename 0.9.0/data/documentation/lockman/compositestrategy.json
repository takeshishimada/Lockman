{"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"CompositeStrategy is a strategy that combines multiple strategies to achieve more complex and advanced exclusive control. For complex requirements that cannot be addressed by a single strategy, you can build flexible and powerful control logic by combining 2 to 5 strategies."}],"type":"paragraph"},{"inlineContent":[{"text":"This strategy is used in advanced use cases that require satisfying multiple control conditions simultaneously.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Combination System","anchor":"Combination-System","type":"heading"},{"level":3,"text":"Number of Strategy Combinations","anchor":"Number-of-Strategy-Combinations","type":"heading"},{"inlineContent":[{"text":"Lockman supports combinations of 2 to 5 strategies:","type":"text"}],"type":"paragraph"},{"level":3,"text":"Combination Control Logic","anchor":"Combination-Control-Logic","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Success required in all strategies"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Success only when lock acquisition is possible in all component strategies","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If even one fails, the entire operation fails","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Coordination of preceding cancellation"}]},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"When any strategy requires preceding cancellation, execute preceding cancellation for all"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the first cancellation error found","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"LIFO (Last In, First Out) release"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Lock release is executed in reverse order of acquisition","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Release from the last acquired lock in order","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Usage","anchor":"Usage","type":"heading"},{"level":3,"text":"Basic Usage Example","anchor":"Basic-Usage-Example","type":"heading"},{"code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self",")","enum Action {","    case criticalSave","    case normalSave","    ","    var lockmanInfoForStrategy1: LockmanSingleExecutionInfo {","        LockmanSingleExecutionInfo(","            actionId: actionName,","            mode: .action","        )","    }","    ","    var lockmanInfoForStrategy2: LockmanPriorityBasedInfo {","        switch self {","        case .criticalSave:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .high(.exclusive)","            )","        case .normalSave:","            return LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable)","            )","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Combining 3 Strategies","anchor":"Combining-3-Strategies","type":"heading"},{"code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self,","    LockmanConcurrencyLimitedStrategy.self",")","enum Action {","    case downloadFile","    ","    var lockmanInfoForStrategy1: LockmanSingleExecutionInfo {","        LockmanSingleExecutionInfo(","            actionId: actionName,","            mode: .action \/\/ Prevent duplication","        )","    }","    ","    var lockmanInfoForStrategy2: LockmanPriorityBasedInfo {","        LockmanPriorityBasedInfo(","            actionId: actionName,","            priority: .low(.replaceable) \/\/ Priority control","        )","    }","    ","    var lockmanInfoForStrategy3: LockmanConcurrencyLimitedInfo {","        LockmanConcurrencyLimitedInfo(","            actionId: actionName,","            concurrencyId: \"downloads\",","            limit: .limited(3) \/\/ Concurrent execution limit","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Operation Examples","anchor":"Operation-Examples","type":"heading"},{"level":3,"text":"Operation with 2 Strategy Combination","anchor":"Operation-with-2-Strategy-Combination","type":"heading"},{"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(.high(.exclusive))","","Time: 0s  - normalSave request","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Result: ✅ Start execution","","Time: 1s  - normalSave request (duplicate)","  Strategy 1: ❌ Fail (same action running)","  Strategy 2: No check (failed at strategy 1)","  Result: ❌ Overall failure","","Time: 2s  - criticalSave request (high priority)","  Strategy 1: ✅ Success (different action)","  Strategy 2: ✅ Success (with preceding cancellation)","  Result: ✅ Start execution (cancel normalSave)"],"syntax":null,"type":"codeListing"},{"level":3,"text":"Operation with 3 Strategy Combination","anchor":"Operation-with-3-Strategy-Combination","type":"heading"},{"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(.low(.replaceable))  ","Strategy 3: ConcurrencyLimited(.limited(2))","","Current situation: 2 download processes running","","Time: 0s  - New download request","  Strategy 1: ✅ Success (different file)","  Strategy 2: ✅ Success (no priority issue)","  Strategy 3: ❌ Fail (concurrent execution limit reached)","  Result: ❌ Overall failure"],"syntax":null,"type":"codeListing"},{"level":2,"text":"Error Handling","anchor":"Error-Handling","type":"heading"},{"inlineContent":[{"text":"For errors that may occur with CompositeStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"isActive":true,"type":"reference","overridingTitle":"Error Handling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},{"text":" page.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Error Handling in Composite Strategy","anchor":"Error-Handling-in-Composite-Strategy","type":"heading"},{"inlineContent":[{"text":"In composite strategies, errors from each component strategy are integrated and reported. Since the error from the first failed strategy is returned, check the error type and handle appropriately:","type":"text"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    switch error {","    case let singleError as LockmanSingleExecutionError:","        send(.singleExecutionConflict(\"Duplicate execution detected\"))","        ","    case let priorityError as LockmanPriorityBasedError:","        send(.priorityConflict(\"Priority conflict occurred\"))","        ","    case let concurrencyError as LockmanConcurrencyLimitedError:","        send(.concurrencyLimitReached(\"Concurrent execution limit reached\"))","        ","    default:","        send(.unknownLockFailure(\"Failed to acquire lock\"))","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Design Guidelines","anchor":"Design-Guidelines","type":"heading"},{"level":3,"text":"Strategy Selection Order","anchor":"Strategy-Selection-Order","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Start with basic control"}]},{"type":"text","text":": Begin with SingleExecution"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Add if priority is needed","type":"text"}]},{"type":"text","text":": Combine PriorityBased"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add if resource control is needed"}]},{"text":": Combine ConcurrencyLimited","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add if coordination control is needed"}]},{"type":"text","text":": Combine GroupCoordination"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add if custom logic is needed"}]},{"type":"text","text":": Combine DynamicCondition"}]}]}],"type":"orderedList"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Strategies","anchor":"Strategies","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"]}],"metadata":{"modules":[{"name":"Lockman"}],"title":"CompositeStrategy","role":"article","roleHeading":"Article"},"sections":[],"variants":[{"paths":["\/documentation\/lockman\/compositestrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"references":{"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy","kind":"article","role":"article","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"title":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"title":"SingleExecutionStrategy","kind":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"type":"topic","title":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}]},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","title":"GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"type":"topic","role":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","title":"Lockman","url":"\/documentation\/lockman","abstract":[{"type":"text","text":"A library to implement exclusive control of user actions in application development using TCA."}],"role":"collection"}}}