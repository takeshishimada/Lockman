{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanReducer","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Base","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Base","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Lock-First-Behavior","type":"heading","level":2,"text":"Lock-First Behavior"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"This reducer implements true lock-first behavior"}],"type":"strong"},{"text":": Lock acquisition feasibility is checked","type":"text"},{"text":" ","type":"text"},{"text":"BEFORE the base reducer executes, preventing state mutations when locks cannot be acquired.","type":"text"},{"text":" ","type":"text"},{"text":"This ensures complete exclusive control over both state changes and effects.","type":"text"}],"type":"paragraph"},{"anchor":"Lock-Execution-Flow--UniqueId-Consistency","type":"heading","level":2,"text":"Lock Execution Flow & UniqueId Consistency"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"LockmanInfo Capture"}]},{"text":": Capture action’s lockmanInfo once to ensure consistent uniqueId","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lock Feasibility Check"}]},{"type":"text","text":": Determine if lock can be acquired using strategy’s "},{"type":"codeVoice","code":"canLock"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Conditional State Mutation","type":"text"}]},{"type":"text","text":": Base reducer executes ONLY if lock acquisition succeeded"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Effect Execution"}],"type":"strong"},{"text":": Run effects with the already-acquired lock using same lockmanInfo","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Guaranteed Unlock","type":"text"}]},{"type":"text","text":": Release lock when effects complete using matching uniqueId"}],"type":"paragraph"}]}]},{"anchor":"When-Lock-Fails","type":"heading","level":2,"text":"When Lock Fails"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"No state mutations occur (true lock-first behavior)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Base reducer is never called","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Lock failure handler is invoked if provided","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Effect returns "},{"code":".none","type":"codeVoice"},{"type":"text","text":" (operation is completely cancelled)"}]}]}]},{"anchor":"Strategy-Resolution","type":"heading","level":2,"text":"Strategy Resolution"},{"inlineContent":[{"type":"text","text":"The reducer uses Effect-based strategy resolution to work around Swift’s existential type"},{"type":"text","text":" "},{"type":"text","text":"limitations, allowing type-safe strategy resolution before reducer execution."}],"type":"paragraph"},{"anchor":"Example","type":"heading","level":2,"text":"Example"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  struct State: Equatable {","    var counter = 0  \/\/ ✅ Only mutated when lock can be acquired","  }","","  enum Action: LockmanSingleExecutionAction {","    case increment","    case decrement","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .increment, .decrement:","        return LockmanSingleExecutionInfo(actionId: \"counter\", mode: .boundary)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .increment:","        state.counter += 1  \/\/ ✅ Executes ONLY after lock feasibility check","        return .run { send in","          \/\/ This effect executes with the acquired lock","          await performSideEffect()","        }","      case .decrement:","        state.counter -= 1  \/\/ ✅ Executes ONLY after lock feasibility check","        return .none","      }","    }","    .lock(boundaryId: CancelID.feature)","  }","}"]}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"title":"LockmanReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanReducer"}],"externalID":"s:7Lockman0A7ReducerV","role":"symbol","roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"Lockman"}],"navigatorTitle":[{"text":"LockmanReducer","kind":"identifier"}]},"kind":"symbol","topicSections":[{"anchor":"Instance-Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/body"],"generated":true,"title":"Instance Properties"},{"anchor":"Type-Aliases","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Action","doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/State"],"generated":true,"title":"Type Aliases"},{"anchor":"Default-Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Reducer-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Reducer-Implementations"],"generated":true,"title":"Default Implementations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer"},"abstract":[{"text":"A reducer wrapper that applies Lockman locking with true lock-first behavior.","type":"text"}],"variants":[{"paths":["\/documentation\/lockman\/lockmanreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Lockman\/22ComposableArchitecture7ReducerP"],"type":"conformsTo","title":"Conforms To"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Lockman/documentation/Lockman/LockmanReducer":{"navigatorTitle":[{"kind":"identifier","text":"LockmanReducer"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanReducer"}],"url":"\/documentation\/lockman\/lockmanreducer","type":"topic","role":"symbol","abstract":[{"text":"A reducer wrapper that applies Lockman locking with true lock-first behavior.","type":"text"}],"kind":"symbol","title":"LockmanReducer","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"},"doc://Lockman/documentation/Lockman/LockmanReducer/Action":{"type":"topic","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}],"navigatorTitle":[{"text":"Action","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Action","title":"LockmanReducer.Action","url":"\/documentation\/lockman\/lockmanreducer\/action","abstract":[]},"doc://Lockman/documentation/Lockman/LockmanReducer/body":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Base"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Base"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"kind":"text","text":">"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/body","title":"body","url":"\/documentation\/lockman\/lockmanreducer\/body","abstract":[]},"doc://Lockman/22ComposableArchitecture7ReducerP":{"title":"ComposableArchitecture.Reducer","type":"unresolvable","identifier":"doc:\/\/Lockman\/22ComposableArchitecture7ReducerP"},"doc://Lockman/documentation/Lockman/LockmanReducer/Reducer-Implementations":{"url":"\/documentation\/lockman\/lockmanreducer\/reducer-implementations","type":"topic","role":"collectionGroup","kind":"article","abstract":[],"title":"Reducer Implementations","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/Reducer-Implementations"},"doc://Lockman/documentation/Lockman/LockmanReducer/State":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"navigatorTitle":[{"kind":"identifier","text":"State"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanReducer\/State","title":"LockmanReducer.State","url":"\/documentation\/lockman\/lockmanreducer\/state","abstract":[]}}}