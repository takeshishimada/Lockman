{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP","text":"LockmanInfo"}]}]},{"kind":"content","content":[{"anchor":"Purpose","text":"Purpose","level":2,"type":"heading"},{"inlineContent":[{"code":"AnyLockmanStrategy","type":"codeVoice"},{"type":"text","text":" solves the fundamental problem of storing different concrete"},{"type":"text","text":" "},{"type":"text","text":"strategy implementations in the same collection. Without type erasure, you cannot"},{"type":"text","text":" "},{"type":"text","text":"store "},{"code":"LockmanSingleExecutionStrategy","type":"codeVoice"},{"type":"text","text":" and "},{"code":"LockmanPriorityBasedStrategy","type":"codeVoice"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"same array, even though they both conform to "},{"code":"LockmanStrategy","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Key-Benefits","text":"Key Benefits","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Heterogeneous Collections","type":"text"}],"type":"strong"},{"text":": Store different strategy implementations together","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}],"type":"strong"},{"text":": Choose strategies dynamically based on conditions","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"API Boundaries"}],"type":"strong"},{"type":"text","text":": Hide concrete strategy types from public interfaces"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Dependency Injection","type":"text"}],"type":"strong"},{"type":"text","text":": Enable flexible strategy registration and resolution"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Universal Compatibility"}]},{"text":": Support both class and struct strategy implementations","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Type-Safety-Guarantees","text":"Type Safety Guarantees","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"While the concrete strategy type is erased, type safety for lock information "},{"code":"I","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is preserved at the "},{"code":"AnyLockmanStrategy","type":"codeVoice"},{"type":"text","text":" level. This means you cannot accidentally"},{"type":"text","text":" "},{"type":"text","text":"use "},{"code":"LockmanSingleExecutionInfo","type":"codeVoice"},{"type":"text","text":" with a priority-based strategy wrapper."}],"type":"paragraph"},{"anchor":"Performance-Considerations","text":"Performance Considerations","level":2,"type":"heading"},{"inlineContent":[{"text":"Type erasure introduces a small runtime overhead due to function pointer indirection.","type":"text"},{"text":" ","type":"text"},{"text":"However, this cost is typically negligible compared to the actual locking operations","type":"text"},{"text":" ","type":"text"},{"text":"and is justified by the flexibility gained.","type":"text"}],"type":"paragraph"}]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"],"title":"Conforms To"}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"roleHeading":"Structure","modules":[{"name":"Lockman"}],"symbolKind":"struct","title":"AnyLockmanStrategy","role":"symbol","externalID":"s:7Lockman03AnyA8StrategyV","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}]},"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"generated":true,"anchor":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"],"title":"Initializers"},{"generated":true,"anchor":"Instance-Properties","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"],"title":"Instance Properties"},{"generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(boundaryId:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(boundaryId:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(boundaryId:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(boundaryId:info:)"],"title":"Instance Methods"},{"generated":true,"anchor":"Type-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"],"title":"Type Methods"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(boundaryId:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(boundaryId:)","abstract":[{"text":"Removes all lock information for the specified boundary identifier.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"boundaryId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"title":"cleanUp(boundaryId:)","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(boundaryid:)","role":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"()"}],"title":"cleanUp()","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","abstract":[{"text":"Removes all lock information across all boundaries.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"type":"topic","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","abstract":[{"text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"getCurrentLocks","kind":"identifier"},{"text":"() -> [","kind":"text"},{"text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier"},{"text":" : [any ","kind":"text"},{"text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP","kind":"typeIdentifier"},{"text":"]]","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","type":"topic","title":"getCurrentLocks()","kind":"symbol","abstract":[{"type":"text","text":"Returns current lock information for debugging."}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(boundaryId:info:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"boundaryId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(boundaryId:info:)","type":"topic","title":"lock(boundaryId:info:)","kind":"symbol","abstract":[{"text":"Attempts to acquire a lock for the given boundary and information.","type":"text"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/lock(boundaryid:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"url":"\/documentation\/lockman\/anylockmanstrategy","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","title":"AnyLockmanStrategy","kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanInfo":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","abstract":[{"text":"Represents information required by Lockman locking strategies.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"url":"\/documentation\/lockman\/lockmaninfo","title":"LockmanInfo"},"doc://Lockman/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(boundaryId:info:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"canLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"boundaryId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LockmanResult","preciseIdentifier":"s:7Lockman0A6ResultO"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(boundaryId:info:)","type":"topic","title":"canLock(boundaryId:info:)","kind":"symbol","abstract":[{"text":"Checks if a lock can be acquired for the given boundary and information.","type":"text"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(boundaryid:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(boundaryId:info:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"boundaryId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(boundaryId:info:)","type":"topic","title":"unlock(boundaryId:info:)","kind":"symbol","abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(boundaryid:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"strategyId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LockmanStrategyId","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId","type":"topic","title":"strategyId","kind":"symbol","abstract":[{"text":"The identifier for this type-erased strategy.","type":"text"}],"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeStrategyId","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"LockmanStrategyId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","abstract":[{"text":"Creates a generic strategy identifier for type-erased strategies.","type":"text"}],"kind":"symbol","role":"symbol","title":"makeStrategyId()"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"kind":"symbol","abstract":[{"type":"text","text":"A protocol defining the core locking operations that all strategies must implement."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"url":"\/documentation\/lockman\/lockmanstrategy","type":"topic","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","title":"LockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}]}}}