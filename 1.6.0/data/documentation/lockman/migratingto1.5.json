{"abstract":[{"text":"Update your code from Lockman 1.4 to take advantage of Lockman 1.5â€™s unified dynamic condition evaluation API.","type":"text"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Lockman 1.5 introduces a major architectural improvement with the unified "},{"type":"codeVoice","code":"LockmanDynamicConditionReducer"},{"type":"text","text":" API. This change simplifies dynamic condition evaluation by eliminating the complex strategy-based approach in favor of a clean, two-level processing system."}],"type":"paragraph"},{"inlineContent":[{"text":"The key changes include:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Unified API","type":"text"}]},{"type":"text","text":": Replace complex "},{"code":"LockmanDynamicConditionStrategy","type":"codeVoice"},{"type":"text","text":" with simplified "},{"code":"LockmanDynamicConditionReducer","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Two-level processing"}]},{"text":": Independent reducer-level and action-level condition evaluation","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Simplified architecture","type":"text"}]},{"type":"text","text":": Direct condition evaluation + cancellable effect control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Removed macros"}],"type":"strong"},{"text":": No more ","type":"text"},{"code":"@LockmanDynamicCondition","type":"codeVoice"},{"text":" macro needed","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Updating-dependencies","level":2,"text":"Updating dependencies","type":"heading"},{"inlineContent":[{"type":"text","text":"To upgrade to Lockman 1.5, update your "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" file:"}],"type":"paragraph"},{"code":["dependencies: [","  .package(","    url: \"https:\/\/github.com\/takeshishimada\/Lockman\",","    from: \"1.5.0\"","  )","]"],"syntax":"swift","type":"codeListing"},{"anchor":"Breaking-changes","level":2,"text":"Breaking changes","type":"heading"},{"anchor":"LockmanDynamicConditionStrategy-removed","level":3,"text":"`LockmanDynamicConditionStrategy` removed","type":"heading"},{"inlineContent":[{"type":"text","text":"The entire strategy-based approach has been removed and replaced with a unified reducer-based API."}],"type":"paragraph"},{"inlineContent":[{"text":"ðŸš« ","type":"text"},{"type":"strong","inlineContent":[{"text":"Removed in 1.5:","type":"text"}]}],"type":"paragraph"},{"code":["\/\/ These are no longer available","LockmanDynamicConditionStrategy","LockmanDynamicConditionInfo","LockmanDynamicConditionAction","@LockmanDynamicCondition macro"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"âœ… ","type":"text"},{"inlineContent":[{"text":"New in 1.5:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"code":["\/\/ Unified condition evaluation","LockmanDynamicConditionReducer","Reducer.lock(condition:boundaryId:lockFailure:)","reducer.lock(state:action:operation:boundaryId:lockCondition:)"],"syntax":"swift","type":"codeListing"},{"anchor":"Macro-based-action-definition-removed","level":3,"text":"Macro-based action definition removed","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@LockmanDynamicCondition"},{"text":" macro is no longer available.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ðŸš« "},{"type":"strong","inlineContent":[{"text":"Before (1.4):","type":"text"}]}],"type":"paragraph"},{"code":["@LockmanDynamicCondition","enum Action {","  case transfer(amount: Double)","  case withdraw(amount: Double)","  ","  var lockmanInfo: LockmanDynamicConditionInfo {","    switch self {","    case .transfer(let amount):","      return LockmanDynamicConditionInfo(","        actionId: actionName,","        condition: { \/* condition logic *\/ }","      )","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"âœ… "},{"type":"strong","inlineContent":[{"text":"After (1.5):","type":"text"}]}],"type":"paragraph"},{"code":["\/\/ No macro needed - use regular enum","enum Action {","  case transfer(amount: Double)","  case withdraw(amount: Double)","}","","\/\/ Apply conditions directly in reducer",".lock(","  condition: { state, action in","    switch action {","    case .transfer(let amount):","      \/\/ Your condition logic here","      return state.balance >= amount ? .success : .cancel(InsufficientFundsError())","    default:","      return .success","    }","  },","  boundaryId: CancelID.financial",")"],"syntax":"swift","type":"codeListing"},{"anchor":"Migration-guide","level":2,"text":"Migration guide","type":"heading"},{"anchor":"Step-1-Remove-macro-usage","level":3,"text":"Step 1: Remove macro usage","type":"heading"},{"inlineContent":[{"text":"Remove ","type":"text"},{"code":"@LockmanDynamicCondition","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" implementations:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ðŸš« "},{"inlineContent":[{"type":"text","text":"Before:"}],"type":"strong"}],"type":"paragraph"},{"code":["@LockmanDynamicCondition","enum ViewAction {","  case makePayment(amount: Double)","  ","  var lockmanInfo: LockmanDynamicConditionInfo {","    switch self {","    case .makePayment(let amount):","      return LockmanDynamicConditionInfo(","        actionId: actionName,","        condition: {","          \/\/ Condition logic was isolated here","          return .success","        }","      )","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"âœ… "},{"type":"strong","inlineContent":[{"type":"text","text":"After:"}]}],"type":"paragraph"},{"code":["\/\/ Simple enum - no macro needed","enum ViewAction {","  case makePayment(amount: Double)","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Step-2-Choose-your-condition-evaluation-level","level":3,"text":"Step 2: Choose your condition evaluation level","type":"heading"},{"anchor":"Option-A-Reducer-level-conditions-Recommended-for-global-constraints","level":4,"text":"Option A: Reducer-level conditions (Recommended for global constraints)","type":"heading"},{"inlineContent":[{"text":"For conditions that apply to multiple actions or need to be checked automatically:","type":"text"}],"type":"paragraph"},{"code":["var body: some ReducerOf<Self> {","  Reduce { state, action in","    \/\/ Your reducer logic","    switch action {","    case .makePayment(let amount):","      state.balance -= amount","      return .run { send in","        await send(.paymentCompleted)","      }","    default:","      return .none","    }","  }","  .lock(","    condition: { state, action in","      \/\/ Automatic condition evaluation for all actions","      switch action {","      case .makePayment(let amount):","        guard state.isAuthenticated else {","          return .cancel(AuthError.notAuthenticated)","        }","        guard state.balance >= amount else {","          return .cancel(PaymentError.insufficientFunds)","        }","        return .success","      default:","        return .success","      }","    },","    boundaryId: CancelID.payment,","    lockFailure: { error, send in","      await send(.showError(error.localizedDescription))","    }","  )","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Option-B-Action-level-conditions-For-specific-operations","level":4,"text":"Option B: Action-level conditions (For specific operations)","type":"heading"},{"inlineContent":[{"type":"text","text":"For conditions that apply to specific operations only:"}],"type":"paragraph"},{"code":["let reducer = LockmanDynamicConditionReducer<State, Action>(","  { state, action in","    \/\/ Base reducer logic","    switch action {","    case .makePayment(let amount):","      return .run { send in","        await processPayment(amount)","        await send(.paymentCompleted)","      }","    default:","      return .none","    }","  },","  condition: { _, _ in .success },  \/\/ Allow all at reducer level","  boundaryId: CancelID.operations",")","","\/\/ Use action-level lock for specific conditions","func handlePayment(amount: Double, state: State) -> Effect<Action> {","  return reducer.lock(","    state: state,","    action: .makePayment(amount),","    operation: { send in","      await processPayment(amount)","      await send(.paymentCompleted)","    },","    lockFailure: { error, send in","      await send(.showError(error.localizedDescription))","    },","    boundaryId: CancelID.payment,","    lockCondition: { state, _ in","      \/\/ Specific condition for this operation","      guard state.balance >= amount else {","        return .cancel(PaymentError.insufficientFunds)","      }","      return .success","    }","  )","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Step-3-Update-strategy-registration","level":3,"text":"Step 3: Update strategy registration","type":"heading"},{"inlineContent":[{"type":"text","text":"Remove "},{"code":"LockmanDynamicConditionStrategy","type":"codeVoice"},{"type":"text","text":" registration:"}],"type":"paragraph"},{"inlineContent":[{"text":"ðŸš« ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Before:"}]}],"type":"paragraph"},{"code":["try LockmanManager.container.register(LockmanDynamicConditionStrategy.shared)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"âœ… "},{"type":"strong","inlineContent":[{"type":"text","text":"After:"}]}],"type":"paragraph"},{"code":["\/\/ No registration needed - conditions are evaluated directly in reducers"],"syntax":"swift","type":"codeListing"},{"anchor":"Step-4-Update-error-handling","level":3,"text":"Step 4: Update error handling","type":"heading"},{"inlineContent":[{"type":"text","text":"Error handling is now done through the "},{"type":"codeVoice","code":"lockFailure"},{"type":"text","text":" parameter:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ðŸš« "},{"type":"strong","inlineContent":[{"type":"text","text":"Before:"}]}],"type":"paragraph"},{"code":["\/\/ Error handling was done in strategy","condition: {","  guard someCondition else {","    \/\/ Error handling was complex","    return .cancel(error)","  }","  return .success","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"âœ… ","type":"text"},{"inlineContent":[{"text":"After:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"code":[".lock(","  condition: { state, action in","    guard someCondition else {","      return .cancel(MyError.conditionFailed)","    }","    return .success","  },","  boundaryId: CancelID.operations,","  lockFailure: { error, send in","    \/\/ Clean error handling","    await send(.showError(error.localizedDescription))","  }",")"],"syntax":"swift","type":"codeListing"},{"anchor":"Complete-migration-example","level":2,"text":"Complete migration example","type":"heading"},{"inlineContent":[{"type":"text","text":"Hereâ€™s a complete before\/after example:"}],"type":"paragraph"},{"anchor":"Before-14","level":3,"text":"Before (1.4)","type":"heading"},{"code":["@Reducer","struct PaymentFeature {","  @ObservableState","  struct State {","    var balance: Double = 1000","    var isAuthenticated: Bool = true","  }","  ","  @LockmanDynamicCondition","  enum Action {","    case makePayment(amount: Double)","    case paymentCompleted","    ","    var lockmanInfo: LockmanDynamicConditionInfo {","      switch self {","      case .makePayment(let amount):","        return LockmanDynamicConditionInfo(","          actionId: actionName,","          condition: {","            \/\/ Isolated condition logic","            return .success","          }","        )","      default:","        return LockmanDynamicConditionInfo(actionId: actionName)","      }","    }","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .makePayment(let amount):","        \/\/ Manual condition checking","        guard state.isAuthenticated else {","          return .none","        }","        guard state.balance >= amount else {","          return .none","        }","        ","        state.balance -= amount","        return .run { send in","          await send(.paymentCompleted)","        }","      case .paymentCompleted:","        return .none","      }","    }","    .lock(boundaryId: CancelID.payment, for: \\.self)","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"After-15","level":3,"text":"After (1.5)","type":"heading"},{"code":["@Reducer","struct PaymentFeature {","  @ObservableState","  struct State {","    var balance: Double = 1000","    var isAuthenticated: Bool = true","  }","  ","  enum Action {","    case makePayment(amount: Double)","    case paymentCompleted","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .makePayment(let amount):","        state.balance -= amount","        return .run { send in","          await send(.paymentCompleted)","        }","      case .paymentCompleted:","        return .none","      }","    }","    .lock(","      condition: { state, action in","        switch action {","        case .makePayment(let amount):","          guard state.isAuthenticated else {","            return .cancel(AuthError.notAuthenticated)","          }","          guard state.balance >= amount else {","            return .cancel(PaymentError.insufficientFunds)","          }","          return .success","        default:","          return .success","        }","      },","      boundaryId: CancelID.payment,","      lockFailure: { error, send in","        await send(.showError(error.localizedDescription))","      }","    )","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Benefits-of-upgrading","level":2,"text":"Benefits of upgrading","type":"heading"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Simplified architecture"}],"type":"strong"},{"type":"text","text":": No more complex strategy registration and macro usage"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Better separation of concerns"}]},{"type":"text","text":": Clear distinction between reducer-level and action-level conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Improved readability","type":"text"}],"type":"strong"},{"text":": Condition logic is co-located with reducer logic","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Enhanced flexibility"}],"type":"strong"},{"type":"text","text":": Mix reducer-level and action-level conditions as needed"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Better testability"}],"type":"strong"},{"text":": Easier to test condition logic directly in reducers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Reduced boilerplate"}]},{"type":"text","text":": No macro setup or protocol conformance required"}]}]}],"type":"orderedList"},{"anchor":"Common-migration-patterns","level":2,"text":"Common migration patterns","type":"heading"},{"anchor":"Pattern-1-Authentication-+-Operation-specific-checks","level":3,"text":"Pattern 1: Authentication + Operation-specific checks","type":"heading"},{"code":["\/\/ Reducer-level: Authentication","\/\/ Action-level: Operation-specific validation",".lock(","  condition: { state, action in","    switch action {","    case .makePayment, .withdraw, .transfer:","      return state.isAuthenticated ? .success : .cancel(AuthError.notAuthenticated)","    default:","      return .success","    }","  },","  boundaryId: CancelID.auth",")","","\/\/ Then use action-level locks for specific checks","reducer.lock(","  \/\/ ... operation-specific condition","  lockCondition: { state, action in","    \/\/ Specific validation","  }",")"],"syntax":"swift","type":"codeListing"},{"anchor":"Pattern-2-Time-based-+-Amount-based-validation","level":3,"text":"Pattern 2: Time-based + Amount-based validation","type":"heading"},{"code":[".lock(","  condition: { state, action in","    switch action {","    case .makeTransaction:","      \/\/ Time-based check","      let currentHour = Calendar.current.component(.hour, from: Date())","      guard (9...17).contains(currentHour) else {","        return .cancel(BusinessError.outsideBusinessHours)","      }","      ","      \/\/ Amount-based check","      if case .makeTransaction(let amount) = action {","        guard amount <= state.dailyLimit else {","          return .cancel(BusinessError.dailyLimitExceeded)","        }","      }","      ","      return .success","    default:","      return .success","    }","  },","  boundaryId: CancelID.businessRules",")"],"syntax":"swift","type":"codeListing"},{"anchor":"Summary","level":2,"text":"Summary","type":"heading"},{"inlineContent":[{"type":"text","text":"Lockman 1.5 represents a major architectural improvement that simplifies dynamic condition evaluation while maintaining all the flexibility of the previous approach. The new unified API provides better separation of concerns, improved testability, and reduced boilerplate code."}],"type":"paragraph"},{"inlineContent":[{"text":"The migration requires updating your condition logic from strategy-based to reducer-based, but the result is a cleaner, more maintainable codebase with the same powerful exclusive control capabilities.","type":"text"}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/MigratingTo1.5"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/lockman\/migratingto1.5"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","title":"Migrating to 1.5","modules":[{"name":"Lockman"}],"role":"article"},"references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"}}}