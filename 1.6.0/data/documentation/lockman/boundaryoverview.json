{"abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","seeAlsoSections":[{"anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials","generated":true}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Boundary","role":"article","modules":[{"name":"Lockman"}],"roleHeading":"Article"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/boundaryoverview"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A Boundary is the "},{"type":"strong","inlineContent":[{"type":"text","text":"exclusive control boundary"}]},{"type":"text","text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using CancelID as a boundary provides the following benefits:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Natural integration with TCA","type":"text"}]},{"type":"text","text":" - Leverages existing TCA mechanisms"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Clear boundary definition"}]},{"type":"text","text":" - CancelID clearly defines the scope of exclusive control"}]}]}],"type":"orderedList"},{"text":"Boundary Specifications","anchor":"Boundary-Specifications","level":2,"type":"heading"},{"text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries","level":3,"type":"heading"},{"inlineContent":[{"text":"Exclusive control between different Boundaries is not possible:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Since these are treated as separate boundaries, load can be executed even while save is running.","type":"text"}],"type":"paragraph"},{"text":"2. Only one Boundary per reducer","anchor":"2-Only-one-Boundary-per-reducer","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"You cannot specify multiple Boundaries for a single reducer:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"],"type":"codeListing"},{"text":"Summary","anchor":"Summary","level":2,"type":"heading"},{"inlineContent":[{"text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://Lockman/documentation/Lockman/Configuration":{"role":"article","url":"\/documentation\/lockman\/configuration","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","type":"topic","kind":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}]},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","url":"\/documentation\/lockman\/unlock","title":"Unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","kind":"article","type":"topic","abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}]},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"role":"article","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}]},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"role":"article","url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","type":"topic","kind":"article","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}]},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","role":"article","kind":"article","url":"\/documentation\/lockman\/gettingstarted","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","kind":"article","url":"\/documentation\/lockman\/errorhandling","role":"article","title":"Error Handling"},"doc://Lockman/documentation/Lockman/Lock":{"role":"article","url":"\/documentation\/lockman\/lock","title":"Lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","kind":"article","type":"topic","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}]}}}