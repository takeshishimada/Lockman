{"sections":[],"seeAlsoSections":[{"generated":true,"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Article","title":"SingleExecutionStrategy","modules":[{"name":"Lockman"}],"role":"article"},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same operation from being executed redundantly, maintaining data consistency and application stability.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user actions and duplicate execution of automatic operations."}]},{"type":"heading","level":2,"text":"Execution Modes","anchor":"Execution-Modes"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}]},{"type":"heading","level":3,"text":"none - No Control","anchor":"none-No-Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Executes all operations without exclusive control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Used when temporarily disabling lock functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"boundary - Boundary-level Exclusive Control","anchor":"boundary-Boundary-level-Exclusive-Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only one process can execute within the same boundary"}]}]},{"content":[{"inlineContent":[{"text":"Exclusive control at screen or component level","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied when wanting to control entire UI operations","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"action - Action-level Exclusive Control","anchor":"action-Action-level-Exclusive-Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Prevents only duplicate execution of the same action"}]}]},{"content":[{"inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied when wanting to control only specific operations","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"text":"Usage","anchor":"Usage"},{"type":"heading","level":3,"text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"]},{"type":"heading","level":3,"text":"Usage with Reducer.lock()","anchor":"Usage-with-Reducerlock"},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            } catch: { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionError {","                await send(.showBusyMessage(\"\\(singleError.lockmanInfo.actionId) is currently running\"))","            }","        }","    )","}"]},{"type":"heading","level":3,"text":"Advanced Usage with Effect.lock","anchor":"Advanced-Usage-with-Effectlock"},{"type":"paragraph","inlineContent":[{"text":"For cases requiring fine-grained control:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .saveButtonTapped:","    return .run { send in","        try await saveUserData()","        await send(.saveCompleted)","    } catch: { error, send in","        await send(.saveError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        }","    )"]},{"type":"heading","level":2,"text":"Operation Examples","anchor":"Operation-Examples"},{"type":"heading","level":3,"text":"action mode","anchor":"action-mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"]},{"type":"heading","level":3,"text":"boundary mode","anchor":"boundary-mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"]},{"type":"heading","level":2,"text":"Error Handling","anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"isActive":true,"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling"},{"type":"text","text":" page."}]},{"type":"heading","level":3,"text":"LockmanSingleExecutionError","anchor":"LockmanSingleExecutionError"},{"type":"paragraph","inlineContent":[{"text":"This error conforms to ","type":"text"},{"code":"LockmanStrategyError","type":"codeVoice"},{"text":" protocol and provides:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":": Information about the action that couldn‚Äôt acquire the lock"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": Where the lock failure occurred"}]}]},{"content":[{"inlineContent":[{"code":"errorDescription","type":"codeVoice"},{"text":": Human-readable error description","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"failureReason","type":"codeVoice"},{"text":": Specific reason for the failure","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Error cases:"}]}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}]},{"type":"text","text":" - Boundary is already locked by another action"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"actionAlreadyRunning","type":"text"}],"type":"strong"},{"text":" - Same action ID is already running","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionError {","        switch singleError {","        case .boundaryAlreadyLocked(_, let lockmanInfo):","            await send(.showBusyMessage(\"Another process is running: \\(lockmanInfo.actionId)\"))","        case .actionAlreadyRunning(_, let lockmanInfo):","            await send(.showBusyMessage(\"\\(lockmanInfo.actionId) is running\"))","        }","    } else {","        await send(.showBusyMessage(\"Cannot start operation\"))","    }","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"kind":"article","references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","title":"Dynamic Condition Evaluation","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","role":"article","title":"ConcurrencyLimitedStrategy","type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"type":"topic","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","role":"article","url":"\/documentation\/lockman\/prioritybasedstrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"title":"CompositeStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","title":"GroupCoordinationStrategy","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","kind":"article","url":"\/documentation\/lockman\/errorhandling","role":"article","title":"Error Handling"}}}