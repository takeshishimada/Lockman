{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","interfaceLanguage":"swift"},"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling.","type":"text"}],"type":"paragraph"},{"anchor":"Common-Error-Handling-Patterns","type":"heading","text":"Common Error Handling Patterns","level":2},{"anchor":"lockFailure-Handler-with-Reducerlock","type":"heading","text":"lockFailure Handler with Reducer.lock()","level":3},{"inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}],"type":"paragraph"},{"type":"codeListing","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"],"syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Benefits of centralized error handling:"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Consistent error handling across all actions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Single place to update error messages","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Easier to maintain and test"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Parameters:"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"error","type":"codeVoice"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"send"},{"type":"text","text":": Function for sending feedback to the user"}],"type":"paragraph"}]}]},{"anchor":"catch-handler-Pattern","type":"heading","text":"catch handler Pattern","level":3},{"inlineContent":[{"text":"Handling general errors that occur during processing:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}],"type":"paragraph"},{"anchor":"Types-of-Errors-and-Solutions","type":"heading","text":"Types of Errors and Solutions","level":2},{"anchor":"1-Lock-Acquisition-Failure-Already-Locked","type":"heading","text":"1. Lock Acquisition Failure (Already Locked)","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": Occurs when the same operation or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Notify user that operation is in progress","    await send(.showMessage(\"Operation is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"],"syntax":"swift"},{"anchor":"2-PermissionPriority-Conflicts","type":"heading","text":"2. Permission\/Priority Conflicts","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": Occurs due to higher priority operations or group rule constraints"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"syntax":"swift"},{"anchor":"3-Cancellation-Notification","type":"heading","text":"3. Cancellation Notification","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"text":": When existing operations are cancelled by higher priority operations","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Common solutions"}]},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"],"syntax":"swift"},{"anchor":"Best-Practices","type":"heading","text":"Best Practices","level":2},{"anchor":"1-Proper-Error-Type-Casting","type":"heading","text":"1. Proper Error Type Casting","level":3},{"type":"codeListing","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"syntax":"swift"},{"anchor":"2-User-Friendly-Messages","type":"heading","text":"2. User-Friendly Messages","level":3},{"type":"codeListing","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"],"syntax":"swift"},{"anchor":"3-Utilizing-Additional-Information","type":"heading","text":"3. Utilizing Additional Information","level":3},{"inlineContent":[{"text":"Many errors contain additional information:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start operation\"))","        }","    }",")"],"syntax":"swift"},{"anchor":"Strategy-Specific-Errors","type":"heading","text":"Strategy-Specific Errors","level":2},{"inlineContent":[{"text":"All strategy errors now conform to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol, providing consistent access to:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"errorDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Localized error descriptions"}]}]}]},{"anchor":"Error-Types-by-Strategy","type":"heading","text":"Error Types by Strategy:","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SingleExecutionStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"PriorityBasedStrategy"}],"type":"strong"},{"text":":","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedBlockedError"},{"type":"text","text":" - New action blocked by priority"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedCancellationError"},{"text":" - Existing action cancelled by preemption","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"},{"type":"text","text":" - Group rule violations"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy"}],"type":"strong"},{"text":": ","type":"text"},{"type":"codeVoice","code":"LockmanConcurrencyLimitedCancellationError"},{"text":" - Concurrent execution limit exceeded","type":"text"}]}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","isActive":true,"overridingTitle":"DynamicConditionStrategy"},{"text":" - Condition mismatch errors","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}],"overridingTitle":"CompositeStrategy"},{"type":"text","text":" - Composite strategy errors"}],"type":"paragraph"}]}]}]}],"variants":[{"paths":["\/documentation\/lockman\/errorhandling"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","title":"Error Handling","modules":[{"name":"Lockman"}],"role":"article"},"sections":[],"kind":"article","seeAlsoSections":[{"generated":true,"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Lockman/documentation/Lockman/DebuggingGuide":{"role":"article","url":"\/documentation\/lockman\/debuggingguide","title":"Debugging Guide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}]},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"role":"article","url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","type":"topic","kind":"article","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}]},"doc://Lockman/documentation/Lockman/Lock":{"role":"article","url":"\/documentation\/lockman\/lock","title":"Lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","kind":"article","type":"topic","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","title":"Dynamic Condition Evaluation","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","role":"article","kind":"article","url":"\/documentation\/lockman\/gettingstarted","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","url":"\/documentation\/lockman\/boundaryoverview","title":"Boundary","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","type":"topic","kind":"article","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}]},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"},"doc://Lockman/documentation/Lockman/Configuration":{"role":"article","url":"\/documentation\/lockman\/configuration","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","type":"topic","kind":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}]},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","url":"\/documentation\/lockman\/unlock","title":"Unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","kind":"article","type":"topic","abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}]},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"title":"CompositeStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","url":"\/documentation\/lockman\/compositestrategy"}}}