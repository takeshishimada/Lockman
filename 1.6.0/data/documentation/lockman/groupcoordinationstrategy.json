{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","metadata":{"title":"GroupCoordinationStrategy","modules":[{"name":"Lockman"}],"role":"article","roleHeading":"Article"},"sections":[],"seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"GroupCoordinationStrategy is a strategy that coordinates related operations as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}]},{"anchor":"Group-System","type":"heading","text":"Group System","level":2},{"anchor":"Coordination-Roles","type":"heading","text":"Coordination Roles","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Group coordination uses roles to define how actions participate in group operations:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"none","type":"text"}],"type":"strong"},{"text":" - Non-exclusive Participant","type":"text"}]},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate regardless of group state"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Auxiliary operations such as UI updates or logging","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"leader"}],"type":"strong"},{"type":"text","text":" - Group Leader"}]},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Role to start group activities"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables member participation"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"type":"text","text":" - Group Member"}]},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate in active groups"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Executes when leader or other participants are present","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responsible for coordinated operations"}]}]}],"type":"unorderedList"},{"anchor":"Leader-Entry-Policy","type":"heading","text":"Leader Entry Policy","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"emptyGroup"}],"type":"strong"},{"text":" - Start only in empty group","type":"text"}]},{"code":[".leader(.emptyGroup)"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can only participate when group is completely empty","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Starts new activity cycle","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Most strict control"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"withoutMembers"}],"type":"strong"},{"text":" - Start without members","type":"text"}]},{"code":[".leader(.withoutMembers)"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can participate when no members are present"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Other leaders are allowed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables coordination between leaders"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutLeader"}]},{"text":" - Start without leader","type":"text"}]},{"code":[".leader(.withoutLeader)"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no other leaders are present"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Members are allowed"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Usage","type":"heading","text":"Usage","level":2},{"anchor":"Basic-Usage-Example","type":"heading","text":"Basic Usage Example","level":3},{"code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Coordination-with-Multiple-Groups","type":"heading","text":"Coordination with Multiple Groups","level":3},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"anchor":"Operation-Examples","type":"heading","text":"Operation Examples","level":2},{"anchor":"Leader-Member-Coordination","type":"heading","text":"Leader-Member Coordination","level":3},{"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing","syntax":null},{"anchor":"Entry-Policy-Differences","type":"heading","text":"Entry Policy Differences","level":3},{"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing","syntax":null},{"anchor":"Error-Handling","type":"heading","text":"Error Handling","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"overridingTitle":"Error Handling","isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"type":"text","text":" page."}]},{"anchor":"LockmanGroupCoordinationCancellationError","type":"heading","text":"LockmanGroupCoordinationCancellationError","level":3},{"type":"paragraph","inlineContent":[{"text":"This error conforms to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol and provides:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":": Where the cancellation occurred"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"reason"},{"type":"text","text":": Specific reason for cancellation"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"actionAlreadyInGroup","type":"text"}],"type":"strong"},{"type":"text","text":" - Action already in group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"leaderCannotJoinNonEmptyGroup","type":"text"}]},{"type":"text","text":" - Leader cannot join non-empty group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other operations are running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}]},{"type":"text","text":" - Member cannot join empty group"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"blockedByExclusiveLeader"}],"type":"strong"},{"type":"text","text":" - Blocked by exclusive leader"}]},{"code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader operation: \\(leaderInfo.actionId)\"))","    }","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","role":"article","title":"SingleExecutionStrategy","type":"topic","url":"\/documentation\/lockman\/singleexecutionstrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"type":"text","text":"Control actions based on runtime conditions with unified condition evaluation."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","title":"Dynamic Condition Evaluation","type":"topic","url":"\/documentation\/lockman\/dynamicconditionstrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"url":"\/documentation\/lockman","role":"collection","title":"Lockman"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","role":"article","title":"ConcurrencyLimitedStrategy","type":"topic","url":"\/documentation\/lockman\/concurrencylimitedstrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"type":"topic","title":"PriorityBasedStrategy","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","role":"article","url":"\/documentation\/lockman\/prioritybasedstrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"title":"CompositeStrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"kind":"article","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","kind":"article","url":"\/documentation\/lockman\/errorhandling","role":"article","title":"Error Handling"}}}