{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/MigratingTo1.2","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"Update your code from Lockman 1.1 to take advantage of Lockman 1.2‚Äôs automatic cancellation ID management and enhanced safety features."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Lockman 1.2 introduces a major developer experience improvement by automatically handling cancellation IDs for all Effect.lock operations. This eliminates the need to manually specify ","type":"text"},{"code":".cancellable(id: boundaryId)","type":"codeVoice"},{"text":" when using ","type":"text"},{"code":".run()","type":"codeVoice"},{"text":" methods with Lockman‚Äôs lock functionality, resulting in cleaner, more maintainable code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key improvements include:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Automatic cancellation ID management for all Effect.lock methods","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"‚ÄúGuaranteed Resource Cleanup‚Äù design principle implementation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enhanced safety with improved cancellation scope control","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Comprehensive documentation with before\/after examples","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Updating-dependencies","text":"Updating dependencies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To upgrade to Lockman 1.2, update your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}]},{"code":["dependencies: [","  .package(","    url: \"https:\/\/github.com\/takeshishimada\/Lockman\",","    from: \"1.2.0\"","  )","]"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"anchor":"Non-breaking-changes","text":"Non-breaking changes"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Important:"}]},{"type":"text","text":" Lockman 1.2 is "},{"type":"strong","inlineContent":[{"type":"text","text":"100% backward compatible"}]},{"type":"text","text":". All existing code will continue to work without any modifications. However, you can now simplify your code significantly by removing manual cancellation ID specifications."}]},{"type":"heading","level":2,"anchor":"Major-improvements","text":"Major improvements"},{"type":"heading","level":3,"anchor":"Automatic-cancellation-ID-management","text":"Automatic cancellation ID management"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All Effect.lock methods now automatically apply "},{"code":".cancellable(id: boundaryId)","type":"codeVoice"},{"type":"text","text":" to operations, eliminating the need for manual specification."}]},{"type":"heading","level":3,"anchor":"Enhanced-cancellation-scope-control","text":"Enhanced cancellation scope control"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‚ÄúGuaranteed Resource Cleanup‚Äù principle ensures that:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Operations are cancellable","type":"text"}],"type":"strong"},{"text":": Business logic can be cancelled using the boundaryId","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Resource cleanup is guaranteed"}]},{"type":"text","text":": Lock release always executes regardless of cancellation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Deadlock prevention"}]},{"type":"text","text":": Fixed potential deadlock scenarios in concatenated operations"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Migration-opportunities","text":"Migration opportunities"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While no changes are required, you can simplify your existing code to take advantage of the new automatic cancellation features."}]},{"type":"heading","level":3,"anchor":"Method-chain-style-lock","text":"Method chain style (.lock)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"üü° Before (1.1 - still works):"}]},{"code":["return .run { send in","  await performAsyncWork()","  await send(.completed)","}",".cancellable(id: boundaryId)  \/\/ Manual specification",".lock(action: action, boundaryId: boundaryId)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"‚úÖ After (1.2 - simplified):","type":"text"}]},{"code":["return .run { send in","  await performAsyncWork()","  await send(.completed)","}",".lock(action: action, boundaryId: boundaryId)  \/\/ Automatic application!"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Static-method-style-withLock","text":"Static method style (.withLock)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"üü° Before (1.1 - still works):"}]},{"code":["return .withLock(","  operation: { send in","    try await Task.sleep(nanoseconds: 100_000_000)","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")","\/\/ Additional .cancellable(id:) was not needed here in 1.1"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚úÖ After (1.2 - enhanced safety):"}]},{"code":["return .withLock(","  operation: { send in","    try await Task.sleep(nanoseconds: 100_000_000)","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")","\/\/ Now with enhanced \"Guaranteed Resource Cleanup\" safety"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Concatenated-operations","text":"Concatenated operations"},{"type":"paragraph","inlineContent":[{"text":"üü° Before (1.1 - potential deadlock risk):","type":"text"}]},{"code":["return .withLock(","  concatenating: [","    .run { send in await send(.stepOne) },","    .run { send in await send(.stepTwo) },","    .run { send in await send(.stepThree) }","  ],","  action: action,","  boundaryId: CancelID.operation",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"‚úÖ After (1.2 - deadlock prevention):","type":"text"}]},{"code":["return .withLock(","  concatenating: [","    .run { send in await send(.stepOne) },","    .run { send in await send(.stepTwo) },","    .run { send in await send(.stepThree) }","  ],","  action: action,","  boundaryId: CancelID.operation",")","\/\/ Enhanced with proper cancellation scope management"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Manual-unlock-operations","text":"Manual unlock operations"},{"type":"paragraph","inlineContent":[{"text":"üü° Before (1.1):","type":"text"}]},{"code":["return .withLock(","  operation: { send, unlock in","    defer { unlock() }","    try await performCriticalWork()","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚úÖ After (1.2 - with automatic cancellation):"}]},{"code":["return .withLock(","  operation: { send, unlock in","    defer { unlock() }","    try await performCriticalWork()","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")","\/\/ Now includes automatic cancellation ID management"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"anchor":"Code-cleanup-recommendations","text":"Code cleanup recommendations"},{"type":"heading","level":3,"anchor":"Remove-redundant-cancellableid-calls","text":"Remove redundant .cancellable(id:) calls"},{"type":"paragraph","inlineContent":[{"text":"You can now remove manual ","type":"text"},{"type":"codeVoice","code":".cancellable(id:)"},{"text":" specifications when using ","type":"text"},{"type":"codeVoice","code":".lock()"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"üü° Before (can be simplified):"}]},{"code":["@Reducer","struct MyFeature {","  \/\/ ... state and action definitions ...","  ","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .fetchData:","        return .run { send in","          let data = try await apiClient.fetchData()","          await send(.dataReceived(data))","        }","        .cancellable(id: CancelID.fetch)  \/\/ ‚Üê Remove this line","        .lock(action: action, boundaryId: CancelID.fetch)","        ","      case .dataReceived(let data):","        state.data = data","        return .none","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚úÖ After (simplified):"}]},{"code":["@Reducer","struct MyFeature {","  \/\/ ... state and action definitions ...","  ","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .fetchData:","        return .run { send in","          let data = try await apiClient.fetchData()","          await send(.dataReceived(data))","        }","        .lock(action: action, boundaryId: CancelID.fetch)  \/\/ Automatic cancellation!","        ","      case .dataReceived(let data):","        state.data = data","        return .none","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Simplify-complex-effect-chains","text":"Simplify complex effect chains"},{"type":"paragraph","inlineContent":[{"type":"text","text":"üü° Before (verbose):"}]},{"code":["return .merge(","  .run { send in","    await send(.started)","  },","  .run { send in","    try await performWork()","    await send(.workCompleted)","  }","  .cancellable(id: boundaryId)  \/\/ ‚Üê Remove this","  .lock(action: action, boundaryId: boundaryId),","  ","  .run { send in","    await send(.monitoring)","  }",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚úÖ After (clean):"}]},{"code":["return .merge(","  .run { send in","    await send(.started)","  },","  .run { send in","    try await performWork()","    await send(.workCompleted)","  }","  .lock(action: action, boundaryId: boundaryId),  \/\/ Clean and automatic!","  ","  .run { send in","    await send(.monitoring)","  }",")"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"anchor":"Enhanced-safety-features","text":"Enhanced safety features"},{"type":"heading","level":3,"anchor":"Guaranteed-resource-cleanup","text":"Guaranteed resource cleanup"},{"type":"paragraph","inlineContent":[{"text":"Lockman 1.2 implements the ‚ÄúGuaranteed Resource Cleanup‚Äù principle:","type":"text"}]},{"code":["\/\/ This operation can be cancelled, but the unlock will ALWAYS execute","return .withLock(","  operation: { send in","    try await riskyOperation()  \/\/ ‚Üê Can be cancelled","    await send(.completed)","  },","  action: action,","  boundaryId: CancelID.operation",")","\/\/ unlock() is guaranteed to execute even if operation is cancelled"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Improved-concatenated-operations","text":"Improved concatenated operations"},{"type":"paragraph","inlineContent":[{"text":"Concatenated operations now have safer cancellation scope management:","type":"text"}]},{"code":["return .withLock(","  concatenating: [","    .run { send in await step1(send) },    \/\/ ‚Üê These operations are cancellable","    .run { send in await step2(send) },    \/\/ ‚Üê as a group","    .run { send in await step3(send) }     \/\/ ‚Üê ","  ],","  action: action,","  boundaryId: CancelID.workflow",")","\/\/ The unlock effect is NOT cancellable - guaranteed cleanup"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"anchor":"Benefits-of-upgrading","text":"Benefits of upgrading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Cleaner code","type":"text"}]},{"type":"text","text":": Remove boilerplate "},{"type":"codeVoice","code":".cancellable(id:)"},{"type":"text","text":" calls"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Enhanced safety"}]},{"type":"text","text":": ‚ÄúGuaranteed Resource Cleanup‚Äù prevents resource leaks"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Deadlock prevention"}]},{"type":"text","text":": Improved cancellation scope management"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Better maintainability","type":"text"}],"type":"strong"},{"text":": Less manual cancellation ID management","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Improved developer experience","type":"text"}]},{"type":"text","text":": More intuitive API usage"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Zero performance impact","type":"text"}],"type":"strong"},{"text":": Automatic features add no runtime overhead","type":"text"}]}]}],"type":"orderedList"},{"type":"heading","level":2,"anchor":"Testing-your-migration","text":"Testing your migration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After removing manual "},{"code":".cancellable(id:)","type":"codeVoice"},{"type":"text","text":" calls, verify that:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Cancellation still works"}]},{"type":"text","text":": Test that operations can be properly cancelled"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Resource cleanup"}],"type":"strong"},{"text":": Ensure locks are properly released","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"No deadlocks"}],"type":"strong"},{"text":": Verify concatenated operations work correctly","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":": Check that error handlers still receive proper errors"}]}]}],"type":"orderedList"},{"type":"heading","level":2,"anchor":"Complete-migration-example","text":"Complete migration example"},{"type":"paragraph","inlineContent":[{"text":"Here‚Äôs a complete example showing a typical migration:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"üü° Before (1.1):","type":"text"}]},{"code":["@Reducer","struct PaymentFeature {","  struct State: Equatable {","    var isProcessing = false","    var result: PaymentResult?","  }","  ","  @CasePathable","  enum Action: Equatable, LockmanAction {","    case processPayment(amount: Decimal)","    case paymentCompleted(PaymentResult)","    case paymentFailed","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","      .init(actionId: \"payment\", mode: .boundary)","    }","  }","  ","  enum CancelID: LockmanBoundaryId {","    case payment","  }","  ","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .processPayment(let amount):","        state.isProcessing = true","        return .run { send in","          do {","            let result = try await paymentService.process(amount)","            await send(.paymentCompleted(result))","          } catch {","            await send(.paymentFailed)","          }","        }","        .cancellable(id: CancelID.payment)  \/\/ ‚Üê Manual specification","        .lock(action: action, boundaryId: CancelID.payment)","        ","      case .paymentCompleted(let result):","        state.isProcessing = false","        state.result = result","        return .none","        ","      case .paymentFailed:","        state.isProcessing = false","        return .none","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚úÖ After (1.2):"}]},{"code":["@Reducer","struct PaymentFeature {","  struct State: Equatable {","    var isProcessing = false","    var result: PaymentResult?","  }","  ","  @CasePathable","  enum Action: Equatable, LockmanAction {","    case processPayment(amount: Decimal)","    case paymentCompleted(PaymentResult)","    case paymentFailed","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","      .init(actionId: \"payment\", mode: .boundary)","    }","  }","  ","  enum CancelID: LockmanBoundaryId {","    case payment","  }","  ","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .processPayment(let amount):","        state.isProcessing = true","        return .run { send in","          do {","            let result = try await paymentService.process(amount)","            await send(.paymentCompleted(result))","          } catch {","            await send(.paymentFailed)","          }","        }","        .lock(action: action, boundaryId: CancelID.payment)  \/\/ ‚Üê Automatic cancellation!","        ","      case .paymentCompleted(let result):","        state.isProcessing = false","        state.result = result","        return .none","        ","      case .paymentFailed:","        state.isProcessing = false","        return .none","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"anchor":"Summary","text":"Summary"},{"type":"paragraph","inlineContent":[{"text":"Lockman 1.2 represents a significant improvement in developer experience while maintaining complete backward compatibility. The automatic cancellation ID management eliminates boilerplate code and reduces the chance of errors, while the enhanced safety features provide better resource management.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Key takeaways:","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"No breaking changes","type":"text"}]},{"text":": All existing code continues to work","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Simplification opportunity","type":"text"}],"type":"strong"},{"text":": Remove manual ","type":"text"},{"code":".cancellable(id:)","type":"codeVoice"},{"text":" calls where appropriate","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Enhanced safety","type":"text"}],"type":"strong"},{"text":": Benefit from ‚ÄúGuaranteed Resource Cleanup‚Äù principle","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Better maintainability"}]},{"type":"text","text":": Cleaner, more intuitive code patterns"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The automatic features work transparently, ensuring your application‚Äôs operations are properly managed with improved safety guarantees."}]}]}],"metadata":{"modules":[{"name":"Lockman"}],"role":"article","title":"Migrating to 1.2","roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/lockman\/migratingto1.2"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","references":{"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"}}}