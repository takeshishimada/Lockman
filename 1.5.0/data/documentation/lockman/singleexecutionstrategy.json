{"seeAlsoSections":[{"title":"Strategies","anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","metadata":{"roleHeading":"Article","role":"article","title":"SingleExecutionStrategy","modules":[{"name":"Lockman"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"variants":[{"paths":["\/documentation\/lockman\/singleexecutionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same operation from being executed redundantly, maintaining data consistency and application stability.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This is the most frequently used basic strategy for preventing continuous user actions and duplicate execution of automatic operations.","type":"text"}]},{"anchor":"Execution-Modes","type":"heading","level":2,"text":"Execution Modes"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}]},{"anchor":"none-No-Control","type":"heading","level":3,"text":"none - No Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"items":[{"content":[{"inlineContent":[{"text":"Executes all operations without exclusive control","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Used when temporarily disabling lock functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}],"type":"unorderedList"},{"anchor":"boundary-Boundary-level-Exclusive-Control","type":"heading","level":3,"text":"boundary - Boundary-level Exclusive Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Only one process can execute within the same boundary"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"action-Action-level-Exclusive-Control","type":"heading","level":3,"text":"action - Action-level Exclusive Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"items":[{"content":[{"inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied when wanting to control only specific operations"}]}]}],"type":"unorderedList"},{"anchor":"Usage","type":"heading","level":2,"text":"Usage"},{"anchor":"Basic-Usage-Example","type":"heading","level":3,"text":"Basic Usage Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"]},{"anchor":"Usage-with-Reducerlock","type":"heading","level":3,"text":"Usage with Reducer.lock()"},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            } catch: { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionError {","                await send(.showBusyMessage(\"\\(singleError.lockmanInfo.actionId) is currently running\"))","            }","        }","    )","}"]},{"anchor":"Advanced-Usage-with-Effectlock","type":"heading","level":3,"text":"Advanced Usage with Effect.lock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For cases requiring fine-grained control:"}]},{"type":"codeListing","syntax":"swift","code":["case .saveButtonTapped:","    return .run { send in","        try await saveUserData()","        await send(.saveCompleted)","    } catch: { error, send in","        await send(.saveError(error.localizedDescription))","    }","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        }","    )"]},{"anchor":"Operation-Examples","type":"heading","level":2,"text":"Operation Examples"},{"anchor":"action-mode","type":"heading","level":3,"text":"action mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"]},{"anchor":"boundary-mode","type":"heading","level":3,"text":"boundary mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"]},{"anchor":"Error-Handling","type":"heading","level":2,"text":"Error Handling"},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference"},{"text":" page.","type":"text"}]},{"anchor":"LockmanSingleExecutionError","type":"heading","level":3,"text":"LockmanSingleExecutionError"},{"type":"paragraph","inlineContent":[{"text":"This error conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanStrategyError"},{"text":" protocol and provides:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":": Information about the action that couldn‚Äôt acquire the lock"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the lock failure occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"errorDescription","type":"codeVoice"},{"text":": Human-readable error description","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"failureReason","type":"codeVoice"},{"text":": Specific reason for the failure","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Error cases:","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}],"type":"strong"},{"text":" - Boundary is already locked by another action","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyRunning"}]},{"type":"text","text":" - Same action ID is already running"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionError {","        switch singleError {","        case .boundaryAlreadyLocked(_, let lockmanInfo):","            await send(.showBusyMessage(\"Another process is running: \\(lockmanInfo.actionId)\"))","        case .actionAlreadyRunning(_, let lockmanInfo):","            await send(.showBusyMessage(\"\\(lockmanInfo.actionId) is running\"))","        }","    } else {","        await send(.showBusyMessage(\"Cannot start operation\"))","    }","}"]}],"kind":"content"}],"references":{"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"title":"PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions with unified condition evaluation.","type":"text"}],"url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","role":"article","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"role":"article","title":"GroupCoordinationStrategy","kind":"article"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","kind":"article","title":"ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","kind":"article","url":"\/documentation\/lockman\/errorhandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"role":"article","title":"Error Handling"}}}