{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/boundaryoverview"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boundary is the "},{"type":"strong","inlineContent":[{"type":"text","text":"exclusive control boundary"}]},{"type":"text","text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using CancelID as a boundary provides the following benefits:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Natural integration with TCA"}],"type":"strong"},{"text":" - Leverages existing TCA mechanisms","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Clear boundary definition"}]},{"type":"text","text":" - CancelID clearly defines the scope of exclusive control"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"text":"Boundary Specifications","anchor":"Boundary-Specifications"},{"type":"heading","level":3,"text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control between different Boundaries is not possible:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Since these are treated as separate boundaries, load can be executed even while save is running.","type":"text"}]},{"type":"heading","level":3,"text":"2. Only one Boundary per reducer","anchor":"2-Only-one-Boundary-per-reducer"},{"inlineContent":[{"text":"You cannot specify multiple Boundaries for a single reducer:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"]},{"type":"heading","level":2,"text":"Summary","anchor":"Summary"},{"type":"paragraph","inlineContent":[{"text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"seeAlsoSections":[{"anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials","generated":true}],"metadata":{"role":"article","roleHeading":"Article","title":"Boundary","modules":[{"name":"Lockman"}]},"references":{"doc://Lockman/documentation/Lockman/Configuration":{"abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"title":"Configuration","role":"article","url":"\/documentation\/lockman\/configuration","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","type":"topic"},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","url":"\/documentation\/lockman\/unlock","title":"Unlock","abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}]},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"title":"Choosing a Strategy","kind":"article","url":"\/documentation\/lockman\/choosingstrategy","type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","role":"article"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/Lock":{"url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","kind":"article","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/GettingStarted":{"role":"article","type":"topic","title":"Getting Started","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","url":"\/documentation\/lockman\/gettingstarted","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","kind":"article","url":"\/documentation\/lockman\/errorhandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"role":"article","title":"Error Handling"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"role":"article","kind":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"title":"Debugging Guide","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide"}}}