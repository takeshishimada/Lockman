{"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","interfaceLanguage":"swift"},"topicSections":[{"title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"generated":true,"anchor":"Operators"},{"title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"generated":true,"anchor":"Initializers"},{"title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"generated":true,"anchor":"Instance-Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"sections":[],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo","kind":"relationships"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"symbolKind":"struct","title":"AnyLockmanBoundaryId","roleHeading":"Structure","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"modules":[{"name":"Lockman"}],"externalID":"s:7Lockman03AnyA10BoundaryIdV"},"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"code":"LockmanBoundaryId","type":"codeVoice"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"This wrapper enables different types of boundary identifiers to coexist in the same"},{"type":"text","text":" "},{"type":"text","text":"collection while maintaining type safety for hashing and equality operations."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Type Erasure Benefits","anchor":"Type-Erasure-Benefits"},{"items":[{"content":[{"inlineContent":[{"text":"Allows ","type":"text"},{"code":"Dictionary<AnyLockmanBoundaryId, Value>","type":"codeVoice"},{"text":" with mixed key types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maintains value semantics and equality comparison"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"text":"Thread Safety","anchor":"Thread-Safety"},{"inlineContent":[{"text":"Marked as ","type":"text"},{"code":"@unchecked Sendable","type":"codeVoice"},{"text":" because ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Usage Example","anchor":"Usage-Example"},{"type":"codeListing","code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"],"syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanboundaryid"]}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"title":"hash(into:)","abstract":[{"type":"text","text":"Generates a hash value for this boundary ID."}],"type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"type":"topic","role":"symbol","title":"init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10BoundaryIda"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates a new ","type":"text"},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"code":"LockmanBoundaryId","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"type":"topic","abstract":[],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","kind":"article","title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"role":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","url":"\/documentation\/lockman\/anylockmanboundaryid","type":"topic","kind":"symbol","title":"AnyLockmanBoundaryId","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanBoundaryId"}]},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"abstract":[{"type":"text","text":"Compares two "},{"code":"AnyLockmanBoundaryId","type":"codeVoice"},{"type":"text","text":" instances for equality."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier","text":"AnyLockmanBoundaryId"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV","kind":"typeIdentifier","text":"AnyLockmanBoundaryId"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","title":"==(_:_:)","kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","role":"symbol","type":"topic"},"doc://Lockman/SH":{"identifier":"doc:\/\/Lockman\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"},"doc://Lockman/SQ":{"identifier":"doc:\/\/Lockman\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"}}}