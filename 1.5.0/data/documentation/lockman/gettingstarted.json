{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Lockman"}],"title":"Getting Started","roleHeading":"Article","role":"article"},"seeAlsoSections":[{"generated":true,"anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"paths":["\/documentation\/lockman\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"text":"Prerequisites","level":2,"type":"heading","anchor":"Prerequisites"},{"inlineContent":[{"type":"text","text":"Before using Lockman, you should be familiar with:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"The Composable Architecture (TCA)","type":"text"}],"type":"strong"},{"type":"text","text":" fundamentals"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basic Swift concurrency (","type":"text"},{"type":"codeVoice","code":"async\/await"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"TCA’s Effect system"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"If you’re new to TCA, start with the ","type":"text"},{"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/tutorials\/composablearchitecture\/","isActive":true,"type":"reference"},{"text":" first.","type":"text"}],"type":"paragraph"},{"text":"30-Second Solution","level":2,"type":"heading","anchor":"30-Second-Solution"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Problem","type":"text"}]},{"type":"text","text":": Your save button can be tapped multiple times, causing duplicate network requests."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Solution"}]},{"text":": Add one line to prevent duplicate executions:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case saveButtonTapped","    var lockmanInfo: LockmanSingleExecutionInfo { ","        .init(actionId: actionName, mode: .boundary) ","    }","}","","\/\/ Add this one line to your reducer:",".lock(boundaryId: CancelID.userAction, for: \\.view)"]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Result","type":"text"}]},{"type":"text","text":": The save button becomes “smart” - it won’t execute again until the current save completes."}],"type":"paragraph"},{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project step by step, starting with the simplest case and building up to more complex scenarios.","type":"text"}],"type":"paragraph"},{"text":"Adding Lockman as a dependency","anchor":"Adding-Lockman-as-a-dependency","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"x.x.x\")","]"]},{"inlineContent":[{"type":"text","text":"And add "},{"type":"codeVoice","code":"Lockman"},{"type":"text","text":" as a dependency of your package’s target:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"]},{"text":"Step-by-Step Tutorial","anchor":"Step-by-Step-Tutorial","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Let’s build a simple save feature that prevents duplicate executions. We’ll start minimal and add complexity gradually."}],"type":"paragraph"},{"text":"Step 1: Basic Setup","anchor":"Step-1-Basic-Setup","type":"heading","level":3},{"inlineContent":[{"text":"Create a minimal TCA feature with a save action:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct SaveFeature {","    @ObservableState","    struct State: Equatable {","        var isSaving = false","        var message = \"\"","    }","    ","    enum Action {","        case saveButtonTapped","        case saveStarted","        case saveCompleted","    }","}"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"What we have"}],"type":"strong"},{"text":": A basic save feature with three simple actions.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Step-2-Add-Basic-Logic","text":"Step 2: Add Basic Logic","level":3},{"inlineContent":[{"text":"Implement the basic save functionality:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct SaveFeature {","    \/\/ ... State from Step 1 ...","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            switch action {","            case .saveButtonTapped:","                state.isSaving = true","                state.message = \"Saving...\"","                return .run { send in","                    \/\/ Simulate save operation","                    try await Task.sleep(for: .seconds(2))","                    await send(.saveCompleted)","                }","                ","            case .saveStarted:","                state.isSaving = true","                state.message = \"Starting save...\"","                return .none","                ","            case .saveCompleted:","                state.isSaving = false","                state.message = \"Saved successfully!\"","                return .none","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Problem"}],"type":"strong"},{"text":": If users tap the save button multiple times, multiple save operations will run simultaneously.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Step-3-Add-Lockman-Protection","text":"Step 3: Add Lockman Protection","level":3},{"inlineContent":[{"type":"text","text":"Now let’s prevent duplicate saves by adding Lockman protection:"}],"type":"paragraph"},{"code":["@LockmanSingleExecution","enum Action {","    case saveButtonTapped","    case saveStarted  ","    case saveCompleted","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .saveButtonTapped:","            return .init(actionId: actionName, mode: .boundary)","        case .saveStarted, .saveCompleted:","            return .init(actionId: actionName, mode: .none) \/\/ No protection needed","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"What changed"}]},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Added "},{"type":"codeVoice","code":"@LockmanSingleExecution"},{"type":"text","text":" macro to the Action enum"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Implemented ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property to configure protection per action","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Step-4-Enable-Lock-Management","text":"Step 4: Enable Lock Management","level":3},{"inlineContent":[{"type":"text","text":"Finally, add lock management to your reducer:"}],"type":"paragraph"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ ... same switch statement from Step 2 ...","    }","    .lock(","        boundaryId: CancelID.save,","        lockFailure: { error, send in","            if error is LockmanSingleExecutionError {","                print(\"Save already in progress\")","            }","        }","    )","}","","enum CancelID {","    case save","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"What changed"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"code":".lock()","type":"codeVoice"},{"text":" modifier to the reducer","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Provided a ","type":"text"},{"type":"codeVoice","code":"boundaryId"},{"text":" to identify this lock boundary","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added error handling for when lock acquisition fails"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"text":"Result","type":"text"}],"type":"strong"},{"text":": Now when users tap save multiple times, only the first tap executes. Additional taps are safely ignored until the save completes.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Complete-Example","text":"Complete Example","level":2},{"inlineContent":[{"type":"text","text":"Here’s the complete, working example:"}],"type":"paragraph"},{"code":["import ComposableArchitecture","import Lockman","","@Reducer","struct SaveFeature {","    @ObservableState","    struct State: Equatable {","        var isSaving = false","        var message = \"\"","    }","    ","    @LockmanSingleExecution","    enum Action {","        case saveButtonTapped","        case saveCompleted","        ","        var lockmanInfo: LockmanSingleExecutionInfo {","            switch self {","            case .saveButtonTapped:","                return .init(actionId: actionName, mode: .boundary)","            case .saveCompleted:","                return .init(actionId: actionName, mode: .none)","            }","        }","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            switch action {","            case .saveButtonTapped:","                state.isSaving = true","                state.message = \"Saving...\"","                return .run { send in","                    try await Task.sleep(for: .seconds(2))","                    await send(.saveCompleted)","                }","                ","            case .saveCompleted:","                state.isSaving = false","                state.message = \"Saved successfully!\"","                return .none","            }","        }","        .lock(","            boundaryId: CancelID.save,","            lockFailure: { error, send in","                if error is LockmanSingleExecutionError {","                    print(\"Save already in progress\")","                }","            }","        )","    }","    ","    enum CancelID {","        case save","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Next-Steps","text":"Next Steps","level":2},{"inlineContent":[{"type":"text","text":"Congratulations! You’ve successfully implemented your first Lockman feature. Here’s what to explore next:"}],"type":"paragraph"},{"type":"heading","anchor":"Learn-Other-Strategies","text":"Learn Other Strategies","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Priority-based control"}],"type":"strong"},{"text":": ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","overridingTitleInlineContent":[{"type":"codeVoice","code":"PriorityBasedStrategy"}],"overridingTitle":"PriorityBasedStrategy","isActive":true,"type":"reference"},{"text":" - Cancel existing operations for higher priority ones","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concurrency limits"}],"type":"strong"},{"text":": ","type":"text"},{"isActive":true,"type":"reference","overridingTitle":"ConcurrencyLimitedStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","overridingTitleInlineContent":[{"type":"codeVoice","code":"ConcurrencyLimitedStrategy"}]},{"text":" - Limit how many operations run simultaneously","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Group coordination","type":"text"}],"type":"strong"},{"text":": ","type":"text"},{"overridingTitle":"GroupCoordinationStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"GroupCoordinationStrategy"}]},{"text":" - Coordinate related operations","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Custom logic","type":"text"}],"type":"strong"},{"type":"text","text":": "},{"overridingTitle":"DynamicConditionStrategy","type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","overridingTitleInlineContent":[{"code":"DynamicConditionStrategy","type":"codeVoice"}],"isActive":true},{"type":"text","text":" - Create your own rules"}]}]}]},{"type":"heading","anchor":"Strategy-Selection-Guide","text":"Strategy Selection Guide","level":3},{"inlineContent":[{"text":"Not sure which strategy to use? Check out ","type":"text"},{"type":"reference","overridingTitleInlineContent":[{"text":"Choosing Strategy","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","overridingTitle":"Choosing Strategy","isActive":true},{"text":" for guidance on picking the right approach.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Advanced-Topics","text":"Advanced Topics","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"Boundary Overview","type":"text"}],"overridingTitle":"Boundary Overview","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","type":"reference","isActive":true},{"text":" - Understanding lock boundaries","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"overridingTitle":"Error Handling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},{"type":"text","text":" - Comprehensive error management"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"overridingTitle":"Configuration","overridingTitleInlineContent":[{"type":"text","text":"Configuration"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration"},{"type":"text","text":" - Global settings and customization"}]}]}]},{"type":"heading","anchor":"Alternative-API-Effectlock","text":"Alternative API: Effect.lock()","level":2},{"inlineContent":[{"text":"If you prefer method chaining on individual effects, you can use ","type":"text"},{"code":"Effect.lock()","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["case .saveButtonTapped:","    return .run { send in","        try await Task.sleep(for: .seconds(2))","        await send(.saveCompleted)","    }","    .lock(","        action: action,","        boundaryId: CancelID.save,","        lockFailure: { error, send in","            if error is LockmanSingleExecutionError {","                print(\"Save already in progress\")","            }","        }","    )"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This approach gives you the same protection but applies to individual effects rather than the entire reducer.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"article","references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","kind":"article","url":"\/documentation\/lockman\/errorhandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"role":"article","title":"Error Handling"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","type":"topic","kind":"article","title":"Boundary","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"role":"article","url":"\/documentation\/lockman\/boundaryoverview"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"title":"Choosing a Strategy","kind":"article","url":"\/documentation\/lockman\/choosingstrategy","type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","role":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","kind":"article","title":"ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"url":"\/documentation\/lockman\/concurrencylimitedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy"},"doc://Lockman/documentation/Lockman/Lock":{"url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","kind":"article","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/Configuration":{"abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"title":"Configuration","role":"article","url":"\/documentation\/lockman\/configuration","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","type":"topic"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"title":"PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"},"https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/composablearchitecture/":{"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/tutorials\/composablearchitecture\/","type":"link","url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/tutorials\/composablearchitecture\/","title":"official TCA tutorial","titleInlineContent":[{"text":"official TCA tutorial","type":"text"}]},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","url":"\/documentation\/lockman\/unlock","title":"Unlock","abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions with unified condition evaluation.","type":"text"}],"url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","type":"topic"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"role":"article","title":"GroupCoordinationStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"role":"article","kind":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"title":"Debugging Guide","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide"}}}