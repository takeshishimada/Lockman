{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","metadata":{"role":"article","roleHeading":"Article","title":"Error Handling","modules":[{"name":"Lockman"}]},"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"anchor":"Common-Error-Handling-Patterns","text":"Common Error Handling Patterns","type":"heading","level":2},{"anchor":"lockFailure-Handler-with-Reducerlock","text":"lockFailure Handler with Reducer.lock()","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}],"type":"paragraph"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"Benefits of centralized error handling:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Consistent error handling across all actions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Single place to update error messages"}]}]},{"content":[{"inlineContent":[{"text":"Easier to maintain and test","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"Parameters:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"error","type":"codeVoice"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"send","type":"codeVoice"},{"text":": Function for sending feedback to the user","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"catch-handler-Pattern","text":"catch handler Pattern","type":"heading","level":3},{"inlineContent":[{"text":"Handling general errors that occur during processing:","type":"text"}],"type":"paragraph"},{"code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This handler catches errors thrown within the operation and appropriately notifies the user.","type":"text"}],"type":"paragraph"},{"text":"Types of Errors and Solutions","type":"heading","level":2,"anchor":"Types-of-Errors-and-Solutions"},{"text":"1. Lock Acquisition Failure (Already Locked)","type":"heading","level":3,"anchor":"1-Lock-Acquisition-Failure-Already-Locked"},{"inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"text":": Occurs when the same operation or boundary is already running","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Common solutions","type":"text"}]},{"type":"text","text":":"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    \/\/ Notify user that operation is in progress","    await send(.showMessage(\"Operation is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"],"type":"codeListing","syntax":"swift"},{"text":"2. Permission\/Priority Conflicts","type":"heading","level":3,"anchor":"2-PermissionPriority-Conflicts"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concept"}]},{"type":"text","text":": Occurs due to higher priority operations or group rule constraints"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"text":":","type":"text"}]},{"syntax":"swift","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"],"type":"codeListing"},{"anchor":"3-Cancellation-Notification","text":"3. Cancellation Notification","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Concept","type":"text"}],"type":"strong"},{"text":": When existing operations are cancelled by higher priority operations","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"text":":","type":"text"}]},{"syntax":"swift","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"],"type":"codeListing"},{"anchor":"Best-Practices","text":"Best Practices","level":2,"type":"heading"},{"anchor":"1-Proper-Error-Type-Casting","text":"1. Proper Error Type Casting","level":3,"type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"],"type":"codeListing"},{"anchor":"2-User-Friendly-Messages","text":"2. User-Friendly Messages","level":3,"type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"],"type":"codeListing"},{"anchor":"3-Utilizing-Additional-Information","text":"3. Utilizing Additional Information","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many errors contain additional information:"}]},{"syntax":"swift","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start operation\"))","        }","    }",")"],"type":"codeListing"},{"anchor":"Strategy-Specific-Errors","text":"Strategy-Specific Errors","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"All strategy errors now conform to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol, providing consistent access to:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"errorDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Localized error descriptions"}]}]}]},{"anchor":"Error-Types-by-Strategy","text":"Error Types by Strategy:","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"SingleExecutionStrategy","type":"text"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"PriorityBasedStrategy","type":"text"}]},{"text":":","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedBlockedError"},{"type":"text","text":" - New action blocked by priority"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LockmanPriorityBasedCancellationError"},{"text":" - Existing action cancelled by preemption","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy"}]},{"text":": ","type":"text"},{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"},{"text":" - Group rule violations","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanConcurrencyLimitedCancellationError"},{"type":"text","text":" - Concurrent execution limit exceeded"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}],"overridingTitle":"DynamicConditionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","type":"reference","isActive":true},{"type":"text","text":" - Condition mismatch errors"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","isActive":true,"overridingTitle":"CompositeStrategy","overridingTitleInlineContent":[{"text":"CompositeStrategy","type":"text"}],"type":"reference"},{"text":" - Composite strategy errors","type":"text"}],"type":"paragraph"}]}]}]}],"variants":[{"paths":["\/documentation\/lockman\/errorhandling"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Essentials","generated":true,"anchor":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"references":{"doc://Lockman/documentation/Lockman/Lock":{"url":"\/documentation\/lockman\/lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","kind":"article","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"role":"article","type":"topic"},"doc://Lockman/documentation/Lockman/GettingStarted":{"role":"article","type":"topic","title":"Getting Started","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","url":"\/documentation\/lockman\/gettingstarted","abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}]},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","url":"\/documentation\/lockman\/unlock","title":"Unlock","abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions with unified condition evaluation.","type":"text"}],"url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","type":"topic"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"title":"Choosing a Strategy","kind":"article","url":"\/documentation\/lockman\/choosingstrategy","type":"topic","abstract":[{"type":"text","text":"Learn how to select the right strategy for your use case."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","role":"article"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/Configuration":{"abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"title":"Configuration","role":"article","url":"\/documentation\/lockman\/configuration","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","role":"article","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"role":"article","kind":"article","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"title":"Debugging Guide","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","type":"topic","kind":"article","title":"Boundary","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"role":"article","url":"\/documentation\/lockman\/boundaryoverview"}}}