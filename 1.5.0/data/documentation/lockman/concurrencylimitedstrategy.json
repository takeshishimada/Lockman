{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy is a strategy that limits the number of concurrent executions. It allows concurrent execution up to a specified number and rejects execution when the limit is exceeded, enabling resource usage control and performance optimization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used for controlling the concurrency of resource-intensive operations such as network requests and file operations."}]},{"type":"heading","anchor":"Concurrency-Limitation-System","level":2,"text":"Concurrency Limitation System"},{"text":"Limit Types","type":"heading","anchor":"Limit-Types","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"unlimited","type":"text"}]},{"type":"text","text":" - No limit"}]},{"syntax":"swift","type":"codeListing","code":["LockmanConcurrencyLimitedInfo(","    actionId: \"backgroundTask\",","    concurrencyId: \"background\",","    limit: .unlimited",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"No limit on the number of concurrent executions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Used when you want to temporarily disable limits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied for behavior verification during debugging and testing","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"limited"}],"type":"strong"},{"text":" - Numeric limit","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanConcurrencyLimitedInfo(","    actionId: \"download\",","    concurrencyId: \"downloads\", ","    limit: .limited(3)",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows concurrent execution up to the specified number","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Operations exceeding the limit are rejected"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Resource protection and performance optimization"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":3,"anchor":"Concurrency-Groups","text":"Concurrency Groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operations with the same "},{"type":"codeVoice","code":"concurrencyId"},{"type":"text","text":" are managed as a single group, and the number of concurrent executions is limited on a per-group basis."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Managed as the same group \"downloads\"","LockmanConcurrencyLimitedInfo(","    actionId: \"downloadImage\",","    concurrencyId: \"downloads\",","    limit: .limited(3)",")","","LockmanConcurrencyLimitedInfo(","    actionId: \"downloadVideo\", ","    concurrencyId: \"downloads\",","    limit: .limited(3)",")"]},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"anchor":"Basic-Usage-Example","level":3,"type":"heading","text":"Basic Usage Example"},{"syntax":"swift","type":"codeListing","code":["@LockmanConcurrencyLimited","enum ViewAction {","    case downloadFile(URL)","    case uploadFile(URL)","    case processImage(UIImage)","    ","    var lockmanInfo: LockmanConcurrencyLimitedInfo {","        switch self {","        case .downloadFile:","            return LockmanConcurrencyLimitedInfo(","                actionId: actionName,","                concurrencyId: \"network\",","                limit: .limited(3)","            )","        case .uploadFile:","            return LockmanConcurrencyLimitedInfo(","                actionId: actionName,","                concurrencyId: \"network\", ","                limit: .limited(3)","            )","        case .processImage:","            return LockmanConcurrencyLimitedInfo(","                actionId: actionName,","                concurrencyId: \"imageProcessing\",","                limit: .limited(2)","            )","        }","    }","}"]},{"anchor":"Group-specific-Limit-Configuration","level":3,"type":"heading","text":"Group-specific Limit Configuration"},{"syntax":"swift","type":"codeListing","code":["\/\/ Network-related: Maximum 3","LockmanConcurrencyLimitedInfo(","    actionId: \"apiCall\",","    concurrencyId: \"network\",","    limit: .limited(3)",")","","\/\/ Image operations: Maximum 2  ","LockmanConcurrencyLimitedInfo(","    actionId: \"imageResize\",","    concurrencyId: \"imageProcessing\", ","    limit: .limited(2)",")","","\/\/ Background tasks: No limit","LockmanConcurrencyLimitedInfo(","    actionId: \"logging\",","    concurrencyId: \"background\",","    limit: .unlimited",")"]},{"anchor":"Behavior-Examples","level":2,"type":"heading","text":"Behavior Examples"},{"anchor":"Execution-Control-by-Limits","level":3,"type":"heading","text":"Execution Control by Limits"},{"type":"codeListing","syntax":null,"code":["Limit: 3","Concurrency Group: \"downloads\"","","Time: 0s  - download1 request → ✅ Execute (1\/3)","Time: 1s  - download2 request → ✅ Execute (2\/3)  ","Time: 2s  - download3 request → ✅ Execute (3\/3)","Time: 3s  - download4 request → ❌ Reject (limit reached)","Time: 4s  - download1 complete → ✅ Complete (2\/3)","Time: 5s  - download5 request → ✅ Execute (3\/3)"]},{"type":"heading","level":3,"anchor":"Independent-Control-in-Different-Groups","text":"Independent Control in Different Groups"},{"type":"codeListing","syntax":null,"code":["Network Group (Limit: 3)","Time: 0s  - api1 execute, api2 execute, api3 execute → ✅ (3\/3)","Time: 1s  - api4 request → ❌ Reject","","Image Processing Group (Limit: 2)  ","Time: 0s  - resize1 execute, resize2 execute → ✅ (2\/2)","Time: 1s  - resize3 request → ❌ Reject","","※ Different groups are controlled independently"]},{"type":"heading","level":2,"anchor":"Error-Handling","text":"Error Handling"},{"inlineContent":[{"text":"For errors that may occur in ConcurrencyLimitedStrategy and how to handle them, also refer to the common patterns on the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"type":"reference","isActive":true,"overridingTitle":"Error Handling"},{"text":" page.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"LockmanConcurrencyLimitedCancellationError","text":"LockmanConcurrencyLimitedCancellationError"},{"inlineContent":[{"type":"text","text":"This error conforms to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol and provides:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"cancelledInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfos","type":"codeVoice"},{"type":"text","text":": Array of currently active infos"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"currentCount"},{"type":"text","text":": Current number of active executions"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","        let limit = concurrencyError.cancelledInfo.limit","        let current = concurrencyError.currentCount","        await send(.concurrencyLimitReached(","            \"Concurrency limit reached (\\(current)\/\\(limit))\"","        ))","    }","}"]}]}],"variants":[{"paths":["\/documentation\/lockman\/concurrencylimitedstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"Lockman"}],"role":"article","title":"ConcurrencyLimitedStrategy","roleHeading":"Article"},"abstract":[{"type":"text","text":"Limit the number of concurrent executions."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"title":"Strategies","generated":true,"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"references":{"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","abstract":[{"text":"Control actions based on runtime conditions with unified condition evaluation.","type":"text"}],"url":"\/documentation\/lockman\/dynamicconditionstrategy","title":"Dynamic Condition Evaluation","type":"topic"},"doc://Lockman/documentation/Lockman":{"url":"\/documentation\/lockman","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"type":"text","text":"Elegant exclusive control for user actions in The Composable Architecture applications."}],"title":"Lockman","type":"topic","role":"collection"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"title":"PriorityBasedStrategy","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"type":"topic","kind":"article","url":"\/documentation\/lockman\/singleexecutionstrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","title":"SingleExecutionStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"url":"\/documentation\/lockman\/groupcoordinationstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"role":"article","title":"GroupCoordinationStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","type":"topic","url":"\/documentation\/lockman\/compositestrategy","role":"article","abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"topic","kind":"article","url":"\/documentation\/lockman\/errorhandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"role":"article","title":"Error Handling"}}}