{"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","sections":[],"abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/lockman\/singleexecutionstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"article","title":"SingleExecutionStrategy","roleHeading":"Article","modules":[{"name":"Lockman"}]},"seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"anchor":"Strategies"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}],"type":"paragraph"},{"level":2,"anchor":"Execution-Modes","text":"Execution Modes","type":"heading"},{"inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"none-No-Control","text":"none - No Control","type":"heading"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Executes all processing without exclusive control","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Used when temporarily disabling lock functionality"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"anchor":"boundary-Boundary-level-Exclusive-Control","text":"boundary - Boundary-level Exclusive Control","type":"heading"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Exclusive control at screen or component level","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"action-Action-level-Exclusive-Control","text":"action - Action-level Exclusive Control","type":"heading"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Prevents only duplicate execution of the same action","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied when wanting to control only specific processing","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"Usage","text":"Usage","type":"heading"},{"level":3,"anchor":"Basic-Usage-Example","text":"Basic Usage Example","type":"heading"},{"syntax":"swift","code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Usage-with-Reducerlock","text":"Usage with Reducer.lock()","type":"heading"},{"syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped:","            return .run { send in","                try await saveUserData()","                await send(.saveCompleted)","            }","            .catch { error, send in","                await send(.saveError(error.localizedDescription))","            }","            ","        case .loadButtonTapped:","            return .run { send in","                let data = try await loadUserData()","                await send(.loadCompleted(data))","            }","            \/\/ Other cases...","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            if let singleError = error as? LockmanSingleExecutionCancellationError,","               case .actionAlreadyRunning(let info) = singleError.reason {","                await send(.showBusyMessage(\"\\(info.actionId) is currently running\"))","            }","        }","    )","}"],"type":"codeListing"},{"level":3,"anchor":"Advanced-Usage-with-withLock","text":"Advanced Usage with withLock","type":"heading"},{"inlineContent":[{"type":"text","text":"For cases requiring fine-grained control:"}],"type":"paragraph"},{"syntax":"swift","code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            await send(.saveCompleted)","        },","        catch handler: { error, send in","            await send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            await send(.saveBusy(\"Save process is currently running\"))","        },","        action: action,","        boundaryId: CancelID.userAction","    )"],"type":"codeListing"},{"level":2,"anchor":"Operation-Examples","text":"Operation Examples","type":"heading"},{"level":3,"anchor":"action-mode","text":"action mode","type":"heading"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"type":"codeListing"},{"level":3,"anchor":"boundary-mode","text":"boundary mode","type":"heading"},{"syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"type":"codeListing"},{"level":2,"anchor":"Error-Handling","text":"Error Handling","type":"heading"},{"inlineContent":[{"text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"isActive":true,"overridingTitle":"Error Handling","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},{"text":" page.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"LockmanSingleExecutionCancellationError","text":"LockmanSingleExecutionCancellationError","type":"heading"},{"inlineContent":[{"text":"This error conforms to ","type":"text"},{"code":"LockmanCancellationError","type":"codeVoice"},{"text":" protocol and provides:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"cancelledInfo","type":"codeVoice"},{"text":": Information about the cancelled action","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reason","type":"codeVoice"},{"text":": Specific reason for cancellation","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"boundaryAlreadyLocked","type":"text"}],"type":"strong"},{"text":" - Boundary is already locked","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Existing lock information","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyRunning","type":"text"}]},{"type":"text","text":" - Same action is already running"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Running action information"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"syntax":"swift","code":["lockFailure: { error, send in","    if let singleError = error as? LockmanSingleExecutionCancellationError {","        switch singleError.reason {","        case .boundaryAlreadyLocked(let existingInfo):","            send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","        case .actionAlreadyRunning(let existingInfo):","            send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","        }","    } else {","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"],"type":"codeListing"}]}],"references":{"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"kind":"article","url":"\/documentation\/lockman\/groupcoordinationstrategy","role":"article","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic","title":"GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"title":"CompositeStrategy","type":"topic","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","type":"topic","title":"DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"role":"article","title":"ConcurrencyLimitedStrategy","kind":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]}}}