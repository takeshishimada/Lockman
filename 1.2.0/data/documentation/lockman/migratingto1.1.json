{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/migratingto1.1"]}],"abstract":[{"text":"Update your code from Lockman 1.0 to take advantage of Lockman 1.1â€™s improved resource management and enhanced error handling.","type":"text"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/MigratingTo1.1"},"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article","title":"Migrating to 1.1"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman 1.1 introduces important improvements to prevent resource leaks and provide better type safety for cancellation handling. The main focus is on immediate unlock functionality that ensures locks are released as soon as actions are cancelled, preventing false lock conflicts."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key changes include:"}]},{"items":[{"content":[{"inlineContent":[{"text":"New ","type":"text"},{"type":"codeVoice","code":"LockmanPrecedingCancellationError"},{"text":" protocol for type-safe cancellation handling","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Enhanced ","type":"text"},{"code":"LockmanPriorityBasedError","type":"codeVoice"},{"text":" with complete action information","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Immediate unlock mechanism to prevent resource leaks"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Updating dependencies","type":"heading","anchor":"Updating-dependencies"},{"type":"paragraph","inlineContent":[{"text":"To upgrade to Lockman 1.1, update your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" file:","type":"text"}]},{"type":"codeListing","code":["dependencies: [","  .package(","    url: \"https:\/\/github.com\/takeshishimada\/Lockman\",","    from: \"1.1.0\"","  )","]"],"syntax":"swift"},{"level":2,"text":"Breaking changes","type":"heading","anchor":"Breaking-changes"},{"level":3,"text":"`LockmanResult.successWithPrecedingCancellation` type change","type":"heading","anchor":"LockmanResultsuccessWithPrecedingCancellation-type-change"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"successWithPrecedingCancellation","type":"codeVoice"},{"type":"text","text":" case now requires errors conforming to "},{"code":"LockmanPrecedingCancellationError","type":"codeVoice"},{"type":"text","text":" protocol instead of generic "},{"code":"LockmanError","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.0):","type":"text"}]},{"code":["case successWithPrecedingCancellation(LockmanError)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.1):"}]},{"code":["case successWithPrecedingCancellation(any LockmanPrecedingCancellationError)"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"`LockmanPriorityBasedError` enhanced with action information","anchor":"LockmanPriorityBasedError-enhanced-with-action-information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All "},{"type":"codeVoice","code":"LockmanPriorityBasedError"},{"type":"text","text":" cases now include complete "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" and "},{"type":"codeVoice","code":"boundaryId"},{"type":"text","text":" parameters, providing better context about the cancelled action."}]},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.0):","type":"text"}]},{"code":["enum LockmanPriorityBasedError: LockmanError {","    case precedingActionCancelled(precedingActionName: String, precedingPriority: LockmanPriority)","    case higherPriorityExists(existingActionName: String, existingPriority: LockmanPriority)","    case samePriorityConflict(existingActionName: String)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.1):"}]},{"code":["enum LockmanPriorityBasedError: LockmanError {","    case precedingActionCancelled(","        precedingActionName: String,","        precedingPriority: LockmanPriority,","        lockmanInfo: any LockmanInfo,","        boundaryId: any LockmanBoundaryId","    )","    case higherPriorityExists(","        existingActionName: String,","        existingPriority: LockmanPriority,","        lockmanInfo: any LockmanInfo,","        boundaryId: any LockmanBoundaryId","    )","    case samePriorityConflict(","        existingActionName: String,","        lockmanInfo: any LockmanInfo,","        boundaryId: any LockmanBoundaryId","    )","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"New features","anchor":"New-features"},{"level":3,"type":"heading","text":"`LockmanPrecedingCancellationError` protocol","anchor":"LockmanPrecedingCancellationError-protocol"},{"type":"paragraph","inlineContent":[{"text":"This new protocol provides a type-safe way to access information about cancelled actions:","type":"text"}]},{"code":["public protocol LockmanPrecedingCancellationError: LockmanError {","    var lockmanInfo: any LockmanInfo { get }","    var boundaryId: any LockmanBoundaryId { get }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"All strategy cancellation errors now conform to this protocol:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"LockmanPriorityBasedCancellationError","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanDynamicConditionCancellationError"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"LockmanConcurrencyLimitedCancellationError"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LockmanCompositeCancellationError"}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"Immediate unlock functionality","anchor":"Immediate-unlock-functionality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman 1.1 automatically releases locks immediately when actions are cancelled, preventing resource leaks and false lock conflicts. This happens transparently without any code changes required."}]},{"level":2,"type":"heading","text":"Migration guide","anchor":"Migration-guide"},{"level":3,"type":"heading","text":"Handling cancellation errors","anchor":"Handling-cancellation-errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If youâ€™re explicitly handling "},{"type":"codeVoice","code":"successWithPrecedingCancellation"},{"type":"text","text":" cases, update your code to use the new protocol:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.0):"}]},{"code":["switch result {","case .successWithPrecedingCancellation(let error):","    \/\/ Generic error handling","    print(\"Action was cancelled: \\(error)\")","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.1):"}]},{"code":["switch result {","case .successWithPrecedingCancellation(let cancellationError):","    \/\/ Type-safe access to cancellation information","    let cancelledAction = cancellationError.lockmanInfo.actionName","    let boundaryId = cancellationError.boundaryId","    print(\"Action '\\(cancelledAction)' was cancelled at boundary '\\(boundaryId)'\")","}"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Updating priority-based error handling","anchor":"Updating-priority-based-error-handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If youâ€™re handling specific "},{"type":"codeVoice","code":"LockmanPriorityBasedError"},{"type":"text","text":" cases, update to use the new parameters:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš« Before (1.0):"}]},{"code":["catch let error as LockmanPriorityBasedError {","    switch error {","    case .precedingActionCancelled(let actionName, let priority):","        print(\"Cancelled \\(actionName) with priority \\(priority)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"âœ… After (1.1):","type":"text"}]},{"code":["catch let error as LockmanPriorityBasedError {","    switch error {","    case .precedingActionCancelled(let actionName, let priority, let lockmanInfo, let boundaryId):","        print(\"Cancelled \\(actionName) with priority \\(priority)\")","        print(\"Full action info: \\(lockmanInfo.actionName)\")","        print(\"Boundary: \\(boundaryId)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Benefits of upgrading","anchor":"Benefits-of-upgrading"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Prevents resource leaks"}],"type":"strong"},{"text":": Immediate unlock ensures locks are released as soon as actions are cancelled","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Better debugging","type":"text"}],"type":"strong"},{"text":": Enhanced error information provides complete context about cancelled actions","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Type safety"}]},{"type":"text","text":": The new protocol ensures compile-time safety when accessing cancellation information"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Improved performance"}]},{"text":": Eliminates false lock conflicts caused by delayed unlock operations","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"level":2,"type":"heading","text":"Complete example","anchor":"Complete-example"},{"type":"paragraph","inlineContent":[{"text":"Hereâ€™s a complete example showing how to migrate error handling code:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"ðŸš« Before (1.0):","type":"text"}]},{"code":[".withLock(","    operation: { send in","        \/\/ Long-running operation","    },","    action: action,","    boundaryId: CancelID.operation,","    lockFailure: { error, send in","        if let cancellationError = error as? LockmanCancellationError,","           case .precedingActionCancelled = cancellationError.reason as? LockmanPriorityBasedError {","            await send(.showMessage(\"Previous action was cancelled\"))","        }","    }",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ… After (1.1):"}]},{"code":[".withLock(","    operation: { send in","        \/\/ Long-running operation","    },","    action: action,","    boundaryId: CancelID.operation,","    lockFailure: { error, send in","        if let cancellationError = error as? LockmanCancellationError,","           case .precedingActionCancelled(_, _, let lockmanInfo, let boundaryId) = cancellationError.reason as? LockmanPriorityBasedError {","            await send(.showMessage(\"Cancelled '\\(lockmanInfo.actionName)' at '\\(boundaryId)'\"))","        }","    }",")"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Summary","anchor":"Summary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman 1.1 is a minor version update that includes breaking changes to improve resource management and type safety. While these changes require some code updates, they provide significant benefits in preventing resource leaks and improving debugging capabilities."}]},{"type":"paragraph","inlineContent":[{"text":"The immediate unlock functionality works transparently, ensuring your applicationâ€™s locks are properly managed without any additional code changes.","type":"text"}]}]}],"references":{"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"}}}