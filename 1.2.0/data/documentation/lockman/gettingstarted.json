{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/gettingstarted"]}],"metadata":{"role":"article","roleHeading":"Article","title":"Getting Started","modules":[{"name":"Lockman"}]},"sections":[],"abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"article","identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"generated":true,"anchor":"Essentials","title":"Essentials"}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature."}],"type":"paragraph"},{"level":2,"text":"Adding Lockman as a dependency","anchor":"Adding-Lockman-as-a-dependency","type":"heading"},{"inlineContent":[{"text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" file:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"x.x.x\")","]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And add "},{"type":"codeVoice","code":"Lockman"},{"type":"text","text":" as a dependency of your package’s target:"}],"type":"paragraph"},{"syntax":"swift","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"type":"codeListing"},{"level":2,"text":"Writing your first feature","anchor":"Writing-your-first-feature","type":"heading"},{"inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"isActive":true,"overridingTitleInlineContent":[{"code":"@LockmanSingleExecution","type":"codeVoice"}],"overridingTitle":"@LockmanSingleExecution","type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},{"type":"text","text":" macro."}],"type":"paragraph"},{"level":3,"text":"Step 1: Define the Reducer","anchor":"Step-1-Define-the-Reducer","type":"heading"},{"inlineContent":[{"text":"First, define the basic Reducer structure:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"],"type":"codeListing"},{"text":"Step 2: Define State and Action","anchor":"Step-2-Define-State-and-Action","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Define the State to manage the processing status and the available actions:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    enum Action: ViewAction {","        case view(View)","        case internal(Internal)","        ","        @LockmanSingleExecution","        enum View {","            case startProcessButtonTapped","            ","            var lockmanInfo: LockmanSingleExecutionInfo {","                return .init(actionId: actionName, mode: .boundary)","            }","        }","        ","        enum Internal {","            case processStart","            case processCompleted","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Key points:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"This example uses TCA’s ViewAction pattern, where view-related actions are nested under the "},{"type":"codeVoice","code":"view"},{"type":"text","text":" case"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","isActive":true,"overridingTitle":"@LockmanSingleExecution","type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}]},{"type":"text","text":" macro to the nested View enum makes it conform to the "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"},{"type":"text","text":" protocol"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property defines how each action is controlled for locking:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Action identification: Provides the action identifier within the lock management system"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies"}]}]}]}]}]},{"text":"Step 3: Define CancelID","anchor":"Step-3-Define-CancelID","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Define a "},{"code":"CancelID","type":"codeVoice"},{"type":"text","text":" to use as the cancellation identifier for Effects:"}],"type":"paragraph"},{"code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"CancelID"},{"type":"text","text":" is used for Effect cancellation and lock boundary identification."}],"type":"paragraph"},{"anchor":"Step-4-Implement-the-Reducer-body","text":"Step 4: Implement the Reducer body","level":3,"type":"heading"},{"inlineContent":[{"text":"Implement processing with exclusive control using the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true,"type":"reference","overridingTitle":"Reducer.lock","overridingTitleInlineContent":[{"type":"codeVoice","code":"Reducer.lock"}]},{"text":" modifier:","type":"text"}],"type":"paragraph"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .run { send in","                await send(.processStart)","                \/\/ Simulate heavy processing","                try await Task.sleep(nanoseconds: 3_000_000_000)","                await send(.processCompleted)","            }","            .cancellable(id: CancelID.userAction)","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","    .lock(","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            if error is LockmanSingleExecutionCancellationError {","                await send(.internal(.updateMessage(\"Processing is already in progress\")))","            }","        },","        for: \\.view","    )","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Key points about the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"Reducer.lock"}],"overridingTitle":"Reducer.lock"},{"type":"text","text":" modifier:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Automatically applies lock management to all actions that implement ","type":"text"},{"code":"LockmanAction","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"text":": Specifies the identifier for Effect cancellation and lock boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"lockFailure","type":"codeVoice"},{"type":"text","text":": Common handler for lock acquisition failures across all actions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"for"},{"type":"text","text":": Case paths to check for nested LockmanAction conformance (in this example, "},{"type":"codeVoice","code":"\\.view"},{"type":"text","text":" checks actions nested in the view case)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Effects from non-LockmanAction actions pass through unchanged"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"With this implementation, the ","type":"text"},{"type":"codeVoice","code":"startProcessButtonTapped"},{"text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times.","type":"text"}],"type":"paragraph"},{"anchor":"Alternative-APIs","text":"Alternative APIs","level":2,"type":"heading"},{"anchor":"Using-Effectlock-Method-Chain","text":"Using Effect.lock() Method Chain","level":3,"type":"heading"},{"inlineContent":[{"text":"For individual effects that need locking, you can use the method chain API:","type":"text"}],"type":"paragraph"},{"code":["case .startProcessButtonTapped:","    return .run { send in","        await send(.processStart)","        try await Task.sleep(nanoseconds: 3_000_000_000)","        await send(.processCompleted)","    }","    .cancellable(id: CancelID.userAction)","    .lock(","        action: action,","        boundaryId: CancelID.userAction,","        lockFailure: { error, send in","            \/\/ Handler for lock acquisition failure","            await send(.lockFailed)","        }","    )"],"syntax":"swift","type":"codeListing"},{"anchor":"Using-withLock-for-Fine-Grained-Control","text":"Using withLock for Fine-Grained Control","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"When you need more control over lock lifecycle or want to handle errors differently:"}],"type":"paragraph"},{"code":["case .startProcessButtonTapped:","    return .withLock(","        operation: { send in","            await send(.processStart)","            \/\/ Simulate heavy processing","            try await Task.sleep(nanoseconds: 3_000_000_000)","            await send(.processCompleted)","        },","        catch handler: { error, send in","            \/\/ Handle errors during operation","            await send(.processError(error.localizedDescription))","        },","        lockFailure: { error, send in","            \/\/ When processing is already in progress","            state.message = \"Processing is already in progress\"","        },","        action: action,","        boundaryId: CancelID.userAction","    )"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This approach provides:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Separate error handlers for operation errors and lock failures","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manual unlock control option","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"More detailed configuration options","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","title":"Debugging Guide","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","url":"\/documentation\/lockman\/boundaryoverview","title":"Boundary","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}]},"doc://Lockman/documentation/Lockman/Configuration":{"type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","role":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"url":"\/documentation\/lockman\/configuration","kind":"article"},"doc://Lockman/documentation/Lockman/Unlock":{"url":"\/documentation\/lockman\/unlock","role":"article","kind":"article","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","type":"topic","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","title":"Lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","role":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/lock","kind":"article"}}}