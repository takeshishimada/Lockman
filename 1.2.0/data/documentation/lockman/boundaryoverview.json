{"sections":[],"metadata":{"role":"article","roleHeading":"Article","title":"Boundary","modules":[{"name":"Lockman"}]},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"anchor":"Essentials","title":"Essentials","generated":true}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A Boundary is the ","type":"text"},{"type":"strong","inlineContent":[{"text":"exclusive control boundary","type":"text"}]},{"text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution.","type":"text"}]},{"syntax":"swift","code":["\/\/ Specify CancelID as boundary with Reducer.lock","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.userAction,  \/\/ This CancelID functions as a Boundary","        lockFailure: { error, send in","            \/\/ Processing when already running within the same boundary","        }","    )","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Using CancelID as a boundary provides the following benefits:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Natural integration with TCA"}]},{"type":"text","text":" - Leverages existing TCA mechanisms"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Clear boundary definition","type":"text"}],"type":"strong"},{"text":" - CancelID clearly defines the scope of exclusive control","type":"text"}]}]}]},{"anchor":"Boundary-Specifications","level":2,"type":"heading","text":"Boundary Specifications"},{"anchor":"1-No-exclusive-control-across-boundaries","level":3,"type":"heading","text":"1. No exclusive control across boundaries"},{"type":"paragraph","inlineContent":[{"text":"Exclusive control between different Boundaries is not possible:","type":"text"}]},{"syntax":"swift","code":["\/\/ ❌ Not possible: Control save and load simultaneously with different boundaries","@Reducer","struct FeatureA {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Save logic","        }","        .lock(boundaryId: CancelID.save)  \/\/ Control only within save boundary","    }","}","","@Reducer","struct FeatureB {","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Load logic","        }","        .lock(boundaryId: CancelID.load)  \/\/ Independent from save boundary","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since these are treated as separate boundaries, load can be executed even while save is running."}]},{"anchor":"2-Only-one-Boundary-per-reducer","level":3,"type":"heading","text":"2. Only one Boundary per reducer"},{"type":"paragraph","inlineContent":[{"text":"You cannot specify multiple Boundaries for a single reducer:","type":"text"}]},{"syntax":"swift","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your logic","    }","    .lock(boundaryId: CancelID.save)","    .lock(boundaryId: CancelID.validate)  \/\/ This won't work as intended","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:"}]},{"syntax":"swift","code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","            \/\/ All actions controlled within the same boundary","            return .run { send in","                \/\/ Your async operation","            }","        }","    }","    .lock(boundaryId: CancelID.fileOperation)","}"],"type":"codeListing"},{"anchor":"Summary","level":2,"type":"heading","text":"Summary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/lockman\/boundaryoverview"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview"},"references":{"doc://Lockman/documentation/Lockman/Unlock":{"url":"\/documentation\/lockman\/unlock","role":"article","kind":"article","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling"},"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","title":"Debugging Guide","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","type":"topic","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/Configuration":{"type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","role":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"url":"\/documentation\/lockman\/configuration","kind":"article"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","title":"Lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","role":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/lock","kind":"article"},"doc://Lockman/documentation/Lockman/GettingStarted":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","url":"\/documentation\/lockman\/gettingstarted","title":"Getting Started","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}]}}}