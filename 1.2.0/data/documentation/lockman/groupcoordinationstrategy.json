{"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/lockman\/groupcoordinationstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}],"type":"paragraph"},{"anchor":"Group-System","type":"heading","level":2,"text":"Group System"},{"anchor":"Coordination-Roles","type":"heading","level":3,"text":"Coordination Roles"},{"inlineContent":[{"inlineContent":[{"text":"none","type":"text"}],"type":"strong"},{"text":" - Non-exclusive Participant","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate regardless of group state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Auxiliary processing such as UI updates or logging"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"leader"}],"type":"strong"},{"text":" - Group Leader","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Role to start group activities","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Controls participation conditions according to entry policy","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enables member participation","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"text":" - Group Member","type":"text"}],"type":"paragraph"},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate in active groups"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes when leader or other participants are present"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Responsible for coordinated processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Leader-Entry-Policy","level":3,"text":"Leader Entry Policy","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"emptyGroup","type":"text"}]},{"type":"text","text":" - Start only in empty group"}],"type":"paragraph"},{"code":[".leader(.emptyGroup)"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Starts new activity cycle"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Most strict control"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutMembers"}]},{"type":"text","text":" - Start without members"}],"type":"paragraph"},{"code":[".leader(.withoutMembers)"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate when no members are present","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Other leaders are allowed"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables coordination between leaders"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"withoutLeader"}],"type":"strong"},{"text":" - Start without leader","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":[".leader(.withoutLeader)"]},{"items":[{"content":[{"inlineContent":[{"text":"Can participate when no other leaders are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Members are allowed"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Usage","anchor":"Usage"},{"level":3,"type":"heading","text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"]},{"level":3,"type":"heading","text":"Coordination with Multiple Groups","anchor":"Coordination-with-Multiple-Groups"},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"level":2,"type":"heading","text":"Operation Examples","anchor":"Operation-Examples"},{"level":3,"type":"heading","text":"Leader-Member Coordination","anchor":"Leader-Member-Coordination"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"]},{"level":3,"type":"heading","text":"Entry Policy Differences","anchor":"Entry-Policy-Differences"},{"type":"codeListing","syntax":null,"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"]},{"level":2,"type":"heading","text":"Error Handling","anchor":"Error-Handling"},{"inlineContent":[{"text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"type":"reference","isActive":true,"overridingTitle":"Error Handling","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}]},{"text":" page.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"LockmanGroupCoordinationCancellationError","anchor":"LockmanGroupCoordinationCancellationError"},{"inlineContent":[{"text":"This error conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanCancellationError"},{"text":" protocol and provides:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"cancelledInfo"},{"type":"text","text":": Information about the cancelled action"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"reason"},{"text":": Specific reason for cancellation","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"CancellationReason cases:"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"actionAlreadyInGroup","type":"text"}]},{"text":" - Action already in group","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .actionAlreadyInGroup(let existingInfo, let groupIds) = groupError.reason {","        await send(.alreadyActive(\"Process is already running\"))","    }","}"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}]},{"type":"text","text":" - Leader cannot join non-empty group"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .leaderCannotJoinNonEmptyGroup(let groupIds) = groupError.reason {","        await send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}]},{"type":"text","text":" - Member cannot join empty group"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .memberCannotJoinEmptyGroup(let groupIds) = groupError.reason {","        await send(.noActiveGroup(\"No active group\"))","    }","}"]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"blockedByExclusiveLeader","type":"text"}]},{"type":"text","text":" - Blocked by exclusive leader"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    if let groupError = error as? LockmanGroupCoordinationCancellationError,","       case .blockedByExclusiveLeader(let leaderInfo, let groupId, let entryPolicy) = groupError.reason {","        await send(.blockedByLeader(\"Blocked by exclusive leader: \\(leaderInfo.actionId)\"))","    }","}"]}],"kind":"content"}],"metadata":{"modules":[{"name":"Lockman"}],"title":"GroupCoordinationStrategy","roleHeading":"Article","role":"article"},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"sections":[],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"title":"CompositeStrategy","type":"topic","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","type":"topic","title":"DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"role":"article","title":"ConcurrencyLimitedStrategy","kind":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","title":"PriorityBasedStrategy"}}}