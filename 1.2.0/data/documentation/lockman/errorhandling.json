{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"metadata":{"title":"Error Handling","roleHeading":"Article","role":"article","modules":[{"name":"Lockman"}]},"abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Lockman provides detailed error information according to each strategy. This page explains error handling patterns common to all strategies and how to implement effective error handling."}],"type":"paragraph"},{"text":"Common Error Handling Patterns","anchor":"Common-Error-Handling-Patterns","type":"heading","level":2},{"text":"lockFailure Handler with Reducer.lock()","anchor":"lockFailure-Handler-with-Reducerlock","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Basic lockFailure handler structure used in all strategies:"}],"type":"paragraph"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        \/\/ Your reducer logic","    }","    .lock(","        boundaryId: CancelID.feature,","        lockFailure: { error, send in","            \/\/ Centralized error handling for all locked actions","            switch error {","            case let singleExecError as LockmanSingleExecutionCancellationError:","                await send(.showBusyMessage(\"Process already running\"))","            case let priorityError as LockmanPriorityBasedBlockedError:","                await send(.showMessage(\"Higher priority task is running\"))","            case let priorityError as LockmanPriorityBasedCancellationError:","                await send(.showMessage(\"Action was preempted\"))","            default:","                await send(.showMessage(\"Cannot start process\"))","            }","        }","    )","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"Benefits of centralized error handling:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Consistent error handling across all actions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Single place to update error messages","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Easier to maintain and test","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"Parameters:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"error","type":"codeVoice"},{"text":": The error that occurred (strategy-specific error type)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"send","type":"codeVoice"},{"type":"text","text":": Function for sending feedback to the user"}]}]}],"type":"unorderedList"},{"text":"catch handler Pattern","type":"heading","anchor":"catch-handler-Pattern","level":3},{"inlineContent":[{"type":"text","text":"Handling general errors that occur during processing:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ With Effect.lock() or individual effects","return .run { send in","    try await performOperation()","    await send(.operationCompleted)","}",".catch { error, send in","    await send(.operationError(error.localizedDescription))","}",".lock(action: action, boundaryId: CancelID.feature)"]},{"inlineContent":[{"type":"text","text":"This handler catches errors thrown within the operation and appropriately notifies the user."}],"type":"paragraph"},{"text":"Types of Errors and Solutions","type":"heading","anchor":"Types-of-Errors-and-Solutions","level":2},{"text":"1. Lock Acquisition Failure (Already Locked)","type":"heading","anchor":"1-Lock-Acquisition-Failure-Already-Locked","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Concept","type":"text"}]},{"type":"text","text":": Occurs when the same processing or boundary is already running"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Notify user that processing is in progress","    await send(.showMessage(\"Processing is in progress\"))","    ","    \/\/ Or provide visual feedback in UI","    await send(.setButtonState(.loading))","}"]},{"text":"2. Permission\/Priority Conflicts","type":"heading","anchor":"2-PermissionPriority-Conflicts","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"text":": Occurs due to higher priority processing or group rule constraints","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Common solutions"}],"type":"strong"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    \/\/ Understand the situation from errors containing detailed information","    if let conflictInfo = extractConflictInfo(from: error) {","        await send(.showMessage(\"Another important process is running: \\(conflictInfo.description)\"))","    }","}"]},{"text":"3. Cancellation Notification","type":"heading","anchor":"3-Cancellation-Notification","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concept"}],"type":"strong"},{"type":"text","text":": When existing processing is cancelled by higher priority processing"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Common solutions","type":"text"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["catch handler: { error, send in","    if error is CancellationError {","        await send(.processCancelled(\"Interrupted by a more important process\"))","    } else {","        await send(.processError(error.localizedDescription))","    }","}"]},{"text":"Best Practices","type":"heading","anchor":"Best-Practices","level":2},{"text":"1. Proper Error Type Casting","type":"heading","anchor":"1-Proper-Error-Type-Casting","level":3},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Good example: Cast to strategy-specific error type","if let singleError = error as? LockmanSingleExecutionCancellationError,","   case .actionAlreadyRunning(let existingInfo) = singleError.reason {","    \/\/ Use existingInfo to provide detailed information","}","","\/\/ ❌ Bad example: Treat error as string","send(.showError(error.localizedDescription))"]},{"text":"2. User-Friendly Messages","type":"heading","anchor":"2-User-Friendly-Messages","level":3},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ Good example: Specific and easy to understand message","await send(.showMessage(\"Saving data. Please wait a moment.\"))","","\/\/ ❌ Bad example: Technical error message","await send(.showMessage(\"LockmanError: boundary locked\"))"]},{"text":"3. Utilizing Additional Information","type":"heading","anchor":"3-Utilizing-Additional-Information","level":3},{"inlineContent":[{"text":"Many errors contain additional information:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ In Reducer.lock()",".lock(","    boundaryId: CancelID.feature,","    lockFailure: { error, send in","        if let concurrencyError = error as? LockmanConcurrencyLimitedCancellationError {","            let limit = concurrencyError.cancelledInfo.limit","            let current = concurrencyError.currentCount","            await send(.showMessage(\"Concurrent execution limit reached: \\(current)\/\\(limit)\"))","        } else {","            await send(.showMessage(\"Cannot start processing\"))","        }","    }",")"]},{"text":"Strategy-Specific Errors","type":"heading","anchor":"Strategy-Specific-Errors","level":2},{"inlineContent":[{"type":"text","text":"All strategy errors now conform to "},{"type":"codeVoice","code":"LockmanCancellationError"},{"type":"text","text":" protocol, providing consistent access to:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"text":": Information about the cancelled action","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": Where the cancellation occurred","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"errorDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"failureReason"},{"type":"text","text":": Localized error descriptions"}]}]}],"type":"unorderedList"},{"text":"Error Types by Strategy:","type":"heading","anchor":"Error-Types-by-Strategy","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SingleExecutionStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanSingleExecutionCancellationError"},{"type":"text","text":" - Duplicate execution prevention"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"PriorityBasedStrategy"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"LockmanPriorityBasedBlockedError","type":"codeVoice"},{"text":" - New action blocked by priority","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"LockmanPriorityBasedCancellationError","type":"codeVoice"},{"text":" - Existing action cancelled by preemption","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"LockmanGroupCoordinationCancellationError"},{"type":"text","text":" - Group rule violations"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"ConcurrencyLimitedStrategy"}],"type":"strong"},{"text":": ","type":"text"},{"code":"LockmanConcurrencyLimitedCancellationError","type":"codeVoice"},{"text":" - Concurrent execution limit exceeded","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","isActive":true,"overridingTitle":"DynamicConditionStrategy","overridingTitleInlineContent":[{"type":"text","text":"DynamicConditionStrategy"}]},{"type":"text","text":" - Condition mismatch errors"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","overridingTitle":"CompositeStrategy","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"CompositeStrategy"}]},{"type":"text","text":" - Composite strategy errors"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/errorhandling"]}],"seeAlsoSections":[{"generated":true,"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"kind":"article","references":{"doc://Lockman/documentation/Lockman/GettingStarted":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","url":"\/documentation\/lockman\/gettingstarted","title":"Getting Started","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}]},"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"title":"CompositeStrategy","type":"topic","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/Configuration":{"type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","role":"article","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"url":"\/documentation\/lockman\/configuration","kind":"article"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","url":"\/documentation\/lockman\/boundaryoverview","title":"Boundary","abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}]},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","title":"Debugging Guide","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"kind":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","role":"article","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","type":"topic","title":"DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"url":"\/documentation\/lockman\/choosingstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","title":"Choosing a Strategy","type":"topic","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/Unlock":{"url":"\/documentation\/lockman\/unlock","role":"article","kind":"article","type":"topic","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock"},"doc://Lockman/documentation/Lockman/Lock":{"type":"topic","title":"Lock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","role":"article","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/lock","kind":"article"}}}