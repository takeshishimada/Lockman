{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"DynamicConditionStrategy is a strategy that dynamically controls locks based on runtime state and conditions. Through condition evaluation with custom logic, it enables flexible exclusive control according to business rules."}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where complex business conditions that cannot be expressed with standard strategies or dynamic control based on application state is required.","type":"text"}]},{"type":"heading","level":2,"text":"Condition Evaluation System","anchor":"Condition-Evaluation-System"},{"type":"heading","level":3,"text":"Basic Condition Specification","anchor":"Basic-Condition-Specification"},{"type":"codeListing","syntax":"swift","code":["LockmanDynamicConditionInfo(","    actionId: \"payment\",","    condition: {","        \/\/ Custom condition logic","        guard userIsAuthenticated else {","            return .cancel(AuthenticationError.notLoggedIn)","        }","        guard accountBalance >= requiredAmount else {","            return .cancel(PaymentError.insufficientFunds)","        }","        return .success","    }",")"]},{"type":"heading","level":3,"text":"Advanced Control with Reducer.lock","anchor":"Advanced-Control-with-Reducerlock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the method chain API enables more advanced condition evaluation based on current state and action:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .makePayment(let amount):","            \/\/ Create a temporary reducer with dynamic conditions","            let tempReducer = Reduce<State, Action> { _, _ in .none }","                .lock { state, _ in","                    \/\/ Reducer-level condition","                    guard state.isAuthenticated else {","                        return .cancel(AuthenticationError.notLoggedIn)","                    }","                    return .success","                }","            ","            return tempReducer.lock(","                state: state,","                action: action,","                operation: { send in","                    try await processPayment(amount)","                    await send(.paymentCompleted)","                },","                lockAction: PaymentAction(),","                boundaryId: CancelID.payment,","                lockCondition: { state, _ in","                    \/\/ Action-level condition","                    guard state.balance >= amount else {","                        return .cancel(PaymentError.insufficientFunds(","                            required: amount,","                            available: state.balance","                        ))","                    }","                    return .success","                }","            )","        }","    }","}"]},{"type":"heading","level":2,"text":"Usage","anchor":"Usage"},{"type":"heading","level":3,"text":"Basic Usage Example","anchor":"Basic-Usage-Example"},{"code":["@LockmanDynamicCondition","enum ViewAction {","    case transfer(amount: Double)","    case withdraw(amount: Double)","    ","    var lockmanInfo: LockmanDynamicConditionInfo {","        switch self {","        case .transfer(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ Business hours check","                    guard BusinessHours.isOpen else {","                        return .cancel(BankError.outsideBusinessHours)","                    }","                    \/\/ Amount limit check","                    guard amount <= transferLimit else {","                        return .cancel(BankError.transferLimitExceeded)","                    }","                    return .success","                }","            )","        case .withdraw(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ ATM availability check","                    guard ATMService.isAvailable else {","                        return .cancel(BankError.atmUnavailable)","                    }","                    return .success","                }","            )","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Multi-Stage-Condition-Evaluation","text":"Multi-Stage Condition Evaluation","level":3,"type":"heading"},{"inlineContent":[{"text":"The method chain API provides three stages of condition evaluation:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Action-level conditions"}],"type":"strong"},{"text":": Conditions for specific operations","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Reducer-level conditions"}]},{"type":"text","text":": Overall prerequisite conditions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Traditional lock strategies"}]},{"text":": Standard exclusive control","type":"text"}]}]}],"type":"orderedList"},{"code":["var body: some ReducerOf<Self> {","    Reduce { state, action in","        switch action {","        case .criticalOperation:","            let tempReducer = Reduce<State, Action> { _, _ in .none }","                .lock { state, _ in","                    \/\/ 2. Reducer-level condition","                    guard state.maintenanceMode == false else {","                        return .cancel(SystemError.maintenanceMode)","                    }","                    return .success","                }","            ","            return tempReducer.lock(","                state: state,","                action: action,","                operation: { send in","                    try await performCriticalOperation()","                    await send(.operationCompleted)","                },","                lockAction: CriticalAction(), \/\/ 3. Traditional strategy (SingleExecution, etc.)","                boundaryId: CancelID.critical,","                lockCondition: { state, _ in","                    \/\/ 1. Action-level condition","                    guard state.systemStatus == .ready else {","                        return .cancel(SystemError.notReady)","                    }","                    return .success","                }","            )","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Operation-Examples","text":"Operation Examples","level":2,"type":"heading"},{"anchor":"Basic-Condition-Evaluation","text":"Basic Condition Evaluation","level":3,"type":"heading"},{"code":["Time: 9:00  - transfer($1000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ✅ Within limit","  Result: ✅ Execute","","Time: 18:00 - transfer($1000) request  ","  Condition 1: Business hours check → ❌ Outside hours","  Result: ❌ Reject (BankError.outsideBusinessHours)","","Time: 10:00 - transfer($50000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ❌ Exceeds limit","  Result: ❌ Reject (BankError.transferLimitExceeded)"],"syntax":null,"type":"codeListing"},{"anchor":"Multi-Stage-Evaluation-Operation","text":"Multi-Stage Evaluation Operation","level":3,"type":"heading"},{"code":["criticalOperation request:","","Step 1: Reducer-level condition","  maintenanceMode == false → ✅ Pass","","Step 2: Action-level condition  ","  systemStatus == .ready → ✅ Pass","","Step 3: Traditional strategy (e.g., SingleExecution)","  Duplicate execution check → ✅ Pass","","Result: ✅ All stages passed, start execution"],"syntax":null,"type":"codeListing"},{"type":"heading","anchor":"Error-Handling","level":2,"text":"Error Handling"},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with DynamicConditionStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","isActive":true,"overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}],"type":"reference"},{"text":" page.","type":"text"}]},{"type":"heading","anchor":"Utilizing-Custom-Errors","level":3,"text":"Utilizing Custom Errors"},{"type":"codeListing","syntax":"swift","code":["enum BusinessError: Error {","    case insufficientFunds(required: Double, available: Double)","    case dailyLimitExceeded(limit: Double)","    case accountSuspended(reason: String)","    case outsideBusinessHours","}","","lockFailure: { error, send in","    switch error as? BusinessError {","    case .insufficientFunds(let required, let available):","        await send(.showError(\"Insufficient funds: Required ¥\\(required), Available ¥\\(available)\"))","        ","    case .dailyLimitExceeded(let limit):","        await send(.showError(\"Daily limit of ¥\\(limit) exceeded\"))","        ","    case .accountSuspended(let reason):","        await send(.showError(\"Account suspended: \\(reason)\"))","        ","    case .outsideBusinessHours:","        await send(.showError(\"Outside business hours (Weekdays 9:00-17:00)\"))","        ","    default:","        await send(.showError(\"Cannot perform operation\"))","    }","}"]}],"kind":"content"}],"sections":[],"metadata":{"roleHeading":"Article","role":"article","title":"DynamicConditionStrategy","modules":[{"name":"Lockman"}]},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"seeAlsoSections":[{"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/dynamicconditionstrategy"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"role":"article","title":"ConcurrencyLimitedStrategy","kind":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","type":"topic","abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"title":"CompositeStrategy","type":"topic","url":"\/documentation\/lockman\/compositestrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","title":"PriorityBasedStrategy"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"kind":"article","url":"\/documentation\/lockman\/groupcoordinationstrategy","role":"article","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","type":"topic","title":"GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"type":"topic","url":"\/documentation\/lockman\/errorhandling","title":"Error Handling"},"doc://Lockman/documentation/Lockman":{"abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"title":"Lockman","url":"\/documentation\/lockman","role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","type":"topic","kind":"symbol"}}}