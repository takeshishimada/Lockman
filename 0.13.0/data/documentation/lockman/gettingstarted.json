{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted"},"sections":[],"abstract":[{"text":"Learn how to integrate Lockman into your TCA application.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will teach you how to integrate Lockman into your The Composable Architecture (TCA) project and implement your first feature."}]},{"text":"Adding Lockman as a dependency","level":2,"type":"heading","anchor":"Adding-Lockman-as-a-dependency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Lockman in a Swift Package Manager project, add it to the dependencies in your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file:"}]},{"type":"codeListing","code":["dependencies: [","  .package(url: \"https:\/\/github.com\/takeshishimada\/Lockman\", from: \"0.12.0\")","]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And add "},{"type":"codeVoice","code":"Lockman"},{"type":"text","text":" as a dependency of your package’s target:"}]},{"type":"codeListing","code":[".target(","  name: \"YourTarget\",","  dependencies: [","    \"Lockman\",","    .product(name: \"ComposableArchitecture\", package: \"swift-composable-architecture\")","  ]",")"],"syntax":"swift"},{"text":"Writing your first feature","level":2,"type":"heading","anchor":"Writing-your-first-feature"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement a feature that prevents duplicate execution of processes using the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","isActive":true,"overridingTitle":"@LockmanSingleExecution","type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}]},{"type":"text","text":" macro."}]},{"text":"Step 1: Define the Reducer","level":3,"type":"heading","anchor":"Step-1-Define-the-Reducer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, define the basic Reducer structure:"}]},{"type":"codeListing","syntax":"swift","code":["import ComposableArchitecture","import Lockman","","@Reducer","struct ProcessFeature {","}"]},{"text":"Step 2: Define State and Action","type":"heading","level":3,"anchor":"Step-2-Define-State-and-Action"},{"inlineContent":[{"type":"text","text":"Define the State to manage the processing status and the available actions:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ProcessFeature {","    @ObservableState","    struct State: Equatable {","        var isProcessing = false","        var message = \"\"","    }","    ","    enum Action: ViewAction {","        case view(View)","        case internal(Internal)","        ","        @LockmanSingleExecution","        enum View {","            case startProcessButtonTapped","            ","            var lockmanInfo: LockmanSingleExecutionInfo {","                return .init(actionId: actionName, mode: .boundary)","            }","        }","        ","        enum Internal {","            case processStart","            case processCompleted","        }","    }","}"]},{"inlineContent":[{"text":"Key points:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@LockmanSingleExecution"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"reference","isActive":true,"overridingTitle":"@LockmanSingleExecution"},{"type":"text","text":" macro to the Action enum makes it conform to the "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"},{"type":"text","text":" protocol"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"lockmanInfo"},{"type":"text","text":" property defines how each action is controlled for locking:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Control parameter configuration: Specifies strategy-specific behavior settings (priority, concurrency limits, group coordination rules, etc.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Action identification: Provides the action identifier within the lock management system"}]}]},{"content":[{"inlineContent":[{"text":"Inter-strategy coordination: Defines parameters to pass to each strategy when using composite strategies","type":"text"}],"type":"paragraph"}]}]}]}]},{"text":"Step 3: Define CancelID","type":"heading","level":3,"anchor":"Step-3-Define-CancelID"},{"inlineContent":[{"text":"Define a ","type":"text"},{"code":"CancelID","type":"codeVoice"},{"text":" to use as the cancellation identifier for Effects:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension ProcessFeature {","    enum CancelID {","        case userAction","    }","}"]},{"inlineContent":[{"code":"CancelID","type":"codeVoice"},{"text":" is used for Effect cancellation and lock boundary identification.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Step-4-Implement-the-Reducer-body","text":"Step 4: Implement the Reducer body","level":3},{"type":"paragraph","inlineContent":[{"text":"Implement processing with exclusive control using the ","type":"text"},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true,"overridingTitleInlineContent":[{"code":"withLock","type":"codeVoice"}],"type":"reference","overridingTitle":"withLock"},{"text":" method:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","    Reduce { state, action in","        switch action {","        case .startProcessButtonTapped:","            return .withLock(","                operation: { send in","                    await send(.processStart)","                    \/\/ Simulate heavy processing","                    try await Task.sleep(nanoseconds: 3_000_000_000)","                    await send(.processCompleted)","                },","                lockFailure: { error, send in","                    \/\/ When processing is already in progress","                    state.message = \"Processing is already in progress\"","                },","                action: action,","                cancelID: CancelID.userAction","            )","            ","        case .processStart:","            state.isProcessing = true","            state.message = \"Processing started...\"","            return .none","            ","        case .processCompleted:","            state.isProcessing = false","            state.message = \"Processing completed\"","            return .none","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Key points about the ","type":"text"},{"overridingTitleInlineContent":[{"code":"withLock","type":"codeVoice"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","isActive":true,"overridingTitle":"withLock","type":"reference"},{"text":" method:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"operation"},{"text":": Defines the processing to be executed under exclusive control","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockFailure"},{"type":"text","text":": Handler called when the same processing is already in progress"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"action","type":"codeVoice"},{"type":"text","text":": Passes the currently processing action"}]}]},{"content":[{"inlineContent":[{"code":"cancelID","type":"codeVoice"},{"type":"text","text":": Specifies the identifier for Effect cancellation and lock boundary"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"With this implementation, the ","type":"text"},{"type":"codeVoice","code":"startProcessButtonTapped"},{"text":" action will not be executed again while processing, making it safe even if the user accidentally taps the button multiple times.","type":"text"}]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/lockman\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"anchor":"Essentials"}],"metadata":{"modules":[{"name":"Lockman"}],"title":"Getting Started","role":"article","roleHeading":"Article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"},"doc://Lockman/documentation/Lockman/BoundaryOverview":{"type":"topic","kind":"article","title":"Boundary","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","abstract":[{"text":"Understand the concept of boundaries in Lockman.","type":"text"}],"url":"\/documentation\/lockman\/boundaryoverview","role":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","title":"Error Handling","type":"topic","role":"article","kind":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/Configuration":{"type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"title":"Choosing a Strategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","kind":"article","url":"\/documentation\/lockman\/choosingstrategy","role":"article","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"type":"topic"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","url":"\/documentation\/lockman\/unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/Lock":{"kind":"article","role":"article","type":"topic","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","url":"\/documentation\/lockman\/lock"}}}