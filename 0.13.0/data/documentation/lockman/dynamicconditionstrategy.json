{"abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"sections":[],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/dynamicconditionstrategy"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"DynamicConditionStrategy is a strategy that dynamically controls locks based on runtime state and conditions. Through condition evaluation with custom logic, it enables flexible exclusive control according to business rules."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in situations where complex business conditions that cannot be expressed with standard strategies or dynamic control based on application state is required."}]},{"type":"heading","level":2,"anchor":"Condition-Evaluation-System","text":"Condition Evaluation System"},{"type":"heading","level":3,"anchor":"Basic-Condition-Specification","text":"Basic Condition Specification"},{"syntax":"swift","type":"codeListing","code":["LockmanDynamicConditionInfo(","    actionId: \"payment\",","    condition: {","        \/\/ Custom condition logic","        guard userIsAuthenticated else {","            return .failure(AuthenticationError.notLoggedIn)","        }","        guard accountBalance >= requiredAmount else {","            return .failure(PaymentError.insufficientFunds)","        }","        return .success","    }",")"]},{"type":"heading","level":3,"anchor":"Advanced-Control-with-ReduceWithLock","text":"Advanced Control with ReduceWithLock"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using ReduceWithLock enables more advanced condition evaluation based on current state and action:"}]},{"syntax":"swift","type":"codeListing","code":["ReduceWithLock { state, action in","    switch action {","    case .makePayment(let amount):","        return self.withLock(","            state: state,","            action: action,","            operation: { send in","                try await processPayment(amount)","                send(.paymentCompleted)","            },","            lockAction: PaymentAction.makePayment,","            cancelID: CancelID.payment,","            lockCondition: { state, action in","                \/\/ Action-level condition","                guard state.balance >= amount else {","                    return .failure(PaymentError.insufficientFunds(","                        required: amount, ","                        available: state.balance","                    ))","                }","                return .success","            }","        )","    }","} lockCondition: { state, _ in","    \/\/ Reducer-level condition","    guard state.isAuthenticated else {","        return .failure(AuthenticationError.notLoggedIn)","    }","    return .success","}"]},{"type":"heading","level":2,"anchor":"Usage","text":"Usage"},{"type":"heading","level":3,"anchor":"Basic-Usage-Example","text":"Basic Usage Example"},{"syntax":"swift","type":"codeListing","code":["@LockmanDynamicCondition","enum ViewAction {","    case transfer(amount: Double)","    case withdraw(amount: Double)","    ","    var lockmanInfo: LockmanDynamicConditionInfo {","        switch self {","        case .transfer(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ Business hours check","                    guard BusinessHours.isOpen else {","                        return .failure(BankError.outsideBusinessHours)","                    }","                    \/\/ Amount limit check","                    guard amount <= transferLimit else {","                        return .failure(BankError.transferLimitExceeded)","                    }","                    return .success","                }","            )","        case .withdraw(let amount):","            return LockmanDynamicConditionInfo(","                actionId: actionName,","                condition: {","                    \/\/ ATM availability check","                    guard ATMService.isAvailable else {","                        return .failure(BankError.atmUnavailable)","                    }","                    return .success","                }","            )","        }","    }","}"]},{"type":"heading","level":3,"anchor":"Multi-Stage-Condition-Evaluation","text":"Multi-Stage Condition Evaluation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ReduceWithLock provides three stages of condition evaluation:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Action-level conditions"}]},{"text":": Conditions for specific operations","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Reducer-level conditions","type":"text"}]},{"type":"text","text":": Overall prerequisite conditions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Traditional lock strategies","type":"text"}]},{"type":"text","text":": Standard exclusive control"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["ReduceWithLock { state, action in","    switch action {","    case .criticalOperation:","        return self.withLock(","            state: state,","            action: action,","            operation: { send in","                try await performCriticalOperation()","                send(.operationCompleted)","            },","            lockAction: CriticalAction.execute, \/\/ 3. Traditional strategy (SingleExecution, etc.)","            cancelID: CancelID.critical,","            lockCondition: { state, _ in","                \/\/ 1. Action-level condition","                guard state.systemStatus == .ready else {","                    return .failure(SystemError.notReady)","                }","                return .success","            }","        )","    }","} lockCondition: { state, _ in","    \/\/ 2. Reducer-level condition","    guard state.maintenanceMode == false else {","        return .failure(SystemError.maintenanceMode)","    }","    return .success","}"]},{"type":"heading","level":2,"anchor":"Operation-Examples","text":"Operation Examples"},{"type":"heading","level":3,"anchor":"Basic-Condition-Evaluation","text":"Basic Condition Evaluation"},{"syntax":null,"type":"codeListing","code":["Time: 9:00  - transfer($1000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ✅ Within limit","  Result: ✅ Execute","","Time: 18:00 - transfer($1000) request  ","  Condition 1: Business hours check → ❌ Outside hours","  Result: ❌ Reject (BankError.outsideBusinessHours)","","Time: 10:00 - transfer($50000) request","  Condition 1: Business hours check → ✅ Open","  Condition 2: Amount limit check → ❌ Exceeds limit","  Result: ❌ Reject (BankError.transferLimitExceeded)"]},{"type":"heading","level":3,"anchor":"Multi-Stage-Evaluation-Operation","text":"Multi-Stage Evaluation Operation"},{"syntax":null,"type":"codeListing","code":["criticalOperation request:","","Step 1: Reducer-level condition","  maintenanceMode == false → ✅ Pass","","Step 2: Action-level condition  ","  systemStatus == .ready → ✅ Pass","","Step 3: Traditional strategy (e.g., SingleExecution)","  Duplicate execution check → ✅ Pass","","Result: ✅ All stages passed, start execution"]},{"type":"heading","level":2,"anchor":"Error-Handling","text":"Error Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For errors that may occur with DynamicConditionStrategy and their solutions, please also refer to the common patterns on the "},{"isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"overridingTitle":"Error Handling"},{"type":"text","text":" page."}]},{"type":"heading","level":3,"anchor":"Utilizing-Custom-Errors","text":"Utilizing Custom Errors"},{"syntax":"swift","type":"codeListing","code":["enum BusinessError: Error {","    case insufficientFunds(required: Double, available: Double)","    case dailyLimitExceeded(limit: Double)","    case accountSuspended(reason: String)","    case outsideBusinessHours","}","","lockFailure: { error, send in","    switch error as? BusinessError {","    case .insufficientFunds(let required, let available):","        send(.showError(\"Insufficient funds: Required ¥\\(required), Available ¥\\(available)\"))","        ","    case .dailyLimitExceeded(let limit):","        send(.showError(\"Daily limit of ¥\\(limit) exceeded\"))","        ","    case .accountSuspended(let reason):","        send(.showError(\"Account suspended: \\(reason)\"))","        ","    case .outsideBusinessHours:","        send(.showError(\"Outside business hours (Weekdays 9:00-17:00)\"))","        ","    default:","        send(.showError(\"Cannot perform operation\"))","    }","}"]}],"kind":"content"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Lockman"}],"title":"DynamicConditionStrategy","role":"article"},"references":{"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"title":"PriorityBasedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}]},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","title":"Error Handling","type":"topic","role":"article","kind":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"title":"GroupCoordinationStrategy"}}}