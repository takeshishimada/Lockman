{"abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The boundary identifier for which the lock should be released","type":"text"}],"type":"paragraph"}],"name":"id"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The same lock information of type "},{"type":"codeVoice","code":"I"},{"type":"text","text":" that was used when acquiring the lock"}]}],"name":"info"}],"kind":"parameters"},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method must be called with the exact same parameters that were used","type":"text"},{"text":" ","type":"text"},{"text":"when acquiring the lock. The implementation delegates to the concrete strategy’s","type":"text"},{"text":" ","type":"text"},{"text":"unlock logic, which typically uses the lock info’s ","type":"text"},{"type":"codeVoice","code":"uniqueId"},{"text":" for precise identification.","type":"text"}]},{"level":2,"text":"Parameter Matching Requirements","type":"heading","anchor":"Parameter-Matching-Requirements"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Boundary ID"}],"type":"strong"},{"text":": Must match the ID used during lock acquisition","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Lock Info","type":"text"}]},{"text":": Must be the same instance (same ","type":"text"},{"type":"codeVoice","code":"uniqueId"},{"text":") used during acquisition","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Strategy Consistency"}]},{"type":"text","text":": Must be called on the same strategy instance that acquired the lock"}]}]}],"type":"unorderedList"},{"level":2,"text":"Error Recovery","type":"heading","anchor":"Error-Recovery"},{"type":"paragraph","inlineContent":[{"text":"If called with mismatched parameters, the concrete strategy may:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Silently ignore the unlock request (defensive programming)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Log a warning for debugging purposes","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throw an error in debug builds"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The behavior depends on the concrete strategy’s implementation.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"modules":[{"name":"Lockman"}],"externalID":"s:7Lockman03AnyA8StrategyV6unlock2id4infoyqd___xtSHRd__s8SendableRd__lF","roleHeading":"Instance Method","title":"unlock(id:info:)"},"kind":"symbol","references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"role":"symbol","title":"unlock(id:info:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","type":"topic"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"role":"symbol","title":"AnyLockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"code":"LockmanStrategy<I>","type":"codeVoice"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}]}}}