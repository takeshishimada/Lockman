{"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"},"abstract":[{"text":"Combine multiple strategies for complex control scenarios.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"CompositeStrategy is a strategy that combines multiple strategies to achieve more complex and advanced exclusive control. For complex requirements that cannot be addressed by a single strategy, you can build flexible and powerful control logic by combining 2 to 5 strategies.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is used in advanced use cases that require satisfying multiple control conditions simultaneously."}]},{"level":2,"anchor":"Combination-System","type":"heading","text":"Combination System"},{"level":3,"anchor":"Number-of-Strategy-Combinations","type":"heading","text":"Number of Strategy Combinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lockman supports combinations of 2 to 5 strategies:"}]},{"level":3,"anchor":"Combination-Control-Logic","type":"heading","text":"Combination Control Logic"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Success required in all strategies"}],"type":"strong"},{"text":":","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Success only when lock acquisition is possible in all component strategies","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If even one fails, the entire operation fails"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Coordination of preceding cancellation"}],"type":"strong"},{"text":":","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When any strategy requires preceding cancellation, execute preceding cancellation for all","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the first cancellation error found","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"LIFO (Last In, First Out) release","type":"text"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Lock release is executed in reverse order of acquisition","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Release from the last acquired lock in order"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"text":"Basic Usage Example","anchor":"Basic-Usage-Example","type":"heading","level":3},{"code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self",")","enum ViewAction {","    case criticalSave","    case normalSave","    ","    var lockmanInfo: LockmanCompositeInfo2<LockmanSingleExecutionInfo, LockmanPriorityBasedInfo> {","        LockmanCompositeInfo2(","            actionId: actionName,","            lockmanInfoForStrategy1: LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            ),","            lockmanInfoForStrategy2: LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: switch self {","                    case .criticalSave: .high(.exclusive)","                    case .normalSave: .low(.replaceable)","                }","            )","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Combining 3 Strategies","anchor":"Combining-3-Strategies","type":"heading","level":3},{"code":["@LockmanCompositeStrategy(","    LockmanSingleExecutionStrategy.self,","    LockmanPriorityBasedStrategy.self,","    LockmanConcurrencyLimitedStrategy.self",")","enum Action {","    case downloadFile","    ","    var lockmanInfo: LockmanCompositeInfo3<LockmanSingleExecutionInfo, LockmanPriorityBasedInfo, LockmanConcurrencyLimitedInfo> {","        LockmanCompositeInfo3(","            actionId: actionName,","            lockmanInfoForStrategy1: LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action \/\/ Prevent duplication","            ),","            lockmanInfoForStrategy2: LockmanPriorityBasedInfo(","                actionId: actionName,","                priority: .low(.replaceable) \/\/ Priority control","            ),","            lockmanInfoForStrategy3: LockmanConcurrencyLimitedInfo(","                actionId: actionName,","                concurrencyId: \"downloads\",","                limit: .limited(3) \/\/ Concurrent execution limit","            )","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Operation Examples","anchor":"Operation-Examples","type":"heading","level":2},{"text":"Operation with 2 Strategy Combination","anchor":"Operation-with-2-Strategy-Combination","type":"heading","level":3},{"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(varies by action)","","Time: 0s  - normalSave request (.low(.replaceable))","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Result: ✅ Start execution","","Time: 1s  - normalSave request (duplicate)","  Strategy 1: ❌ Fail (same action running)","  Strategy 2: No check (failed at strategy 1)","  Result: ❌ Overall failure","","Time: 2s  - criticalSave request (.high(.exclusive))","  Strategy 1: ✅ Success (different action)","  Strategy 2: ✅ Success (with preceding cancellation)","  Result: ✅ Start execution (cancel normalSave)"],"type":"codeListing","syntax":null},{"text":"Operation with 3 Strategy Combination","anchor":"Operation-with-3-Strategy-Combination","level":3,"type":"heading"},{"code":["Strategy 1: SingleExecution(.action)","Strategy 2: PriorityBased(.low(.replaceable))  ","Strategy 3: ConcurrencyLimited(.limited(3))","","Current situation: 3 download processes running","","Time: 0s  - New downloadFile request","  Strategy 1: ✅ Success (no duplication)","  Strategy 2: ✅ Success (no priority issue)","  Strategy 3: ❌ Fail (concurrent execution limit reached)","  Result: ❌ Overall failure"],"type":"codeListing","syntax":null},{"text":"Error Handling","anchor":"Error-Handling","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"For errors that may occur with CompositeStrategy and their solutions, please also refer to the common patterns on the "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"overridingTitle":"Error Handling","isActive":true},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"Error Handling in Composite Strategy","anchor":"Error-Handling-in-Composite-Strategy","level":3,"type":"heading"},{"inlineContent":[{"text":"In composite strategies, errors from each component strategy are integrated and reported. Since the error from the first failed strategy is returned, check the error type and handle appropriately:","type":"text"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    switch error {","    case let singleError as LockmanSingleExecutionError:","        send(.singleExecutionConflict(\"Duplicate execution detected\"))","        ","    case let priorityError as LockmanPriorityBasedError:","        send(.priorityConflict(\"Priority conflict occurred\"))","        ","    case let concurrencyError as LockmanConcurrencyLimitedError:","        send(.concurrencyLimitReached(\"Concurrent execution limit reached\"))","        ","    default:","        send(.unknownLockFailure(\"Failed to acquire lock\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Design Guidelines","anchor":"Design-Guidelines","level":2,"type":"heading"},{"text":"Strategy Selection Order","anchor":"Strategy-Selection-Order","level":3,"type":"heading"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Start with basic control","type":"text"}]},{"text":": Begin with SingleExecution","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add if priority is needed"}]},{"type":"text","text":": Combine PriorityBased"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Add if resource control is needed","type":"text"}]},{"type":"text","text":": Combine ConcurrencyLimited"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Add if coordination control is needed","type":"text"}]},{"type":"text","text":": Combine GroupCoordination"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Add if custom logic is needed"}],"type":"strong"},{"text":": Combine DynamicCondition","type":"text"}],"type":"paragraph"}]}]}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/lockman\/compositestrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"article","modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"CompositeStrategy"},"kind":"article","seeAlsoSections":[{"generated":true,"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy"]}],"references":{"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"title":"GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"title":"PriorityBasedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","type":"topic","kind":"article","title":"DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","title":"Error Handling","type":"topic","role":"article","kind":"article","url":"\/documentation\/lockman\/errorhandling"}}}