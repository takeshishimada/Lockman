{"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"],"title":"Essentials","anchor":"Essentials"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"A Boundary is the ","type":"text"},{"inlineContent":[{"text":"exclusive control boundary","type":"text"}],"type":"strong"},{"text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Specify CancelID as boundary with withLock","return .withLock(","    operation: { send in","        \/\/ Processing","    },","    lockFailure: { error, send in","        \/\/ Processing when already running within the same boundary","    },","    action: action,","    cancelID: CancelID.userAction  \/\/ This CancelID functions as a Boundary",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Using CancelID as a boundary provides the following benefits:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Natural integration with TCA","type":"text"}]},{"type":"text","text":" - Leverages existing TCA mechanisms"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Clear boundary definition"}],"type":"strong"},{"text":" - CancelID clearly defines the scope of exclusive control","type":"text"}]}]}]},{"level":2,"anchor":"Boundary-Specifications","type":"heading","text":"Boundary Specifications"},{"level":3,"anchor":"1-No-exclusive-control-across-boundaries","type":"heading","text":"1. No exclusive control across boundaries"},{"inlineContent":[{"text":"Exclusive control between different Boundaries is not possible:","type":"text"}],"type":"paragraph"},{"code":["\/\/ ❌ Not possible: Control save and load simultaneously","case .saveButtonTapped:","    \/\/ Control only within CancelID.save boundary","    return .withLock(..., cancelID: CancelID.save)","    ","case .loadButtonTapped:","    \/\/ Control only within CancelID.load boundary (independent from save)","    return .withLock(..., cancelID: CancelID.load)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Since these are treated as separate boundaries, load can be executed even while save is running."}],"type":"paragraph"},{"level":3,"anchor":"2-Only-one-Boundary-per-action","type":"heading","text":"2. Only one Boundary per action"},{"inlineContent":[{"type":"text","text":"You cannot specify multiple Boundaries for a single action:"}],"type":"paragraph"},{"code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","return .withLock(","    operation: { send in \/* ... *\/ },","    lockFailure: { error, send in \/* ... *\/ },","    action: action,","    cancelID: [CancelID.save, CancelID.validate]  \/\/ Multiple specification not allowed",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:"}],"type":"paragraph"},{"code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","    return .withLock(..., cancelID: CancelID.fileOperation)"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Summary","type":"heading","text":"Summary"},{"inlineContent":[{"text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness.","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/boundaryoverview"]}],"abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","interfaceLanguage":"swift"},"kind":"article","metadata":{"title":"Boundary","modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article"},"sections":[],"references":{"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","title":"Error Handling","type":"topic","role":"article","kind":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/Unlock":{"role":"article","url":"\/documentation\/lockman\/unlock","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","abstract":[{"text":"Understanding the unlocking mechanism in Lockman.","type":"text"}],"type":"topic","kind":"article"},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"url":"\/documentation\/lockman\/debuggingguide","abstract":[{"type":"text","text":"Learn how to debug Lockman-related issues in your application."}],"kind":"article","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","type":"topic","title":"Debugging Guide"},"doc://Lockman/documentation/Lockman/Lock":{"kind":"article","role":"article","type":"topic","abstract":[{"text":"Understanding the locking mechanism in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","title":"Lock","url":"\/documentation\/lockman\/lock"},"doc://Lockman/documentation/Lockman/Configuration":{"type":"topic","title":"Configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","url":"\/documentation\/lockman\/configuration","abstract":[{"text":"Configure Lockman for your application’s needs.","type":"text"}],"role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/GettingStarted":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"url":"\/documentation\/lockman\/gettingstarted","title":"Getting Started","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","kind":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"title":"Choosing a Strategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","kind":"article","url":"\/documentation\/lockman\/choosingstrategy","role":"article","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"type":"topic"}}}