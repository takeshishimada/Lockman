{"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"seeAlsoSections":[{"anchor":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true,"title":"Strategies"}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","role":"article","title":"SingleExecutionStrategy"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability."}]},{"type":"paragraph","inlineContent":[{"text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing.","type":"text"}]},{"type":"heading","anchor":"Execution-Modes","level":2,"text":"Execution Modes"},{"type":"paragraph","inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}]},{"type":"heading","anchor":"none-No-Control","level":3,"text":"none - No Control"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Executes all processing without exclusive control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied for behavior verification during debugging or testing"}]}]}]},{"type":"heading","anchor":"boundary-Boundary-level-Exclusive-Control","level":3,"text":"boundary - Boundary-level Exclusive Control"},{"syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied when wanting to control entire UI operations","type":"text"}]}]}]},{"anchor":"action-Action-level-Exclusive-Control","level":3,"text":"action - Action-level Exclusive Control","type":"heading"},{"code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Prevents only duplicate execution of the same action"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Different actions can execute concurrently"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Usage","level":2,"text":"Usage","type":"heading"},{"anchor":"Basic-Usage-Example","level":3,"text":"Basic Usage Example","type":"heading"},{"code":["@LockmanSingleExecution","enum ViewAction {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Usage-within-Effects","level":3,"text":"Usage within Effects","type":"heading"},{"code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            send(.saveCompleted)","        },","        catch handler: { error, send in","            send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            send(.saveBusy(\"Save process is currently running\"))","        },","        action: .save,","        cancelID: CancelID.userAction","    )"],"syntax":"swift","type":"codeListing"},{"anchor":"Operation-Examples","level":2,"text":"Operation Examples","type":"heading"},{"anchor":"action-mode","level":3,"text":"action mode","type":"heading"},{"type":"codeListing","code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"],"syntax":null},{"type":"heading","text":"boundary mode","anchor":"boundary-mode","level":3},{"type":"codeListing","code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"],"syntax":null},{"type":"heading","text":"Error Handling","anchor":"Error-Handling","level":2},{"type":"paragraph","inlineContent":[{"text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference"},{"text":" page.","type":"text"}]},{"type":"heading","text":"LockmanSingleExecutionError","anchor":"LockmanSingleExecutionError","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"boundaryAlreadyLocked"}],"type":"strong"},{"text":" - Boundary is already locked","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"boundaryId"},{"text":": ID of the locked boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"type":"text","text":": Existing lock information"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"actionAlreadyRunning","type":"text"}],"type":"strong"},{"type":"text","text":" - Same action is already running"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"text":": Running action information","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["lockFailure: { error, send in","    switch error as? LockmanSingleExecutionError {","    case .boundaryAlreadyLocked(_, let existingInfo):","        send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","    case .actionAlreadyRunning(let existingInfo):","        send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","    default:","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"],"syntax":"swift"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy"},"references":{"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","role":"article","type":"topic","url":"\/documentation\/lockman\/groupcoordinationstrategy","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"title":"GroupCoordinationStrategy"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","type":"topic","kind":"article","title":"DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article","title":"CompositeStrategy"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","title":"Error Handling","type":"topic","role":"article","kind":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"title":"PriorityBasedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}]},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"}}}