{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"metadata":{"modules":[{"name":"Lockman"}],"role":"article","title":"GroupCoordinationStrategy","roleHeading":"Article"},"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}]},{"type":"paragraph","inlineContent":[{"text":"This strategy is used in situations where multiple related processes need to work cooperatively.","type":"text"}]},{"text":"Group System","type":"heading","level":2,"anchor":"Group-System"},{"text":"Coordination Roles","type":"heading","level":3,"anchor":"Coordination-Roles"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"none","type":"text"}],"type":"strong"},{"text":" - Non-exclusive Participant","type":"text"}]},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate regardless of group state","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Does not hinder execution of other participants"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Auxiliary processing such as UI updates or logging","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leader"}]},{"type":"text","text":" - Group Leader"}]},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Role to start group activities","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enables member participation","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"member","type":"text"}]},{"text":" - Group Member","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can only participate in active groups"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Executes when leader or other participants are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Responsible for coordinated processing","type":"text"}]}]}]},{"type":"heading","anchor":"Leader-Entry-Policy","level":3,"text":"Leader Entry Policy"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"emptyGroup"}]},{"text":" - Start only in empty group","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.emptyGroup)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Starts new activity cycle","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Most strict control"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"withoutMembers","type":"text"}]},{"type":"text","text":" - Start without members"}]},{"type":"codeListing","syntax":"swift","code":[".leader(.withoutMembers)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can participate when no members are present"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Other leaders are allowed","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Enables coordination between leaders","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"withoutLeader"}]},{"type":"text","text":" - Start without leader"}],"type":"paragraph"},{"code":[".leader(.withoutLeader)"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate when no other leaders are present","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Members are allowed","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"text":"Basic Usage Example","anchor":"Basic-Usage-Example","type":"heading","level":3},{"code":["@LockmanGroupCoordination","enum ViewAction {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Coordination with Multiple Groups","anchor":"Coordination-with-Multiple-Groups","type":"heading","level":3},{"code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"],"type":"codeListing","syntax":"swift"},{"text":"Operation Examples","anchor":"Operation-Examples","type":"heading","level":2},{"text":"Leader-Member Coordination","anchor":"Leader-Member-Coordination","type":"heading","level":3},{"code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"],"type":"codeListing","syntax":null},{"text":"Entry Policy Differences","anchor":"Entry-Policy-Differences","type":"heading","level":3},{"code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"],"type":"codeListing","syntax":null},{"text":"Error Handling","anchor":"Error-Handling","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling"},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"LockmanGroupCoordinationError","anchor":"LockmanGroupCoordinationError","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}],"type":"strong"},{"type":"text","text":" - Action already in group"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if case .actionAlreadyInGroup(let existingInfo, let groupIds) = error as? LockmanGroupCoordinationError {","        send(.alreadyActive(\"Process is already running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}]},{"text":" - Leader cannot join non-empty group","type":"text"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if case .leaderCannotJoinNonEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}]},{"text":" - Member cannot join empty group","type":"text"}],"type":"paragraph"},{"code":["lockFailure: { error, send in","    if case .memberCannotJoinEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.noActiveGroup(\"No active group\"))","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"generated":true,"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"title":"PriorityBasedStrategy","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic","url":"\/documentation\/lockman\/prioritybasedstrategy","kind":"article","abstract":[{"text":"Control action execution based on priority levels.","type":"text"}]},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"type":"topic","kind":"article","title":"ConcurrencyLimitedStrategy","role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","abstract":[{"type":"text","text":"Limit the number of concurrent executions."}]},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"abstract":[{"type":"text","text":"Control actions based on runtime conditions."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","role":"article","url":"\/documentation\/lockman\/dynamicconditionstrategy","type":"topic","kind":"article","title":"DynamicConditionStrategy"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"title":"SingleExecutionStrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","role":"article","kind":"article"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"abstract":[{"text":"Learn about common error handling patterns in Lockman.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","title":"Error Handling","type":"topic","role":"article","kind":"article","url":"\/documentation\/lockman\/errorhandling"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"},"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","role":"article","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article","title":"CompositeStrategy"}}}