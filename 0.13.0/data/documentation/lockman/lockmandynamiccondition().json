{"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","text":"LockmanDynamicConditionAction","preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanDynamicConditionAction"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"actionName","type":"codeVoice"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"extractMetadata()","type":"codeVoice"},{"text":" method that extracts enum associated values as metadata","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"lockmanInfo"},{"text":" property with default condition (always success)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Default ","type":"text"},{"code":"strategyId","type":"codeVoice"},{"text":" implementation is provided by the protocol","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The macro enables you to define custom locking conditions at runtime based on:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Current state values","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Other locks in the same boundary"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Time-based conditions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Any custom logic"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example usage with TCA:"}]},{"code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            try await processTask(size: size)","            await send(.taskCompleted)","          }","        }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmandynamiccondition()"]}],"metadata":{"title":"LockmanDynamicCondition()","externalID":"s:7Lockman0A16DynamicConditionyycfm","role":"symbol","roleHeading":"Macro","symbolKind":"macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"modules":[{"name":"Lockman"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","type":"topic","navigatorTitle":[{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"title":"LockmanDynamicConditionAction","abstract":[{"text":"A protocol for actions that support dynamic condition-based locking.","type":"text"}],"role":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionaction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"identifier"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"type":"topic","title":"LockmanDynamicCondition()","abstract":[{"text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","url":"\/documentation\/lockman\/lockmandynamiccondition()","role":"symbol","kind":"symbol"},"doc://Lockman/documentation/Lockman":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"url":"\/documentation\/lockman","kind":"symbol","title":"Lockman","role":"collection","type":"topic"}}}