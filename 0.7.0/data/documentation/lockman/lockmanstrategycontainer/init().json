{"abstract":[{"text":"Creates an empty ","type":"text"},{"type":"codeVoice","code":"LockmanStrategyContainer"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategyContainer"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategyContainer\/init()"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"()"}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The container starts with no registered strategies. Strategies must be"},{"type":"text","text":" "},{"type":"text","text":"explicitly registered before they can be resolved."}]}]}],"kind":"symbol","metadata":{"title":"init()","symbolKind":"init","role":"symbol","modules":[{"name":"Lockman"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"roleHeading":"Initializer","externalID":"s:7Lockman0A17StrategyContainerCACycfc"},"variants":[{"paths":["\/documentation\/lockman\/lockmanstrategycontainer\/init()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Lockman/documentation/Lockman/LockmanStrategyContainer":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategyContainer","navigatorTitle":[{"text":"LockmanStrategyContainer","kind":"identifier"}],"type":"topic","title":"LockmanStrategyContainer","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A thread-safe, Sendable dependency injection container for registering and resolving"},{"type":"text","text":" "},{"type":"text","text":"lock strategies using type erasure and flexible identifiers."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanStrategyContainer","kind":"identifier"}],"url":"\/documentation\/lockman\/lockmanstrategycontainer"},"doc://Lockman/documentation/Lockman/LockmanStrategyContainer/init()":{"abstract":[{"type":"text","text":"Creates an empty "},{"type":"codeVoice","code":"LockmanStrategyContainer"},{"type":"text","text":"."}],"role":"symbol","url":"\/documentation\/lockman\/lockmanstrategycontainer\/init()","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategyContainer\/init()"},"Lockman.png":{"variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo","type":"image","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman":{"kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","type":"topic"}}}