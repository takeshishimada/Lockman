{"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()"},"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"metadata":{"roleHeading":"Macro","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"title":"LockmanDynamicCondition()","externalID":"s:7Lockman0A16DynamicConditionyycfm","role":"symbol","modules":[{"name":"Lockman"}],"symbolKind":"macro"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP","kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","text":"LockmanDynamicConditionAction"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Protocol conformance to ","type":"text"},{"type":"codeVoice","code":"LockmanDynamicConditionAction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"actionName","type":"codeVoice"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"extractMetadata()"},{"text":" method that extracts enum associated values as metadata","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"text":" property with default condition (always success)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Default ","type":"text"},{"code":"strategyId","type":"codeVoice"},{"type":"text","text":" implementation is provided by the protocol"}]}]}]},{"inlineContent":[{"type":"text","text":"The macro enables you to define custom locking conditions at runtime based on:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Current state values","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Other locks in the same boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Time-based conditions"}]}]},{"content":[{"inlineContent":[{"text":"Any custom logic","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Example usage with TCA:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            try await processTask(size: size)","            await send(.taskCompleted)","          }","        }","      }","    }","  }","}"]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/lockman\/lockmandynamiccondition()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","references":{"doc://Lockman/documentation/Lockman":{"kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"kind":"symbol","url":"\/documentation\/lockman\/lockmandynamiccondition()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicCondition"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","title":"LockmanDynamicCondition()","type":"topic"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"kind":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionaction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"abstract":[{"text":"A protocol for actions that support dynamic condition-based locking.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","title":"LockmanDynamicConditionAction","type":"topic"},"Lockman.png":{"type":"image","alt":"Lockman logo","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"identifier":"Lockman.png"}}}