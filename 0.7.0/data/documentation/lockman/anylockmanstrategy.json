{"topicSections":[{"title":"Initializers","anchor":"Initializers","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"]},{"title":"Instance Properties","anchor":"Instance-Properties","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"]},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)"]},{"title":"Type Methods","anchor":"Type-Methods","generated":true,"identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","interfaceLanguage":"swift"},"sections":[],"metadata":{"symbolKind":"struct","navigatorTitle":[{"text":"AnyLockmanStrategy","kind":"identifier"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanStrategy","kind":"identifier"}],"externalID":"s:7Lockman03AnyA8StrategyV","role":"symbol","title":"AnyLockmanStrategy","modules":[{"name":"Lockman"}]},"abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"text":", enabling heterogeneous strategy","type":"text"},{"text":" ","type":"text"},{"text":"storage and manipulation while preserving type safety for lock information.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","kind":"typeIdentifier","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Purpose","anchor":"Purpose","level":2,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"AnyLockmanStrategy"},{"type":"text","text":" solves the fundamental problem of storing different concrete"},{"type":"text","text":" "},{"type":"text","text":"strategy implementations in the same collection. Without type erasure, you cannot"},{"type":"text","text":" "},{"type":"text","text":"store "},{"type":"codeVoice","code":"LockmanSingleExecutionStrategy"},{"type":"text","text":" and "},{"type":"codeVoice","code":"LockmanPriorityBasedStrategy"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"text":"same array, even though they both conform to ","type":"text"},{"code":"LockmanStrategy","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Key Benefits","anchor":"Key-Benefits","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Heterogeneous Collections","type":"text"}],"type":"strong"},{"text":": Store different strategy implementations together","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Runtime Strategy Selection"}]},{"type":"text","text":": Choose strategies dynamically based on conditions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"API Boundaries"}]},{"type":"text","text":": Hide concrete strategy types from public interfaces"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Dependency Injection","type":"text"}],"type":"strong"},{"text":": Enable flexible strategy registration and resolution","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Universal Compatibility"}]},{"type":"text","text":": Support both class and struct strategy implementations"}]}]}],"type":"unorderedList"},{"text":"Type Safety Guarantees","anchor":"Type-Safety-Guarantees","level":2,"type":"heading"},{"inlineContent":[{"text":"While the concrete strategy type is erased, type safety for lock information ","type":"text"},{"code":"I","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is preserved at the ","type":"text"},{"code":"AnyLockmanStrategy","type":"codeVoice"},{"text":" level. This means you cannot accidentally","type":"text"},{"text":" ","type":"text"},{"text":"use ","type":"text"},{"code":"LockmanSingleExecutionInfo","type":"codeVoice"},{"text":" with a priority-based strategy wrapper.","type":"text"}],"type":"paragraph"},{"text":"Performance Considerations","anchor":"Performance-Considerations","level":2,"type":"heading"},{"inlineContent":[{"text":"Type erasure introduces a small runtime overhead due to function pointer indirection.","type":"text"},{"text":" ","type":"text"},{"text":"However, this cost is typically negligible compared to the actual locking operations","type":"text"},{"text":" ","type":"text"},{"text":"and is justified by the flexibility gained.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanstrategy"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","doc:\/\/Lockman\/s8SendableP"]}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp(id:)":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp(id:)","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup(id:)","abstract":[{"type":"text","text":"Removes all lock information for the specified boundary identifier."}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cleanUp"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")"}],"title":"cleanUp(id:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/canLock(id:info:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"canLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"LockmanResult","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A6ResultO"}],"type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/canlock(id:info:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/canLock(id:info:)","abstract":[{"type":"text","text":"Checks if a lock can be acquired for the given boundary and information."}],"role":"symbol","kind":"symbol","title":"canLock(id:info:)"},"doc://Lockman/documentation/Lockman/LockmanInfo":{"url":"\/documentation\/lockman\/lockmaninfo","kind":"symbol","abstract":[{"type":"text","text":"Represents information required by Lockman locking strategies."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanInfo","kind":"identifier"}],"navigatorTitle":[{"text":"LockmanInfo","kind":"identifier"}],"title":"LockmanInfo","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanInfo","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(id:info:)":{"kind":"symbol","abstract":[{"type":"text","text":"Attempts to acquire a lock for the given boundary and information."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"lock(id:info:)","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/cleanUp()":{"role":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/cleanup()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/cleanUp()","kind":"symbol","abstract":[{"type":"text","text":"Removes all lock information across all boundaries."}],"type":"topic","title":"cleanUp()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cleanUp","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/unlock(id:info:)":{"title":"unlock(id:info:)","role":"symbol","abstract":[{"type":"text","text":"Releases a previously acquired lock."}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/unlock(id:info:)","url":"\/documentation\/lockman\/anylockmanstrategy\/unlock(id:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/getCurrentLocks()":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/getCurrentLocks()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrentLocks"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","text":"AnyLockmanBoundaryId","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"kind":"text","text":" : [any "},{"kind":"typeIdentifier","text":"LockmanInfo","preciseIdentifier":"s:7Lockman0A4InfoP"},{"kind":"text","text":"]]"}],"abstract":[{"type":"text","text":"Returns current locks information for debugging."}],"title":"getCurrentLocks()","role":"symbol","kind":"symbol","url":"\/documentation\/lockman\/anylockmanstrategy\/getcurrentlocks()","type":"topic"},"Lockman.png":{"type":"image","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo","identifier":"Lockman.png"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","title":"AnyLockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/strategyId":{"type":"topic","url":"\/documentation\/lockman\/anylockmanstrategy\/strategyid","role":"symbol","title":"strategyId","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"strategyId"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Lockman0A10StrategyIdV","kind":"typeIdentifier","text":"LockmanStrategyId"}],"abstract":[{"type":"text","text":"The identifier for this type-erased strategy."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/strategyId"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/makeStrategyId()":{"abstract":[{"text":"Creates a strategy identifier for the type-erased strategy.","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeStrategyId","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"LockmanStrategyId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A10StrategyIdV"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/makeStrategyId()","kind":"symbol","title":"makeStrategyId()","url":"\/documentation\/lockman\/anylockmanstrategy\/makestrategyid()","type":"topic"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","url":"\/documentation\/lockman\/lockmanstrategy","abstract":[{"text":"A protocol defining the core locking operations that all strategies must implement.","type":"text"}],"title":"LockmanStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://Lockman/documentation/Lockman":{"kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)","url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","abstract":[{"type":"text","text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation."}],"kind":"symbol","role":"symbol"},"doc://Lockman/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Lockman\/s8SendableP"}}}