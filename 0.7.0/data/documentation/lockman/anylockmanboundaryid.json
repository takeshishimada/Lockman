{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmanboundaryid"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId"},"sections":[],"kind":"symbol","metadata":{"externalID":"s:7Lockman03AnyA10BoundaryIdV","navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"symbolKind":"struct","roleHeading":"Structure","modules":[{"name":"Lockman"}],"title":"AnyLockmanBoundaryId"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"anchor":"Operators","title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)"],"generated":true},{"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)"],"generated":true},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations"],"generated":true}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanBoundaryId"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This wrapper enables different types of boundary identifiers to coexist in the same","type":"text"},{"text":" ","type":"text"},{"text":"collection while maintaining type safety for hashing and equality operations.","type":"text"}]},{"type":"heading","text":"Type Erasure Benefits","anchor":"Type-Erasure-Benefits","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Allows "},{"type":"codeVoice","code":"Dictionary<AnyLockmanBoundaryId, Value>"},{"type":"text","text":" with mixed key types"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Maintains value semantics and equality comparison","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Preserves hashing behavior from underlying types","type":"text"}]}]}]},{"type":"heading","text":"Thread Safety","anchor":"Thread-Safety","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Marked as "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" because "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" is thread-safe for"},{"type":"text","text":" "},{"type":"text","text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state."}]},{"type":"heading","text":"Usage Example","anchor":"Usage-Example","level":2},{"type":"codeListing","syntax":"swift","code":["enum UserBoundary: String, LockmanBoundaryId {","  case profile, settings","}","","struct SessionBoundary: LockmanBoundaryId {","  let sessionId: String","}","","\/\/ Both can be used as keys in the same collection","let userKey = AnyLockmanBoundaryId(UserBoundary.profile)","let sessionKey = AnyLockmanBoundaryId(SessionBoundary(sessionId: \"abc123\"))"]}]}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanBoundaryId"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/init(_:)":{"abstract":[{"text":"Creates a new ","type":"text"},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"text":" by erasing the type of a value that conforms to ","type":"text"},{"type":"codeVoice","code":"LockmanBoundaryId"},{"text":".","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanBoundaryId","preciseIdentifier":"s:7Lockman0A10BoundaryIda","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/init(_:)","url":"\/documentation\/lockman\/anylockmanboundaryid\/init(_:)","role":"symbol","title":"init(_:)"},"doc://Lockman/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/Lockman\/SQ"},"doc://Lockman/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Lockman\/s8SendableP"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/Equatable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/Equatable-Implementations","title":"Equatable Implementations","abstract":[],"type":"topic","kind":"article","url":"\/documentation\/lockman\/anylockmanboundaryid\/equatable-implementations"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId":{"navigatorTitle":[{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/lockman\/anylockmanboundaryid","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"identifier"}],"title":"AnyLockmanBoundaryId","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"code":"LockmanBoundaryId","type":"codeVoice"},{"type":"text","text":", allowing heterogeneous boundary IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}]},"doc://Lockman/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Lockman\/SH"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/hash(into:)":{"role":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/hash(into:)","title":"hash(into:)","abstract":[{"type":"text","text":"Generates hash values that include type information to prevent"},{"text":" ","type":"text"},{"text":"different boundary ID types with identical values from colliding.","type":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/hash(into:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://Lockman/documentation/Lockman":{"kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanBoundaryId/==(_:_:)":{"type":"topic","title":"==(_:_:)","kind":"symbol","url":"\/documentation\/lockman\/anylockmanboundaryid\/==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":", ","kind":"text"},{"text":"AnyLockmanBoundaryId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA10BoundaryIdV"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanBoundaryId\/==(_:_:)","abstract":[{"type":"text","text":"Compares two "},{"type":"codeVoice","code":"AnyLockmanBoundaryId"},{"type":"text","text":" instances for equality by comparing their underlying "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":" values."}],"role":"symbol"},"Lockman.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"alt":"Lockman logo","identifier":"Lockman.png"}}}