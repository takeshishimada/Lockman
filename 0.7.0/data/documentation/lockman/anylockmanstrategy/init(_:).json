{"metadata":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"symbolKind":"init","externalID":"s:7Lockman03AnyA8StrategyVyACyxGqd__c1IQyd__RszAA0aC0Rd__lufc","modules":[{"name":"Lockman"}],"roleHeading":"Initializer","title":"init(_:)"},"abstract":[{"type":"text","text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"strategy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/I","preciseIdentifier":"s:7Lockman0A8StrategyP1IQa","kind":"typeIdentifier","text":"I"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","preciseIdentifier":"s:7Lockman0A8StrategyP","kind":"typeIdentifier","text":"LockmanStrategy"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"strategy","content":[{"inlineContent":[{"type":"text","text":"A concrete strategy conforming to "},{"type":"codeVoice","code":"LockmanStrategy<I>"}],"type":"paragraph"}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This initializer performs type erasure by capturing the concrete strategy’s methods"},{"type":"text","text":" "},{"type":"text","text":"as closures. The concrete strategy’s lifetime is preserved through these closures,"},{"type":"text","text":" "},{"type":"text","text":"ensuring that the strategy remains valid for the lifetime of this wrapper."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Type Safety","anchor":"Type-Safety"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"where S.I == I"},{"text":" constraint ensures that the concrete strategy’s lock information","type":"text"},{"text":" ","type":"text"},{"text":"type matches this wrapper’s lock information type, maintaining type safety at compile time.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Memory Management","anchor":"Memory-Management"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For class-based strategies: The strategy instance is retained by the closures"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"For struct-based strategies: The strategy is copied into the closures","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Both approaches ensure proper lifetime management without memory leaks","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Performance Notes","anchor":"Performance-Notes"},{"inlineContent":[{"type":"text","text":"The type erasure process happens once during initialization. Subsequent method calls"},{"type":"text","text":" "},{"type":"text","text":"have minimal overhead (single function pointer indirection)."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy\/init(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/init(_:)":{"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/init(_:)","url":"\/documentation\/lockman\/anylockmanstrategy\/init(_:)","abstract":[{"type":"text","text":"Creates a new type-erased strategy wrapper from any concrete strategy implementation."}],"kind":"symbol","role":"symbol"},"doc://Lockman/documentation/Lockman/LockmanStrategy/I":{"type":"topic","required":true,"url":"\/documentation\/lockman\/lockmanstrategy\/i","title":"I","abstract":[{"type":"text","text":"The type of lock information this strategy handles."}],"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"I","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"LockmanInfo","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A4InfoP"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy\/I"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","title":"AnyLockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"type":"topic"},"Lockman.png":{"identifier":"Lockman.png","variants":[{"traits":["1x","light"],"url":"\/images\/Lockman\/Lockman.png"}],"alt":"Lockman logo","type":"image"},"doc://Lockman/documentation/Lockman":{"kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","type":"topic"},"doc://Lockman/documentation/Lockman/LockmanStrategy":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanStrategy","url":"\/documentation\/lockman\/lockmanstrategy","abstract":[{"text":"A protocol defining the core locking operations that all strategies must implement.","type":"text"}],"title":"LockmanStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanStrategy"}],"role":"symbol","kind":"symbol","type":"topic"}}}