{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"B"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SH","text":"Hashable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"id","content":[{"inlineContent":[{"type":"text","text":"A unique boundary identifier conforming to "},{"type":"codeVoice","code":"LockmanBoundaryId"}],"type":"paragraph"}]},{"name":"info","content":[{"inlineContent":[{"type":"text","text":"Lock information of type "},{"type":"codeVoice","code":"I"},{"type":"text","text":" to be registered as active"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"text":"This method should only be called after ","type":"text"},{"type":"codeVoice","code":"canLock"},{"text":" returns a success result.","type":"text"},{"text":" ","type":"text"},{"text":"The implementation delegates to the concrete strategyâ€™s lock acquisition logic.","type":"text"}],"type":"paragraph"},{"text":"Usage Contract","anchor":"Usage-Contract","level":2,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Precondition"}]},{"text":": ","type":"text"},{"type":"codeVoice","code":"canLock(id:info:)"},{"type":"text","text":" should return "},{"type":"codeVoice","code":".success"},{"type":"text","text":" or "},{"type":"codeVoice","code":".successWithPrecedingCancellation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Postcondition","type":"text"}]},{"text":": The lock is acquired and tracked by the underlying strategy","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Thread Safety","type":"text"}]},{"text":": Safe to call concurrently with different boundary IDs","type":"text"}]}]}],"type":"unorderedList"},{"text":"State Management","anchor":"State-Management","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The concrete strategy is responsible for updating its internal state to track"},{"type":"text","text":" "},{"type":"text","text":"the acquired lock. This wrapper does not add any additional state management."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy"]]},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"abstract":[{"type":"text","text":"Attempts to acquire a lock for the given boundary and information."}],"variants":[{"paths":["\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"lock(id:info:)","role":"symbol","roleHeading":"Instance Method","symbolKind":"method","externalID":"s:7Lockman03AnyA8StrategyV4lock2id4infoyqd___xtSHRd__s8SendableRd__lF","modules":[{"name":"Lockman"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"references":{"doc://Lockman/documentation/Lockman/AnyLockmanStrategy":{"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy","url":"\/documentation\/lockman\/anylockmanstrategy","title":"AnyLockmanStrategy","navigatorTitle":[{"kind":"identifier","text":"AnyLockmanStrategy"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanStrategy"}],"abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"type":"codeVoice","code":"LockmanStrategy<I>"},{"type":"text","text":", enabling heterogeneous strategy"},{"type":"text","text":" "},{"type":"text","text":"storage and manipulation while preserving type safety for lock information."}],"type":"topic"},"doc://Lockman/documentation/Lockman/AnyLockmanStrategy/lock(id:info:)":{"kind":"symbol","abstract":[{"type":"text","text":"Attempts to acquire a lock for the given boundary and information."}],"url":"\/documentation\/lockman\/anylockmanstrategy\/lock(id:info:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"info","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"lock(id:info:)","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanStrategy\/lock(id:info:)"},"doc://Lockman/documentation/Lockman":{"kind":"symbol","images":[{"type":"icon","identifier":"Lockman.png"}],"url":"\/documentation\/lockman","abstract":[{"text":"Lockman is a Swift library that solves concurrent action control issues in The Composable Architecture (TCA) applications, with responsiveness, transparency, and declarative design in mind.","type":"text"}],"role":"collection","identifier":"doc:\/\/Lockman\/documentation\/Lockman","title":"Lockman","type":"topic"},"Lockman.png":{"identifier":"Lockman.png","variants":[{"url":"\/images\/Lockman\/Lockman.png","traits":["1x","light"]}],"alt":"Lockman logo","type":"image"}}}