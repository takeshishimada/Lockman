{"sections":[],"seeAlsoSections":[{"generated":true,"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","doc:\/\/Lockman\/documentation\/Lockman\/Lock","doc:\/\/Lockman\/documentation\/Lockman\/Unlock","doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","doc:\/\/Lockman\/documentation\/Lockman\/Configuration","doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide"]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/BoundaryOverview","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boundary is the "},{"inlineContent":[{"type":"text","text":"exclusive control boundary"}],"type":"strong"},{"type":"text","text":" in Lockman. Lockman uses TCA’s CancelID as this boundary to control action execution."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Specify CancelID as boundary with withLock","return .withLock(","    operation: { send in","        \/\/ Processing","    },","    lockFailure: { error, send in","        \/\/ Processing when already running within the same boundary","    },","    action: action,","    cancelID: CancelID.userAction  \/\/ This CancelID functions as a Boundary",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using CancelID as a boundary provides the following benefits:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Natural integration with TCA"}]},{"type":"text","text":" - Leverages existing TCA mechanisms"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Clear boundary definition"}],"type":"strong"},{"text":" - CancelID clearly defines the scope of exclusive control","type":"text"}]}]}]},{"type":"heading","text":"Boundary Specifications","anchor":"Boundary-Specifications","level":2},{"type":"heading","text":"1. No exclusive control across boundaries","anchor":"1-No-exclusive-control-across-boundaries","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control between different Boundaries is not possible:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ❌ Not possible: Control save and load simultaneously","case .saveButtonTapped:","    \/\/ Control only within CancelID.save boundary","    return .withLock(..., cancelID: CancelID.save)","    ","case .loadButtonTapped:","    \/\/ Control only within CancelID.load boundary (independent from save)","    return .withLock(..., cancelID: CancelID.load)"]},{"type":"paragraph","inlineContent":[{"text":"Since these are treated as separate boundaries, load can be executed even while save is running.","type":"text"}]},{"type":"heading","text":"2. Only one Boundary per action","anchor":"2-Only-one-Boundary-per-action","level":3},{"inlineContent":[{"text":"You cannot specify multiple Boundaries for a single action:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ❌ Not possible: Specify multiple Boundaries simultaneously","return .withLock(","    operation: { send in \/* ... *\/ },","    lockFailure: { error, send in \/* ... *\/ },","    action: action,","    cancelID: [CancelID.save, CancelID.validate]  \/\/ Multiple specification not allowed",")"],"type":"codeListing"},{"inlineContent":[{"text":"If you want to control multiple processes simultaneously, you need to define a common Boundary:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ✅ Correct approach: Use a common boundary","enum CancelID {","    case fileOperation  \/\/ Common boundary including save, load, validate","}","","case .saveButtonTapped, .loadButtonTapped, .validateButtonTapped:","    return .withLock(..., cancelID: CancelID.fileOperation)"],"type":"codeListing"},{"type":"heading","text":"Summary","level":2,"anchor":"Summary"},{"inlineContent":[{"type":"text","text":"By setting appropriate boundaries, you can achieve both application stability and responsiveness."}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"Understand the concept of boundaries in Lockman."}],"kind":"article","variants":[{"paths":["\/documentation\/lockman\/boundaryoverview"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"Lockman"}],"roleHeading":"Article","title":"Boundary","role":"article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"references":{"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","url":"\/documentation\/lockman\/errorhandling","role":"article","title":"Error Handling","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]},"doc://Lockman/documentation/Lockman/DebuggingGuide":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DebuggingGuide","url":"\/documentation\/lockman\/debuggingguide","kind":"article","type":"topic","title":"Debugging Guide","abstract":[{"text":"Learn how to debug Lockman-related issues in your application.","type":"text"}],"role":"article"},"doc://Lockman/documentation/Lockman/GettingStarted":{"title":"Getting Started","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GettingStarted","url":"\/documentation\/lockman\/gettingstarted","kind":"article","abstract":[{"type":"text","text":"Learn how to integrate Lockman into your TCA application."}],"role":"article"},"doc://Lockman/documentation/Lockman/ChoosingStrategy":{"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ChoosingStrategy","abstract":[{"text":"Learn how to select the right strategy for your use case.","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/lockman\/choosingstrategy","title":"Choosing a Strategy"},"doc://Lockman/documentation/Lockman":{"role":"collection","url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"doc://Lockman/documentation/Lockman/Lock":{"kind":"article","abstract":[{"type":"text","text":"Understanding the locking mechanism in Lockman."}],"url":"\/documentation\/lockman\/lock","title":"Lock","role":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Lock","type":"topic"},"doc://Lockman/documentation/Lockman/Unlock":{"abstract":[{"type":"text","text":"Understanding the unlocking mechanism in Lockman."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Unlock","title":"Unlock","kind":"article","role":"article","url":"\/documentation\/lockman\/unlock","type":"topic"},"doc://Lockman/documentation/Lockman/Configuration":{"title":"Configuration","url":"\/documentation\/lockman\/configuration","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/Configuration","kind":"article","type":"topic","abstract":[{"type":"text","text":"Configure Lockman for your application’s needs."}],"role":"article"}}}