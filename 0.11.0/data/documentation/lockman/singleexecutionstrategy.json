{"abstract":[{"text":"Prevent duplicate execution of the same action.","type":"text"}],"metadata":{"title":"SingleExecutionStrategy","role":"article","roleHeading":"Article","modules":[{"name":"Lockman"}]},"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"SingleExecutionStrategy is a strategy for preventing duplicate execution. It prevents the same processing from being executed redundantly, maintaining data consistency and application stability.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is the most frequently used basic strategy for preventing continuous user operations and duplicate execution of automatic processing."}],"type":"paragraph"},{"anchor":"Execution-Modes","type":"heading","level":2,"text":"Execution Modes"},{"inlineContent":[{"text":"SingleExecutionStrategy supports three execution modes:","type":"text"}],"type":"paragraph"},{"anchor":"none-No-Control","type":"heading","level":3,"text":"none - No Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .none",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Executes all processing concurrently without exclusive control"}]}]},{"content":[{"inlineContent":[{"text":"Used when temporarily disabling lock functionality","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Applied for behavior verification during debugging or testing","type":"text"}]}]}]},{"anchor":"boundary-Boundary-level-Exclusive-Control","type":"heading","level":3,"text":"boundary - Boundary-level Exclusive Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\", ","    mode: .boundary",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Only one process can execute within the same boundary","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control at screen or component level"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Applied when wanting to control entire UI operations"}]}]}]},{"anchor":"action-Action-level-Exclusive-Control","type":"heading","level":3,"text":"action - Action-level Exclusive Control"},{"type":"codeListing","syntax":"swift","code":["LockmanSingleExecutionInfo(","    actionId: \"save\",","    mode: .action  ",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Prevents only duplicate execution of the same action"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Different actions can execute concurrently","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Applied when wanting to control only specific processing"}],"type":"paragraph"}]}]},{"anchor":"Usage","type":"heading","level":2,"text":"Usage"},{"anchor":"Basic-Usage-Example","type":"heading","level":3,"text":"Basic Usage Example"},{"type":"codeListing","syntax":"swift","code":["@LockmanSingleExecution","enum Action {","    case save","    case load","    ","    var lockmanInfo: LockmanSingleExecutionInfo {","        switch self {","        case .save:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        case .load:","            return LockmanSingleExecutionInfo(","                actionId: actionName,","                mode: .action","            )","        }","    }","}"]},{"anchor":"Usage-within-Effects","type":"heading","level":3,"text":"Usage within Effects"},{"type":"codeListing","syntax":"swift","code":["case .saveButtonTapped:","    return .withLock(","        operation: { send in","            try await saveUserData()","            send(.saveCompleted)","        },","        catch handler: { error, send in","            send(.saveError(error.localizedDescription))","        },","        lockFailure: { error, send in","            send(.saveBusy(\"Save process is currently running\"))","        },","        action: .save,","        cancelID: CancelID.userAction","    )"]},{"anchor":"Operation-Examples","type":"heading","level":2,"text":"Operation Examples"},{"anchor":"action-mode","type":"heading","level":3,"text":"action mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (same action running)","Time: 1s  - load action request ‚Üí ‚úÖ Execute (different action)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - save action request ‚Üí ‚úÖ Execute (previous process completed)"]},{"anchor":"boundary-mode","type":"heading","level":3,"text":"boundary mode"},{"type":"codeListing","syntax":null,"code":["Time: 0s  - save action starts ‚Üí ‚úÖ Execute","Time: 1s  - save action request ‚Üí ‚ùå Reject (running within boundary)","Time: 1s  - load action request ‚Üí ‚ùå Reject (running within boundary)","Time: 3s  - save action complete ‚Üí üîì Unlock","Time: 4s  - load action request ‚Üí ‚úÖ Execute (boundary process completed)"]},{"anchor":"Error-Handling","type":"heading","level":2,"text":"Error Handling"},{"inlineContent":[{"type":"text","text":"For errors that may occur with SingleExecutionStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Error Handling"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling"},{"type":"text","text":" page."}],"type":"paragraph"},{"anchor":"LockmanSingleExecutionError","type":"heading","level":3,"text":"LockmanSingleExecutionError"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"boundaryAlreadyLocked","type":"text"}]},{"type":"text","text":" - Boundary is already locked"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"boundaryId","type":"codeVoice"},{"text":": ID of the locked boundary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"existingInfo"},{"text":": Existing lock information","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"actionAlreadyRunning","type":"text"}],"type":"strong"},{"text":" - Same action is already running","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"existingInfo","type":"codeVoice"},{"type":"text","text":": Running action information"}]}]}]},{"type":"codeListing","syntax":"swift","code":["lockFailure: { error, send in","    switch error as? LockmanSingleExecutionError {","    case .boundaryAlreadyLocked(_, let existingInfo):","        send(.showBusyMessage(\"Another process is running: \\(existingInfo.actionId)\"))","    case .actionAlreadyRunning(let existingInfo):","        send(.showBusyMessage(\"\\(existingInfo.actionId) is running\"))","    default:","        send(.showBusyMessage(\"Cannot start processing\"))","    }","}"]}],"kind":"content"}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/singleexecutionstrategy"]}],"kind":"article","seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"anchor":"Strategies","generated":true}],"references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article","title":"CompositeStrategy","role":"article"},"doc://Lockman/documentation/Lockman/GroupCoordinationStrategy":{"type":"topic","abstract":[{"text":"Coordinate actions through leader\/member group roles.","type":"text"}],"title":"GroupCoordinationStrategy","kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy","url":"\/documentation\/lockman\/groupcoordinationstrategy","role":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"role":"article","type":"topic","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"title":"PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"kind":"article","role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","title":"ConcurrencyLimitedStrategy","type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}]},"doc://Lockman/documentation/Lockman":{"role":"collection","url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","url":"\/documentation\/lockman\/errorhandling","role":"article","title":"Error Handling","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]}}}