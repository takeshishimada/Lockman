{"sections":[],"metadata":{"symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"externalID":"s:7Lockman0A16DynamicConditionyycfm","title":"LockmanDynamicCondition()","modules":[{"name":"Lockman"}],"roleHeading":"Macro","role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/lockmandynamiccondition()"]}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"text":"LockmanDynamicConditionAction","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A22DynamicConditionActionP","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction"},{"text":") ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, names: named(actionName), named(extractMetadata), named(lockmanInfo)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol conformance to "},{"code":"LockmanDynamicConditionAction","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"extractMetadata()"},{"type":"text","text":" method that extracts enum associated values as metadata"}]}]},{"content":[{"inlineContent":[{"code":"lockmanInfo","type":"codeVoice"},{"type":"text","text":" property with default condition (always success)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Default ","type":"text"},{"code":"strategyId","type":"codeVoice"},{"text":" implementation is provided by the protocol","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"The macro enables you to define custom locking conditions at runtime based on:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Current state values"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Other locks in the same boundary"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Time-based conditions","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Any custom logic"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Example usage with TCA:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AdvancedFeature {","  @LockmanDynamicCondition","  enum Action {","    case fetchData(userId: String, priority: Int)","    case processTask(size: Int)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .fetchData(let userId, let priority):","        return .run { send in","          \/\/ Define condition based on state and action parameters","          let lockInfo = action.with(condition: { existingInfos in","            \/\/ High priority always runs","            if priority >= 10 { return true }","","            \/\/ Check user-specific limits","            let userCount = existingInfos.filter { info in","              info.metadata[\"userId\"] as? String == userId","            }.count","","            \/\/ Allow max 3 concurrent requests per user","            return userCount < 3 && existingInfos.count < state.concurrentLimit","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            let data = try await api.fetchData(userId: userId)","            await send(.dataFetched(data))","          }","        }","","      case .processTask(let size):","        return .run { send in","          \/\/ Size-based dynamic limits","          let lockInfo = action.with(condition: { existingInfos in","            let maxConcurrent = size > 1000 ? 1 : 5","            return existingInfos.count < maxConcurrent","          })","","          await withLock(lockInfo, strategy: .dynamicCondition) {","            try await processTask(size: size)","            await send(.taskCompleted)","          }","        }","      }","    }","  }","}"]}]}],"identifier":{"url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","interfaceLanguage":"swift"},"references":{"doc://Lockman/documentation/Lockman":{"role":"collection","url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"doc://Lockman/documentation/Lockman/LockmanDynamicCondition()":{"url":"\/documentation\/lockman\/lockmandynamiccondition()","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicCondition()","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A macro that generates protocol conformance and required members for dynamic condition-based locking behavior."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanDynamicCondition","kind":"identifier"},{"text":"()","kind":"text"}],"title":"LockmanDynamicCondition()","kind":"symbol"},"doc://Lockman/documentation/Lockman/LockmanDynamicConditionAction":{"abstract":[{"type":"text","text":"A protocol for actions that support dynamic condition-based locking."}],"type":"topic","kind":"symbol","url":"\/documentation\/lockman\/lockmandynamicconditionaction","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanDynamicConditionAction","role":"symbol","title":"LockmanDynamicConditionAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanDynamicConditionAction"}],"navigatorTitle":[{"kind":"identifier","text":"LockmanDynamicConditionAction"}]}}}