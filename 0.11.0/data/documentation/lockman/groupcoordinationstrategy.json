{"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"GroupCoordinationStrategy is a strategy that coordinates related processing as a group. Through leader-member role assignment, it ensures that multiple processes execute in appropriate order and conditions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This strategy is used in situations where multiple related processes need to work cooperatively."}],"type":"paragraph"},{"text":"Group System","level":2,"type":"heading","anchor":"Group-System"},{"text":"Coordination Roles","level":3,"type":"heading","anchor":"Coordination-Roles"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"none","type":"text"}]},{"type":"text","text":" - Non-exclusive Participant"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"showProgress\",","    groupIds: [\"dataLoading\"],","    coordinationRole: .none",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate regardless of group state","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Does not hinder execution of other participants","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Auxiliary processing such as UI updates or logging"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"leader","type":"text"}],"type":"strong"},{"text":" - Group Leader","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"startSync\",","    groupIds: [\"syncGroup\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Role to start group activities"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Controls participation conditions according to entry policy"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables member participation"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"member"}],"type":"strong"},{"text":" - Group Member","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"processData\", ","    groupIds: [\"syncGroup\"],","    coordinationRole: .member",")"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate in active groups"}]}]},{"content":[{"inlineContent":[{"text":"Executes when leader or other participants are present","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Responsible for coordinated processing","type":"text"}]}]}],"type":"unorderedList"},{"text":"Leader Entry Policy","level":3,"type":"heading","anchor":"Leader-Entry-Policy"},{"inlineContent":[{"inlineContent":[{"text":"emptyGroup","type":"text"}],"type":"strong"},{"text":" - Start only in empty group","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".leader(.emptyGroup)"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can only participate when group is completely empty"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Starts new activity cycle"}]}]},{"content":[{"inlineContent":[{"text":"Most strict control","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"withoutMembers","type":"text"}],"type":"strong"},{"text":" - Start without members","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".leader(.withoutMembers)"]},{"items":[{"content":[{"inlineContent":[{"text":"Can participate when no members are present","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Other leaders are allowed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enables coordination between leaders"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"withoutLeader","type":"text"}]},{"type":"text","text":" - Start without leader"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".leader(.withoutLeader)"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can participate when no other leaders are present","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Members are allowed"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusive control of leader authority"}]}]}],"type":"unorderedList"},{"text":"Usage","level":2,"type":"heading","anchor":"Usage"},{"text":"Basic Usage Example","level":3,"type":"heading","anchor":"Basic-Usage-Example"},{"syntax":"swift","type":"codeListing","code":["@LockmanGroupCoordination","enum Action {","    case startDataSync","    case processChunk","    case showProgress","    ","    var lockmanInfo: LockmanGroupCoordinatedInfo {","        switch self {","        case .startDataSync:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .leader(.emptyGroup)","            )","        case .processChunk:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .member","            )","        case .showProgress:","            return LockmanGroupCoordinatedInfo(","                actionId: actionName,","                groupIds: [\"dataSync\"],","                coordinationRole: .none","            )","        }","    }","}"]},{"text":"Coordination with Multiple Groups","level":3,"type":"heading","anchor":"Coordination-with-Multiple-Groups"},{"syntax":"swift","type":"codeListing","code":["LockmanGroupCoordinatedInfo(","    actionId: \"crossGroupOperation\",","    groupIds: [\"group1\", \"group2\", \"group3\"],","    coordinationRole: .leader(.emptyGroup)",")"]},{"text":"Operation Examples","level":2,"type":"heading","anchor":"Operation-Examples"},{"text":"Leader-Member Coordination","level":3,"type":"heading","anchor":"Leader-Member-Coordination"},{"syntax":null,"type":"codeListing","code":["Time: 0s  - leader(.emptyGroup) starts     ‚Üí ‚úÖ Execute (group empty)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (leader exists)","Time: 1s  - member join request            ‚Üí ‚úÖ Execute (group active)","Time: 2s  - leader(.emptyGroup) request    ‚Üí ‚ùå Reject (group active)","Time: 5s  - All participants complete      ‚Üí üîì Group dissolves","Time: 6s  - leader(.emptyGroup) request    ‚Üí ‚úÖ Execute (group empty)"]},{"text":"Entry Policy Differences","level":3,"type":"heading","anchor":"Entry-Policy-Differences"},{"syntax":null,"type":"codeListing","code":["\/\/ .emptyGroup case","Group state: [empty] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutMembers case","Group state: [leader] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [member] ‚Üí leader request ‚Üí ‚ùå Reject","","\/\/ .withoutLeader case","Group state: [member] ‚Üí leader request ‚Üí ‚úÖ Allow","Group state: [leader] ‚Üí leader request ‚Üí ‚ùå Reject"]},{"text":"Error Handling","level":2,"type":"heading","anchor":"Error-Handling"},{"inlineContent":[{"type":"text","text":"For errors that may occur with GroupCoordinationStrategy and their solutions, please also refer to the common patterns on the "},{"type":"reference","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","overridingTitle":"Error Handling","isActive":true,"overridingTitleInlineContent":[{"text":"Error Handling","type":"text"}]},{"type":"text","text":" page."}],"type":"paragraph"},{"text":"LockmanGroupCoordinationError","level":3,"type":"heading","anchor":"LockmanGroupCoordinationError"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"actionAlreadyInGroup"}]},{"type":"text","text":" - Action already in group"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    if case .actionAlreadyInGroup(let existingInfo, let groupIds) = error as? LockmanGroupCoordinationError {","        send(.alreadyActive(\"Process is already running\"))","    }","}"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"leaderCannotJoinNonEmptyGroup"}],"type":"strong"},{"text":" - Leader cannot join non-empty group","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    if case .leaderCannotJoinNonEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.groupBusy(\"Cannot start because other processing is running\"))","    }","}"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"memberCannotJoinEmptyGroup"}]},{"text":" - Member cannot join empty group","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["lockFailure: { error, send in","    if case .memberCannotJoinEmptyGroup(let groupIds) = error as? LockmanGroupCoordinationError {","        send(.noActiveGroup(\"No active group\"))","    }","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"seeAlsoSections":[{"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy"],"generated":true}],"sections":[],"abstract":[{"type":"text","text":"Coordinate actions through leader\/member group roles."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/groupcoordinationstrategy"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Article","title":"GroupCoordinationStrategy","role":"article","modules":[{"name":"Lockman"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/GroupCoordinationStrategy"},"kind":"article","references":{"doc://Lockman/documentation/Lockman/CompositeStrategy":{"abstract":[{"type":"text","text":"Combine multiple strategies for complex control scenarios."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/CompositeStrategy","url":"\/documentation\/lockman\/compositestrategy","type":"topic","kind":"article","title":"CompositeStrategy","role":"article"},"doc://Lockman/documentation/Lockman/DynamicConditionStrategy":{"role":"article","type":"topic","abstract":[{"text":"Control actions based on runtime conditions.","type":"text"}],"title":"DynamicConditionStrategy","url":"\/documentation\/lockman\/dynamicconditionstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/DynamicConditionStrategy","kind":"article"},"doc://Lockman/documentation/Lockman/PriorityBasedStrategy":{"title":"PriorityBasedStrategy","kind":"article","url":"\/documentation\/lockman\/prioritybasedstrategy","role":"article","abstract":[{"type":"text","text":"Control action execution based on priority levels."}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/PriorityBasedStrategy","type":"topic"},"doc://Lockman/documentation/Lockman/SingleExecutionStrategy":{"url":"\/documentation\/lockman\/singleexecutionstrategy","title":"SingleExecutionStrategy","abstract":[{"type":"text","text":"Prevent duplicate execution of the same action."}],"kind":"article","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/SingleExecutionStrategy","type":"topic","role":"article"},"doc://Lockman/documentation/Lockman/ConcurrencyLimitedStrategy":{"kind":"article","role":"article","url":"\/documentation\/lockman\/concurrencylimitedstrategy","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ConcurrencyLimitedStrategy","title":"ConcurrencyLimitedStrategy","type":"topic","abstract":[{"text":"Limit the number of concurrent executions.","type":"text"}]},"doc://Lockman/documentation/Lockman":{"role":"collection","url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"doc://Lockman/documentation/Lockman/ErrorHandling":{"kind":"article","url":"\/documentation\/lockman\/errorhandling","role":"article","title":"Error Handling","type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/ErrorHandling","abstract":[{"type":"text","text":"Learn about common error handling patterns in Lockman."}]}}}