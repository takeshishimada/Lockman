{"metadata":{"title":"LockmanSingleExecution()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","externalID":"s:7Lockman0A15SingleExecutionyycfm","symbolKind":"macro","roleHeading":"Macro","modules":[{"name":"Lockman"}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","text":"LockmanSingleExecutionAction","preciseIdentifier":"s:7Lockman0A21SingleExecutionActionP"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(actionName)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecution"},{"kind":"text","text":"()"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Apply this macro to an enum declaration to automatically generate:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol conformance to "},{"type":"codeVoice","code":"LockmanSingleExecutionAction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"actionName"},{"type":"text","text":" property that returns the enum case name as a String"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Default "},{"type":"codeVoice","code":"strategyId"},{"type":"text","text":" implementation is provided by the protocol"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Important"}],"type":"strong"},{"text":": You must implement the ","type":"text"},{"code":"lockmanInfo","type":"codeVoice"},{"text":" property to specify the execution mode:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":".none","type":"codeVoice"},{"text":": No exclusive execution (always allows locks)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".boundary"},{"text":": Only one action per boundary at a time (default behavior)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".action","type":"codeVoice"},{"text":": Only one instance of the same actionId at a time","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Example usage with TCA:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct MyFeature {","  @LockmanSingleExecution","  enum Action {","    case login","    case logout","","    var lockmanInfo: LockmanSingleExecutionInfo {","      switch self {","      case .login:","        return .init(actionId: actionName, mode: .boundary)","      case .logout:","        return .init(actionId: actionName, mode: .action)","      }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .login:","        return .withLock(","          operation: { send in","            \/\/ async work","          },","          action: .login,","          cancelID: \"login-operation\"","        )","      \/\/ ...","      }","    }","  }","}"]}],"kind":"content"}],"abstract":[{"text":"A macro that generates protocol conformance and required members for single execution locking behavior.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()"},"variants":[{"paths":["\/documentation\/lockman\/lockmansingleexecution()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Lockman/documentation/Lockman/LockmanSingleExecutionAction":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecutionAction","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockmanSingleExecutionAction"}],"abstract":[{"type":"text","text":"A specialized "},{"type":"codeVoice","code":"LockmanAction"},{"type":"text","text":" for single-execution locking semantics."}],"navigatorTitle":[{"text":"LockmanSingleExecutionAction","kind":"identifier"}],"kind":"symbol","title":"LockmanSingleExecutionAction","url":"\/documentation\/lockman\/lockmansingleexecutionaction"},"doc://Lockman/documentation/Lockman":{"role":"collection","url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"doc://Lockman/documentation/Lockman/LockmanSingleExecution()":{"url":"\/documentation\/lockman\/lockmansingleexecution()","role":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/LockmanSingleExecution()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LockmanSingleExecution","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","kind":"symbol","title":"LockmanSingleExecution()","abstract":[{"text":"A macro that generates protocol conformance and required members for single execution locking behavior.","type":"text"}]}}}