{"metadata":{"externalID":"s:7Lockman03AnyA7GroupIdV","symbolKind":"struct","title":"AnyLockmanGroupId","navigatorTitle":[{"text":"AnyLockmanGroupId","kind":"identifier"}],"modules":[{"name":"Lockman"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"role":"symbol"},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Lockman\/s8CopyableP","doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","doc:\/\/Lockman\/SQ","doc:\/\/Lockman\/SH","doc:\/\/Lockman\/s8SendableP"],"type":"conformsTo"}],"kind":"symbol","abstract":[{"type":"text","text":"A type-erased wrapper for any "},{"code":"LockmanGroupId","type":"codeVoice"},{"type":"text","text":", allowing heterogeneous group IDs"},{"type":"text","text":" "},{"type":"text","text":"to be stored and compared in a uniform manner."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/Lockman\/documentation\/Lockman"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"This wrapper enables different types of group identifiers to coexist in the same","type":"text"},{"text":" ","type":"text"},{"text":"collection while maintaining type safety for hashing and equality operations.","type":"text"}],"type":"paragraph"},{"anchor":"Type-Erasure-Benefits","level":2,"text":"Type Erasure Benefits","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows ","type":"text"},{"code":"Set<AnyLockmanGroupId>","type":"codeVoice"},{"text":" with mixed group ID types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maintains value semantics and equality comparison"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Preserves hashing behavior from underlying types"}]}]}],"type":"unorderedList"},{"anchor":"Thread-Safety","level":2,"text":"Thread Safety","type":"heading"},{"inlineContent":[{"text":"Marked as ","type":"text"},{"code":"@unchecked Sendable","type":"codeVoice"},{"text":" because ","type":"text"},{"code":"AnyHashable","type":"codeVoice"},{"text":" is thread-safe for","type":"text"},{"text":" ","type":"text"},{"text":"hashing and equality operations, and the wrapper doesnâ€™t add mutable state.","type":"text"}],"type":"paragraph"},{"anchor":"Usage-Example","level":2,"text":"Usage Example","type":"heading"},{"syntax":"swift","code":["enum FeatureGroup: String, LockmanGroupId {","  case navigation, dataSync, authentication","}","","struct ModuleGroup: LockmanGroupId {","  let module: String","  let submodule: String","}","","\/\/ Both can be used as group IDs in the same collection","let featureGroup = AnyLockmanGroupId(FeatureGroup.navigation)","let moduleGroup = AnyLockmanGroupId(ModuleGroup(module: \"user\", submodule: \"profile\"))","","\/\/ Can be stored in the same Set","let groupIds: Set<AnyLockmanGroupId> = [featureGroup, moduleGroup]"],"type":"codeListing"}]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lockman\/anylockmangroupid"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId"},"topicSections":[{"anchor":"Operators","title":"Operators","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)"],"generated":true},{"generated":true,"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)"]},{"generated":true,"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)"]},{"generated":true,"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations"]}],"references":{"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/==(_:_:)":{"url":"\/documentation\/lockman\/anylockmangroupid\/==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"AnyLockmanGroupId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV"},{"text":", ","kind":"text"},{"text":"AnyLockmanGroupId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman03AnyA7GroupIdV"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/==(_:_:)","title":"==(_:_:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Compares two ","type":"text"},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"text":" instances for equality by comparing their underlying ","type":"text"},{"type":"codeVoice","code":"AnyHashable"},{"text":" values.","type":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/hash(into:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/lockman\/anylockmangroupid\/hash(into:)","type":"topic","title":"hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/hash(into:)","abstract":[{"type":"text","text":"Generates hash values that include type information to prevent"},{"type":"text","text":" "},{"type":"text","text":"different group ID types with identical values from colliding."}]},"doc://Lockman/SH":{"identifier":"doc:\/\/Lockman\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://Lockman/SQ":{"identifier":"doc:\/\/Lockman\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/Equatable-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/Equatable-Implementations","type":"topic","url":"\/documentation\/lockman\/anylockmangroupid\/equatable-implementations","title":"Equatable Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://Lockman/s8CopyableP":{"identifier":"doc:\/\/Lockman\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId":{"navigatorTitle":[{"kind":"identifier","text":"AnyLockmanGroupId"}],"role":"symbol","abstract":[{"text":"A type-erased wrapper for any ","type":"text"},{"type":"codeVoice","code":"LockmanGroupId"},{"text":", allowing heterogeneous group IDs","type":"text"},{"text":" ","type":"text"},{"text":"to be stored and compared in a uniform manner.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId","url":"\/documentation\/lockman\/anylockmangroupid","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyLockmanGroupId"}],"type":"topic","title":"AnyLockmanGroupId"},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/init(_:)":{"kind":"symbol","title":"init(_:)","url":"\/documentation\/lockman\/anylockmangroupid\/init(_:)","identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/init(_:)","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"AnyLockmanGroupId"},{"type":"text","text":" by erasing the type of a value that conforms to "},{"type":"codeVoice","code":"LockmanGroupId"},{"type":"text","text":"."}],"type":"topic","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"LockmanGroupId","kind":"typeIdentifier","preciseIdentifier":"s:7Lockman0A7GroupIda"},{"text":")","kind":"text"}]},"doc://Lockman/documentation/Lockman/AnyLockmanGroupId/CustomDebugStringConvertible-Implementations":{"identifier":"doc:\/\/Lockman\/documentation\/Lockman\/AnyLockmanGroupId\/CustomDebugStringConvertible-Implementations","role":"collectionGroup","abstract":[],"type":"topic","kind":"article","title":"CustomDebugStringConvertible Implementations","url":"\/documentation\/lockman\/anylockmangroupid\/customdebugstringconvertible-implementations"},"doc://Lockman/documentation/Lockman":{"role":"collection","url":"\/documentation\/lockman","title":"Lockman","kind":"symbol","abstract":[{"text":"A library to implement exclusive control of user actions in application development using TCA.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lockman\/documentation\/Lockman"},"doc://Lockman/s8SendableP":{"identifier":"doc:\/\/Lockman\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Lockman/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/Lockman\/s28CustomDebugStringConvertibleP","type":"unresolvable","title":"Swift.CustomDebugStringConvertible"}}}